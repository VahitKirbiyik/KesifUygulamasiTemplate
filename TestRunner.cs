using System;\nusing System.Collections.Generic;\nusing KesifUygulamasiTemplate.Utils;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace TestRunner\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine("=== PolylineDecoder Testleri Başlatılıyor ===");\n\n            // Test 1: Basit decode testi\n            Console.WriteLine("\n1. Basit Decode Testi:");\n            string encodedPolyline = "_p~iF~ps|U_ulLnnqC_mqNvxq`@";\n\n            try\n            {\n                var decodedPoints = PolylineDecoder.Decode(encodedPolyline);\n                Console.WriteLine($"Decode edilen nokta sayısı: {decodedPoints.Count}");\n\n                foreach (var point in decodedPoints)\n                {\n                    Console.WriteLine($"Lat: {point.Lat:F6}, Lng: {point.Lng:F6}");\n                }\n\n                // Encode test\n                var encodedAgain = PolylineDecoder.Encode(decodedPoints);\n                Console.WriteLine($"Tekrar encode edilmiş: {encodedAgain}");\n                Console.WriteLine("✓ Basit decode testi başarılı!");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"✗ Test hatası: {ex.Message}");\n            }\n\n            // Test 2: Gerçek veri testi\n            Console.WriteLine("\n2. Gerçek Veri Testi:");\n            var testPoints = new List<LatLng>\n            {\n                new LatLng(41.0458, 29.0340), // Ortaköy\n                new LatLng(41.0465, 29.0352), // Boğaz köprüsü başlangıç\n                new LatLng(41.0472, 29.0365), // Boğaz köprüsü orta\n                new LatLng(41.0480, 29.0378), // Boğaz köprüsü bitiş\n                new LatLng(41.0485, 29.0390)  // Üsküdar\n            };\n\n            try\n            {\n                string encoded = PolylineDecoder.Encode(testPoints);\n                Console.WriteLine($"Encode edilmiş polyline: {encoded}");\n\n                var decoded = PolylineDecoder.Decode(encoded);\n                Console.WriteLine($"Decode sonrası nokta sayısı: {decoded.Count}");\n\n                // Hassasiyet kontrolü\n                bool allWithinTolerance = true;\n                for (int i = 0; i < Math.Min(testPoints.Count, decoded.Count); i++)\n                {\n                    var original = testPoints[i];\n                    var decodedPoint = decoded[i];\n                    var latDiff = Math.Abs(original.Lat - decodedPoint.Lat);\n                    var lngDiff = Math.Abs(original.Lng - decodedPoint.Lng);\n\n                    if (latDiff > 0.00001 || lngDiff > 0.00001)\n                        allWithinTolerance = false;\n\n                    Console.WriteLine($"Nokta {i}: Fark - Lat: {latDiff:F8}, Lng: {lngDiff:F8}");\n                }\n\n                if (allWithinTolerance)\n                    Console.WriteLine("✓ Gerçek veri testi başarılı - Hassasiyet korunmuş!");\n                else\n                    Console.WriteLine("⚠ Hassasiyet kaybı var ama kabul edilebilir.");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"✗ Gerçek veri testi hatası: {ex.Message}");\n            }\n\n            Console.WriteLine("\n=== Testler Tamamlandı ===");\n            Console.ReadLine();\n        }\n    }\n}\n