using Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.DependencyInjection;\nusing CommunityToolkit.Maui;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Pages;\nusing KesifUygulamasiTemplate.ViewModels;\nusing KesifUygulamasiTemplate.Models;\nusing Microsoft.Maui.Controls.Hosting;\nusing Microsoft.Maui.Hosting;\nusing System.IO;\nusing Microsoft.Maui.Storage;\nusing Microsoft.Maui;\nusing KesifUygulamasiTemplate.Helpers;\nusing KesifUygulamasiTemplate.Views;\nusing KesifUygulamasiTemplate.UI;\n\nnamespace KesifUygulamasiTemplate\n{\n    public static class MauiProgram\n    {\n        private static IServiceProvider? _services;\n\n        /// <summary>\n        /// Service provider for accessing registered services\n        /// </summary>\n        public static IServiceProvider Services => _services ?? throw new InvalidOperationException("Services not initialized yet");\n\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n\n            builder\n                .UseMauiApp<App>()\n                .UseMauiCommunityToolkit()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");\n                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");\n                });\n\n            // -----------------------\n            // Core Services\n            // -----------------------\n            // Global exception handler for centralized error management\n            builder.Services.AddSingleton<IGlobalExceptionHandler, GlobalExceptionHandler>();\n\n            // Configuration service for API keys and settings\n            builder.Services.AddSingleton<ConfigurationService>();\n\n            // Database service initialized with app data path\n            builder.Services.AddSingleton<DatabaseService>(sp => new DatabaseService(Path.Combine(FileSystem.AppDataDirectory, "appdata.db3")));\n            builder.Services.AddSingleton<ConnectivityService>();\n            builder.Services.AddSingleton<HttpClient>();\n            builder.Services.AddSingleton<OfflineMapTileService>();\n            builder.Services.AddSingleton<OfflineFeedbackService>();\n            builder.Services.AddSingleton<IMoonCompassService, MoonCompassService>();\n            builder.Services.AddSingleton<KesifUygulamasiTemplate.Services.Interfaces.ICompassService, CompassService>();\n            builder.Services.AddSingleton<ICompassCalibrationService, CompassCalibrationService>();\n            builder.Services.AddSingleton<LocationService>();\n            builder.Services.AddSingleton<SettingsService>();\n            builder.Services.AddSingleton<NavigationService>();\n            builder.Services.AddSingleton<NotificationService>();\n            builder.Services.AddSingleton<ThemeService>();\n            builder.Services.AddSingleton<PushNotificationService>();\n            builder.Services.AddSingleton<AppCenterAnalyticsService>();\n            builder.Services.AddSingleton<ISecureDataService, SecureDataService>();\n            builder.Services.AddSingleton<LocalizationService>();\n\n            // Platform-specific AR services\n    #if ANDROID\n            builder.Services.AddSingleton<IARPlatformService, Platforms.Android.ARCoreService>();\n            builder.Services.AddSingleton<IARService, Platforms.Android.ARServiceAndroid>();\n    #elif IOS\n            builder.Services.AddSingleton<IARPlatformService, Platforms.iOS.ARKitService>();\n            builder.Services.AddSingleton<IARService, Platforms.iOS.ARServiceiOS>();\n    #endif\n\n            // -----------------------\n            // Additional Navigation & Map-related Services (Dependency Injection)\n            // Place these after core services so they can consume DatabaseService, ConnectivityService, etc.\n            // Most map/navigation services are singletons (cache/stateful), change to AddTransient if needed.\n            // -----------------------\n            builder.Services.AddSingleton<INavigationVoiceService, NavigationVoiceService>();\n            builder.Services.AddSingleton<IOfflineRouteService, OfflineRouteService>();\n            builder.Services.AddSingleton<IRoutingService, RoutingService>();\n            builder.Services.AddSingleton<IRouteService, RouteService>();\n            builder.Services.AddSingleton<IEmergencyPointsService, EmergencyPointsService>();\n            builder.Services.AddSingleton<IFavoritePlacesService, FavoritePlacesService>();\n            builder.Services.AddSingleton<KesifUygulamasiTemplate.Services.Interfaces.ITrafficService, KesifUygulamasiTemplate.Services.TrafficService>();\n            builder.Services.AddSingleton<ISearchService, SearchService>();\n            builder.Services.AddSingleton<IStreetViewService, StreetViewService>();\n            builder.Services.AddSingleton<KesifUygulamasiTemplate.Services.Interfaces.IPreferencesService, KesifUygulamasiTemplate.Services.PreferencesService>();\n            builder.Services.AddSingleton<ILocationSharingService, LocationSharingService>();\n            builder.Services.AddSingleton<MonitoringService>();\n\n            // If you have a MapDataService / IMapDataService, register it so others can use it:\n            // (Uncomment the next line only if IMapDataService and MapDataService exist in your project)\n            // builder.Services.AddSingleton<IMapDataService, MapDataService>();\n\n            // -----------------------\n            // UI Services\n            // -----------------------\n            builder.Services.AddSingleton<ThemeManager>();\n            builder.Services.AddSingleton<OfflineModeService>();\n\n            // -----------------------\n            // ViewModels\n            // -----------------------\n            builder.Services.AddTransient<MoonCompassViewModel>();\n            builder.Services.AddTransient<CompassViewModel>();\n            builder.Services.AddTransient<SettingsViewModel>();\n            builder.Services.AddTransient<LanguageSettingsViewModel>();\n            builder.Services.AddTransient<ARMoonCompassViewModel>();\n            builder.Services.AddTransient<RouteViewModel>();\n            builder.Services.AddTransient<ProfileViewModel>();\n\n            // -----------------------\n            // Views / Pages\n            // -----------------------\n            builder.Services.AddTransient<MoonCompassPage>();\n            builder.Services.AddTransient<CompassPage>();\n            builder.Services.AddTransient<SettingsPage>();\n            builder.Services.AddTransient<RoutePage>();\n            builder.Services.AddTransient<ProfilePage>();\n\n#if DEBUG\n            // builder.Logging.AddDebug();\n#endif\n\n            var app = builder.Build();\n            _services = app.Services;\n            return app;\n        }\n    }\n}\n