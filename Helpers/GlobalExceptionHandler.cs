using System;\nusing System.Diagnostics;\nusing Microsoft.AppCenter.Crashes;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Helpers\n{\n    /// <summary>\n    /// Global exception handler for centralized error management\n    /// </summary>\n    public class GlobalExceptionHandler : IGlobalExceptionHandler\n    {\n        private readonly ILogger<GlobalExceptionHandler> _logger;\n\n        public GlobalExceptionHandler(ILogger<GlobalExceptionHandler> logger)\n        {\n            _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n        }\n\n        /// <summary>\n        /// Handles unhandled exceptions globally\n        /// </summary>\n        public void HandleException(Exception exception)\n        {\n            if (exception == null)\n                return;\n\n            try\n            {\n                // Log the exception\n                _logger.LogError(exception, "Unhandled exception occurred: {Message}", exception.Message);\n\n                // Send to App Center for crash reporting\n                Crashes.TrackError(exception);\n\n                // Debug output for development\n                Debug.WriteLine($"[GlobalExceptionHandler] Exception: {exception.Message}");\n                Debug.WriteLine($"[GlobalExceptionHandler] StackTrace: {exception.StackTrace}");\n\n                // Handle specific exception types\n                HandleSpecificException(exception);\n            }\n            catch (Exception handlerException)\n            {\n                // Prevent infinite loop if handler itself throws\n                Debug.WriteLine($"[GlobalExceptionHandler] Handler exception: {handlerException.Message}");\n                Crashes.TrackError(handlerException);\n            }\n        }\n\n        /// <summary>\n        /// Handles specific exception types with custom logic\n        /// </summary>\n        private void HandleSpecificException(Exception exception)\n        {\n            switch (exception)\n            {\n                case System.Net.Http.HttpRequestException httpEx:\n                    _logger.LogWarning("Network request failed: {Message}", httpEx.Message);\n                    break;\n\n                case System.IO.IOException ioEx:\n                    _logger.LogWarning("IO operation failed: {Message}", ioEx.Message);\n                    break;\n\n                case System.Threading.Tasks.TaskCanceledException taskEx:\n                    _logger.LogInformation("Task was cancelled: {Message}", taskEx.Message);\n                    break;\n\n                case Microsoft.Data.Sqlite.SqliteException sqliteEx:\n                    _logger.LogError("Database error: {Message}", sqliteEx.Message);\n                    break;\n\n                default:\n                    _logger.LogError("Unexpected error type: {Type}", exception.GetType().Name);\n                    break;\n            }\n        }\n\n        /// <summary>\n        /// Logs user-friendly error message\n        /// </summary>\n        public void LogUserFriendlyError(string userMessage, Exception? technicalException = null)\n        {\n            _logger.LogWarning("User-facing error: {UserMessage}", userMessage);\n\n            if (technicalException != null)\n            {\n                _logger.LogError(technicalException, "Technical details for user error: {UserMessage}", userMessage);\n            }\n        }\n\n        /// <summary>\n        /// Reports non-critical errors for monitoring\n        /// </summary>\n        public void ReportNonCriticalError(string context, Exception exception)\n        {\n            _logger.LogWarning(exception, "Non-critical error in {Context}: {Message}", context, exception.Message);\n\n            // Send to analytics but don't crash the app\n            try\n            {\n                Crashes.TrackError(exception, new Dictionary<string, string>\n                {\n                    { "Context", context },\n                    { "IsCritical", "false" }\n                });\n            }\n            catch\n            {\n                // Ignore analytics errors\n            }\n        }\n    }\n\n    /// <summary>\n    /// Interface for global exception handling\n    /// </summary>\n    public interface IGlobalExceptionHandler\n    {\n        void HandleException(Exception exception);\n        void LogUserFriendlyError(string userMessage, Exception? technicalException = null);\n        void ReportNonCriticalError(string context, Exception exception);\n    }\n}\n