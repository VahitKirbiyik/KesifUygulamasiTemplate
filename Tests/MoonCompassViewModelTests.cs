using System;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.ViewModels;\nusing KesifUygulamasiTemplate.Models;\nusing Moq;\nusing Xunit;\n\nnamespace KesifUygulamasiTemplate.Tests\n{\n    public class MoonCompassViewModelTests\n    {\n        private readonly Mock<IMoonCompassService> _moonServiceMock;\n        private readonly Mock<LocationService> _locationServiceMock;\n        private readonly Mock<ConnectivityService> _connectivityServiceMock;\n        private readonly Mock<AppCenterAnalyticsService> _analyticsServiceMock;\n        private readonly MoonCompassViewModel _viewModel;\n        \n        public MoonCompassViewModelTests()\n        {\n            // Arrange - Setup mocks\n            _moonServiceMock = new Mock<IMoonCompassService>();\n            _locationServiceMock = new Mock<LocationService>();\n            _connectivityServiceMock = new Mock<ConnectivityService>();\n            _analyticsServiceMock = new Mock<AppCenterAnalyticsService>();\n            \n            // Mock moon data\n            var mockMoonData = new MoonData\n            {\n                Phase = 0.5,\n                RiseTime = DateTime.Today.AddHours(18),\n                SetTime = DateTime.Today.AddHours(6)\n            };\n            \n            // Setup mock methods\n            _moonServiceMock.Setup(x => x.GetMoonDataAsync(It.IsAny<double>(), It.IsAny<double>()))\n                .ReturnsAsync(mockMoonData);\n            \n            // Create ViewModel with mocks\n            _viewModel = new MoonCompassViewModel(_moonServiceMock.Object, _locationServiceMock.Object, _connectivityServiceMock.Object, _analyticsServiceMock.Object);\n        }\n        \n        [Fact]\n        public async Task LoadMoonDataAsync_ShouldUpdateMoonData()\n        {\n            // Act\n            await _viewModel.LoadMoonDataAsync(40.7128, -74.0060);\n            \n            // Assert\n            Assert.NotNull(_viewModel.MoonData);\n            Assert.Equal(0.5, _viewModel.MoonData.Phase);\n            Assert.Equal(DateTime.Today.AddHours(18).Hour, _viewModel.MoonData.RiseTime.Hour);\n            Assert.Equal(DateTime.Today.AddHours(6).Hour, _viewModel.MoonData.SetTime.Hour);\n            \n            // Verify method was called with correct parameters\n            _moonServiceMock.Verify(x => x.GetMoonDataAsync(40.7128, -74.0060), Times.Once);\n        }\n        \n        [Fact]\n        public async Task LoadMoonDataAsync_ShouldHandleExceptions()\n        {\n            // Arrange - Setup mock to throw exception\n            _moonServiceMock.Setup(x => x.GetMoonDataAsync(It.IsAny<double>(), It.IsAny<double>()))\n                .ThrowsAsync(new Exception("Test exception"));\n                \n            // Act\n            await _viewModel.LoadMoonDataAsync(40.7128, -74.0060);\n            \n            // Assert\n            Assert.False(string.IsNullOrEmpty(_viewModel.ErrorMessage));\n            Assert.Contains("Test exception", _viewModel.ErrorMessage);\n        }\n    }\n}