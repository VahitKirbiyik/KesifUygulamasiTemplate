using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Controls;\nusing KesifUygulamasiTemplate.ViewModels.Base;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public interface INavigationService\n    {\n        Task PushAsync(Page page, bool animated = true);\n        Task PopAsync(bool animated = true);\n        Task GoToAsync(string route, bool animated = true);\n        Task GoToAsync(string route, IDictionary<string, object> parameters, bool animated = true);\n        Task NavigateToAsync<TViewModel>(IDictionary<string, object> parameters = null) where TViewModel : BaseViewModel;\n    }\n\n    // NavigationService'in mesajla�ma sistemiyle entegrasyonu\n    public class NavigationService : INavigationService\n    {\n        private readonly IServiceProvider _serviceProvider;\n        \n        public NavigationService(IServiceProvider serviceProvider)\n        {\n            _serviceProvider = serviceProvider;\n        }\n        \n        public async Task PushAsync(Page page, bool animated = true)\n        {\n            if (page != null && Shell.Current?.Navigation != null)\n                await Shell.Current.Navigation.PushAsync(page, animated);\n        }\n\n        public async Task PopAsync(bool animated = true)\n        {\n            if (Shell.Current?.Navigation != null)\n                await Shell.Current.Navigation.PopAsync(animated);\n        }\n\n        public async Task GoToAsync(string route, bool animated = true)\n        {\n            if (!string.IsNullOrWhiteSpace(route))\n                await Shell.Current.GoToAsync(route, animated);\n        }\n\n        public async Task GoToAsync(string route, IDictionary<string, object> parameters, bool animated = true)\n        {\n            if (!string.IsNullOrWhiteSpace(route))\n                await Shell.Current.GoToAsync(route, animated, parameters);\n        }\n        \n        public async Task NavigateToAsync<TViewModel>(IDictionary<string, object> parameters = null) \n            where TViewModel : BaseViewModel\n        {\n            var viewModelType = typeof(TViewModel);\n            var route = GetRouteForViewModel(viewModelType);\n            \n            if (parameters != null)\n                await GoToAsync(route, parameters);\n            else\n                await GoToAsync(route);\n        }\n\n        private string GetRouteForViewModel(Type viewModelType)\n        {\n            // ViewModel ismine g�re route olu�tur\n            var viewModelName = viewModelType.Name;\n            if (viewModelName.EndsWith("ViewModel"))\n                viewModelName = viewModelName.Substring(0, viewModelName.Length - 9);\n            \n            return $"//{viewModelName}Page";\n        }\n    }\n}\n