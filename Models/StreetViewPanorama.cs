using System;\nusing System.Collections.Generic;\n\nnamespace KesifUygulamasiTemplate.Models\n{\n    /// <summary>\n    /// Google Street View panorama model\n    /// </summary>\n    public class StreetViewPanorama\n    {\n        /// <summary>\n        /// Unique identifier for the panorama\n        /// </summary>\n        public string Id { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Latitude coordinate\n        /// </summary>\n        public double Latitude { get; set; }\n\n        /// <summary>\n        /// Longitude coordinate\n        /// </summary>\n        public double Longitude { get; set; }\n\n        /// <summary>\n        /// Panorama image URL\n        /// </summary>\n        public string ImageUrl { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Panorama description\n        /// </summary>\n        public string Description { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Camera heading in degrees (0 = North, 90 = East)\n        /// </summary>\n        public double Heading { get; set; }\n\n        /// <summary>\n        /// Camera pitch in degrees (-90 to 90)\n        /// </summary>\n        public double Pitch { get; set; }\n\n        /// <summary>\n        /// Copyright information\n        /// </summary>\n        public string Copyright { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Date when the panorama was captured\n        /// </summary>\n        public DateTime? DateCaptured { get; set; }\n\n        /// <summary>\n        /// List of connected panoramas\n        /// </summary>\n        public List<StreetViewLink> Links { get; set; } = new List<StreetViewLink>();\n\n        /// <summary>\n        /// Creates a new StreetViewPanorama instance\n        /// </summary>\n        public StreetViewPanorama() { }\n\n        /// <summary>\n        /// Creates a new StreetViewPanorama instance with basic information\n        /// </summary>\n        public StreetViewPanorama(string id, double latitude, double longitude, string imageUrl, string description)\n        {\n            Id = id;\n            Latitude = latitude;\n            Longitude = longitude;\n            ImageUrl = imageUrl;\n            Description = description;\n        }\n\n        /// <summary>\n        /// Gets the distance to another panorama in meters\n        /// </summary>\n        public double GetDistanceTo(StreetViewPanorama other)\n        {\n            if (other == null) return 0;\n\n            const double EarthRadius = 6371000; // meters\n            var lat1 = Latitude * Math.PI / 180;\n            var lat2 = other.Latitude * Math.PI / 180;\n            var deltaLat = (other.Latitude - Latitude) * Math.PI / 180;\n            var deltaLon = (other.Longitude - Longitude) * Math.PI / 180;\n\n            var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +\n                    Math.Cos(lat1) * Math.Cos(lat2) *\n                    Math.Sin(deltaLon / 2) * Math.Sin(deltaLon / 2);\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n\n            return EarthRadius * c;\n        }\n\n        /// <summary>\n        /// Gets the bearing to another panorama in degrees\n        /// </summary>\n        public double GetBearingTo(StreetViewPanorama other)\n        {\n            if (other == null) return 0;\n\n            var lat1 = Latitude * Math.PI / 180;\n            var lat2 = other.Latitude * Math.PI / 180;\n            var deltaLon = (other.Longitude - Longitude) * Math.PI / 180;\n\n            var y = Math.Sin(deltaLon) * Math.Cos(lat2);\n            var x = Math.Cos(lat1) * Math.Sin(lat2) - Math.Sin(lat1) * Math.Cos(lat2) * Math.Cos(deltaLon);\n\n            var bearing = Math.Atan2(y, x) * 180 / Math.PI;\n            return (bearing + 360) % 360;\n        }\n    }\n}\n