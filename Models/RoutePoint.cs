using System;\nusing SQLite;\n\nnamespace KesifUygulamasiTemplate.Models\n{\n    /// <summary>\n    /// Rota üzerindeki bir noktayı temsil eder\n    /// </summary>\n    [Table("RoutePoints")]\n    public class RoutePoint\n    {\n        [PrimaryKey, AutoIncrement]\n        public int Id { get; set; }\n\n        [Indexed]\n        public int RouteId { get; set; }\n\n        public double Latitude { get; set; }\n\n        public double Longitude { get; set; }\n\n        public int Sequence { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        /// <summary>\n        /// İki rota noktası arası mesafeyi hesaplar\n        /// </summary>\n        public double GetDistanceTo(RoutePoint other)\n        {\n            return GetDistance(Latitude, Longitude, other.Latitude, other.Longitude);\n        }\n\n        /// <summary>\n        /// Haversine formülü ile iki koordinat arası mesafeyi hesaplar\n        /// </summary>\n        private static double GetDistance(double lat1, double lon1, double lat2, double lon2)\n        {\n            const double EarthRadiusKm = 6371.0;\n\n            var dLat = (lat2 - lat1) * Math.PI / 180.0;\n            var dLon = (lon2 - lon1) * Math.PI / 180.0;\n\n            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                    Math.Cos(lat1 * Math.PI / 180.0) * Math.Cos(lat2 * Math.PI / 180.0) *\n                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n\n            return EarthRadiusKm * c;\n        }\n    }\n}\n