using System;\n\nnamespace KesifUygulamasiTemplate.Models\n{\n    /// <summary>\n    /// Represents a connection between two Street View panoramas\n    /// </summary>\n    public class StreetViewLink\n    {\n        /// <summary>\n        /// ID of the source panorama\n        /// </summary>\n        public string FromId { get; set; } = string.Empty;\n\n        /// <summary>\n        /// ID of the target panorama\n        /// </summary>\n        public string ToId { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Bearing angle in degrees (0 = North, 90 = East)\n        /// </summary>\n        public double Bearing { get; set; }\n\n        /// <summary>\n        /// Description of the link direction\n        /// </summary>\n        public string Description { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Distance to the target panorama in meters\n        /// </summary>\n        public double Distance { get; set; }\n\n        /// <summary>\n        /// Creates a new StreetViewLink instance\n        /// </summary>\n        public StreetViewLink() { }\n\n        /// <summary>\n        /// Creates a new StreetViewLink instance with basic information\n        /// </summary>\n        public StreetViewLink(string fromId, string toId, double bearing)\n        {\n            FromId = fromId;\n            ToId = toId;\n            Bearing = bearing;\n        }\n\n        /// <summary>\n        /// Creates a new StreetViewLink instance with full information\n        /// </summary>\n        public StreetViewLink(string fromId, string toId, double bearing, string description, double distance)\n        {\n            FromId = fromId;\n            ToId = toId;\n            Bearing = bearing;\n            Description = description;\n            Distance = distance;\n        }\n\n        /// <summary>\n        /// Gets the cardinal direction name for the bearing\n        /// </summary>\n        public string GetCardinalDirection()\n        {\n            var directions = new[] { "North", "Northeast", "East", "Southeast", "South", "Southwest", "West", "Northwest" };\n            var index = (int)Math.Round(Bearing / 45) % 8;\n            return directions[index];\n        }\n\n        /// <summary>\n        /// Gets a user-friendly description of the link\n        /// </summary>\n        public string GetDirectionDescription()\n        {\n            if (!string.IsNullOrEmpty(Description))\n                return Description;\n\n            var direction = GetCardinalDirection();\n            return $"{direction} ({Math.Round(Bearing)}Â°)";\n        }\n\n        /// <summary>\n        /// Checks if this link points approximately in the given direction\n        /// </summary>\n        public bool IsInDirection(double targetBearing, double tolerance = 22.5)\n        {\n            var diff = Math.Abs(Bearing - targetBearing);\n            diff = Math.Min(diff, 360 - diff); // Handle wraparound\n            return diff <= tolerance;\n        }\n    }\n}\n