// Test file for StreetView models\nusing System;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Tests.Models\n{\n    public class StreetViewModelsTest\n    {\n        public static void TestStreetViewPanorama()\n        {\n            // Test StreetViewPanorama creation\n            var panorama = new StreetViewPanorama(\n                id: "test_pano_001",\n                latitude: 40.7128,\n                longitude: -74.0060,\n                imageUrl: "https://example.com/streetview.jpg",\n                description: "Times Square, New York"\n            );\n\n            Console.WriteLine($"Panorama ID: {panorama.Id}");\n            Console.WriteLine($"Location: {panorama.Latitude}, {panorama.Longitude}");\n            Console.WriteLine($"Image URL: {panorama.ImageUrl}");\n            Console.WriteLine($"Description: {panorama.Description}");\n\n            // Test distance calculation\n            var otherPanorama = new StreetViewPanorama(\n                id: "test_pano_002",\n                latitude: 40.7589,\n                longitude: -73.9851,\n                imageUrl: "https://example.com/centralpark.jpg",\n                description: "Central Park, New York"\n            );\n\n            var distance = panorama.GetDistanceTo(otherPanorama);\n            var bearing = panorama.GetBearingTo(otherPanorama);\n\n            Console.WriteLine($"Distance to Central Park: {distance:F2} meters");\n            Console.WriteLine($"Bearing to Central Park: {bearing:F1} degrees");\n        }\n\n        public static void TestStreetViewLink()\n        {\n            // Test StreetViewLink creation\n            var link = new StreetViewLink(\n                fromId: "pano_001",\n                toId: "pano_002",\n                bearing: 45.0,\n                description: "Northeast direction",\n                distance: 150.0\n            );\n\n            Console.WriteLine($"Link: {link.FromId} -> {link.ToId}");\n            Console.WriteLine($"Bearing: {link.Bearing}° ({link.GetCardinalDirection()})");\n            Console.WriteLine($"Description: {link.GetDirectionDescription()}");\n            Console.WriteLine($"Distance: {link.Distance} meters");\n\n            // Test direction matching\n            var isNorthEast = link.IsInDirection(45.0);\n            var isNorth = link.IsInDirection(0.0);\n\n            Console.WriteLine($"Is Northeast: {isNorthEast}");\n            Console.WriteLine($"Is North: {isNorth}");\n        }\n\n        public static void TestPanoramaWithLinks()\n        {\n            // Create a panorama with navigation links\n            var panorama = new StreetViewPanorama(\n                id: "main_street",\n                latitude: 40.7128,\n                longitude: -74.0060,\n                imageUrl: "https://example.com/mainstreet.jpg",\n                description: "Main Street View"\n            );\n\n            // Add navigation links\n            var northLink = new StreetViewLink("main_street", "north_street", 0.0, "North", 100.0);\n            var eastLink = new StreetViewLink("main_street", "east_street", 90.0, "East", 80.0);\n            var southLink = new StreetViewLink("main_street", "south_street", 180.0, "South", 120.0);\n            var westLink = new StreetViewLink("main_street", "west_street", 270.0, "West", 90.0);\n\n            panorama.Links.AddRange(new[] { northLink, eastLink, southLink, westLink });\n\n            Console.WriteLine($"Panorama: {panorama.Id}");\n            Console.WriteLine($"Navigation links: {panorama.Links.Count}");\n\n            foreach (var link in panorama.Links)\n            {\n                Console.WriteLine($"  - {link.GetDirectionDescription()}: {link.Distance}m ({link.Bearing}°)");\n            }\n        }\n    }\n}\n