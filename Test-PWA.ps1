# =========================================\n# KesifApp PWA Test Scripti v3.0\n# Mod√ºler PWA Test Sistemi\n# =========================================\n# -*- coding: utf-8 -*-\n[Console]::OutputEncoding = [System.Text.Encoding]::UTF8\n\n# =========================================\n# YARDIMCI FONKSƒ∞YONLAR\n# =========================================\n\n# Log fonksiyonu\nfunction Write-TestLog {\n    param(\n        [string]$Message,\n        [string]$Level = "INFO"\n    )\n\n    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"\n    $logEntry = "[$timestamp] [$Level] $Message"\n\n    if ($Verbose) {\n        switch ($Level) {\n            "ERROR" { Write-Host $logEntry -ForegroundColor Red }\n            "WARNING" { Write-Host $logEntry -ForegroundColor Yellow }\n            "SUCCESS" { Write-Host $logEntry -ForegroundColor Green }\n            default { Write-Host $logEntry -ForegroundColor Gray }\n        }\n    }\n\n    $logMessages += $logEntry\n}\n\nfunction Archive-TestResultsToHistory {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$JsonResultsPath = "pwa-test-results.json",\n        [Parameter(Mandatory = $false)]\n        [string]$HistoryPath = "test-history.json",\n        [Parameter(Mandatory = $false)]\n        [string]$DatabasePath = "test-database.json"\n    )\n\n    Write-Host "`nüìö Test sonu√ßlarƒ± ge√ßmi≈üe ar≈üivleniyor..." -ForegroundColor Cyan\n\n    if (-not (Test-Path $JsonResultsPath)) {\n        Write-Host "‚ùå Test sonu√ßlarƒ± dosyasƒ± bulunamadƒ±: $JsonResultsPath" -ForegroundColor Red\n        return\n    }\n\n    try {\n        # Test sonu√ßlarƒ±nƒ± oku\n        $testResults = Get-Content $JsonResultsPath -Raw | ConvertFrom-Json\n\n        # Test sonu√ßlarƒ±nƒ± hesapla\n        $details = $testResults.pwa_tests.details\n        $passedTests = 0\n        $failedTests = 0\n        $skippedTests = 0\n        $totalTests = 0\n\n        if ($details -and $details.PSObject.Properties) {\n            foreach ($property in $details.PSObject.Properties) {\n                $totalTests++\n                if ($property.Value -eq $true) { $passedTests++ }\n                elseif ($property.Value -eq $false) { $failedTests++ }\n                else { $skippedTests++ }\n            }\n        }\n\n        $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n        # Test kaydƒ± olu≈ütur\n        $testRecord = @{\n            id = [guid]::NewGuid().ToString()\n            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n            duration_seconds = $testResults.metadata.test_duration_seconds\n            results = @{\n                total_tests = $totalTests\n                passed_tests = $passedTests\n                failed_tests = $failedTests\n                skipped_tests = $skippedTests\n                success_rate = $successRate\n                details = $testResults.pwa_tests.details\n            }\n            legal_compliance = if ($testResults.legal_compliance) { $testResults.legal_compliance.score } else { $null }\n            seo_score = if ($testResults.seo_score) { $testResults.seo_score.score } else { $null }\n            pagespeed_score = if ($testResults.seo_score -and $testResults.seo_score.checks) {\n                ($testResults.seo_score.checks | Where-Object { $_.Name -eq "PageSpeed Insights" }).Score\n            } else { $null }\n            core_web_vitals_score = if ($testResults.seo_score -and $testResults.seo_score.checks) {\n                ($testResults.seo_score.checks | Where-Object { $_.Name -eq "Core Web Vitals" }).Score\n            } else { $null }\n            lighthouse_score = if ($testResults.seo_score -and $testResults.seo_score.checks) {\n                ($testResults.seo_score.checks | Where-Object { $_.Name -eq "Lighthouse Performance" }).Score\n            } else { $null }\n            metadata = @{\n                script_version = $testResults.metadata.script_version\n                powershell_version = $testResults.metadata.powershell_version\n                hostname = $testResults.metadata.hostname\n                username = $testResults.metadata.username\n                base_url = $testResults.configuration.base_url\n            }\n        }\n\n        # Ge√ßmi≈ü dosyasƒ±na kaydet\n        $testResultsHashtable = @{}\n        foreach ($property in $details.PSObject.Properties) {\n            $testResultsHashtable[$property.Name] = $property.Value\n        }\n\n        Save-TestHistoryToJson -TestResults $testResultsHashtable -LegalResults @{\n            Score = $testRecord.legal_compliance\n        } -SEOResults @{\n            Score = $testRecord.seo_score\n            PageSpeed = @{ Score = $testRecord.pagespeed_score }\n            CoreWebVitals = @{ Score = $testRecord.core_web_vitals_score }\n            Lighthouse = @{ Score = $testRecord.lighthouse_score }\n        } -Duration ([TimeSpan]::FromSeconds($testRecord.duration_seconds)) -HistoryPath $HistoryPath\n\n        # Veritabanƒ±na kaydet\n        Save-TestToDatabase -TestResults $testResultsHashtable -LegalResults @{\n            Score = $testRecord.legal_compliance\n        } -SEOResults @{\n            Score = $testRecord.seo_score\n            PageSpeed = @{ Score = $testRecord.pagespeed_score }\n            CoreWebVitals = @{ Score = $testRecord.core_web_vitals_score }\n            Lighthouse = @{ Score = $testRecord.lighthouse_score }\n        } -Duration ([TimeSpan]::FromSeconds($testRecord.duration_seconds)) -DatabasePath $DatabasePath\n\n        Write-Host "‚úÖ Test sonu√ßlarƒ± ge√ßmi≈üe ar≈üivlendi" -ForegroundColor Green\n        Write-Host "üìä Ba≈üarƒ± oranƒ±: $successRate%" -ForegroundColor White\n        Write-Host "üìÖ Zaman damgasƒ±: $($testRecord.timestamp)" -ForegroundColor White\n\n    } catch {\n        Write-Host "‚ùå Ar≈üivleme ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Archive error: $($_.Exception.Message)" "ERROR"\n    }\n}\n\nfunction Save-TestHistoryToJson {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$LegalResults = @{},\n        [Parameter(Mandatory = $false)]\n        [hashtable]$SEOResults = @{},\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero,\n        [Parameter(Mandatory = $false)]\n        [string]$HistoryPath = "test-history.json"\n    )\n\n    Write-Host "`nüìö Test ge√ßmi≈üi ar≈üivleniyor..." -ForegroundColor Cyan\n\n    # Mevcut ge√ßmi≈üi oku\n    $history = @()\n    if (Test-Path $HistoryPath) {\n        try {\n            $history = Get-Content $HistoryPath -Raw | ConvertFrom-Json\n        } catch {\n            Write-Host "‚ö†Ô∏è Ge√ßmi≈ü dosya okunamadƒ±, yeni dosya olu≈üturulacak" -ForegroundColor Yellow\n            $history = @()\n        }\n    }\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $totalTests = $TestResults.Count\n    $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n    # Yeni test kaydƒ± olu≈ütur\n    $testRecord = @{\n        id = [guid]::NewGuid().ToString()\n        timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n        duration_seconds = [math]::Round($Duration.TotalSeconds, 2)\n        results = @{\n            total_tests = $totalTests\n            passed_tests = $passedTests\n            failed_tests = $failedTests\n            skipped_tests = $skippedTests\n            success_rate = $successRate\n            details = $TestResults\n        }\n        legal_compliance = if ($LegalResults.Score) { $LegalResults.Score } else { $null }\n        seo_score = if ($SEOResults.Score) { $SEOResults.Score } else { $null }\n        pagespeed_score = if ($SEOResults.PageSpeed -and $SEOResults.PageSpeed.Score) { $SEOResults.PageSpeed.Score } else { $null }\n        core_web_vitals_score = if ($SEOResults.CoreWebVitals -and $SEOResults.CoreWebVitals.Score) { $SEOResults.CoreWebVitals.Score } else { $null }\n        lighthouse_score = if ($SEOResults.Lighthouse -and $SEOResults.Lighthouse.Score) { $SEOResults.Lighthouse.Score } else { $null }\n        metadata = @{\n            script_version = "3.0.0"\n            powershell_version = $PSVersionTable.PSVersion.ToString()\n            hostname = $env:COMPUTERNAME\n            username = $env:USERNAME\n            base_url = $BaseUrl\n        }\n    }\n\n    # Ge√ßmi≈üe ekle (en yeni en √ºstte)\n    $history = @($testRecord) + $history\n\n    # Son 100 kaydƒ± tut\n    if ($history.Count -gt 100) {\n        $history = $history[0..99]\n    }\n\n    # JSON olarak kaydet\n    $history | ConvertTo-Json -Depth 10 | Out-File -FilePath $HistoryPath -Encoding UTF8\n\n    Write-Host "‚úÖ Test ge√ßmi≈üi kaydedildi: $HistoryPath" -ForegroundColor Green\n    Write-Host "üìä Toplam kayƒ±t sayƒ±sƒ±: $($history.Count)" -ForegroundColor White\n    Write-TestLog "Test history saved: $HistoryPath"\n}\n\nfunction Get-TestHistoryStatistics {\n    param(\n        [Parameter(Mandatory = $false)]\n        [string]$HistoryPath = "test-history.json",\n        [Parameter(Mandatory = $false)]\n        [int]$Days = 30\n    )\n\n    Write-Host "`nüìà Test ge√ßmi≈üi istatistikleri alƒ±nƒ±yor..." -ForegroundColor Cyan\n\n    if (-not (Test-Path $HistoryPath)) {\n        Write-Host "‚ùå Ge√ßmi≈ü dosyasƒ± bulunamadƒ±: $HistoryPath" -ForegroundColor Red\n        return $null\n    }\n\n    try {\n        $history = Get-Content $HistoryPath -Raw | ConvertFrom-Json\n\n        # Son N g√ºn i√ßindeki kayƒ±tlarƒ± filtrele\n        $cutoffDate = (Get-Date).AddDays(-$Days)\n        $recentHistory = $history | Where-Object {\n            [DateTime]::Parse($_.timestamp) -gt $cutoffDate\n        }\n\n        if ($recentHistory.Count -eq 0) {\n            Write-Host "‚ö†Ô∏è Son $Days g√ºnde test ge√ßmi≈üi bulunamadƒ±" -ForegroundColor Yellow\n            return $null\n        }\n\n        # ƒ∞statistikler hesapla\n        $stats = @{\n            period_days = $Days\n            total_tests = $recentHistory.Count\n            average_success_rate = [math]::Round(($recentHistory.results.success_rate | Measure-Object -Average).Average, 1)\n            min_success_rate = [math]::Round(($recentHistory.results.success_rate | Measure-Object -Minimum).Minimum, 1)\n            max_success_rate = [math]::Round(($recentHistory.results.success_rate | Measure-Object -Maximum).Maximum, 1)\n            average_duration = [math]::Round(($recentHistory.duration_seconds | Measure-Object -Average).Average, 2)\n            trend = @{\n                improving = $false\n                direction = "stable"\n                change_percent = 0\n            }\n        }\n\n        # Trend analizi (son 5 test)\n        if ($recentHistory.Count -ge 5) {\n            $last5Tests = $recentHistory[0..4]\n            $firstHalf = $last5Tests[0..1].results.success_rate | Measure-Object -Average\n            $secondHalf = $last5Tests[2..4].results.success_rate | Measure-Object -Average\n\n            if ($firstHalf.Average -gt 0) {\n                $changePercent = [math]::Round((($secondHalf.Average - $firstHalf.Average) / $firstHalf.Average) * 100, 1)\n                $stats.trend.change_percent = $changePercent\n\n                if ($changePercent -gt 5) {\n                    $stats.trend.direction = "improving"\n                    $stats.trend.improving = $true\n                } elseif ($changePercent -lt -5) {\n                    $stats.trend.direction = "declining"\n                } else {\n                    $stats.trend.direction = "stable"\n                }\n            }\n        }\n\n        # Legal ve SEO trendleri\n        $legalScores = $recentHistory | Where-Object { $_.legal_compliance -ne $null } | Select-Object -ExpandProperty legal_compliance\n        $seoScores = $recentHistory | Where-Object { $_.seo_score -ne $null } | Select-Object -ExpandProperty seo_score\n\n        if ($legalScores.Count -gt 0) {\n            $stats.legal_average = [math]::Round(($legalScores | Measure-Object -Average).Average, 1)\n        }\n        if ($seoScores.Count -gt 0) {\n            $stats.seo_average = [math]::Round(($seoScores | Measure-Object -Average).Average, 1)\n        }\n\n        Write-Host "‚úÖ Ge√ßmi≈ü istatistikleri hesaplandƒ±:" -ForegroundColor Green\n        Write-Host "  üìä Ortalama ba≈üarƒ±: $($stats.average_success_rate)%" -ForegroundColor White\n        Write-Host "  üìà Trend: $($stats.trend.direction) ($($stats.trend.change_percent)%)" -ForegroundColor White\n        Write-Host "  ‚è±Ô∏è Ortalama s√ºre: $($stats.average_duration)s" -ForegroundColor White\n        if ($stats.legal_average) {\n            Write-Host "  ‚öñÔ∏è Legal ortalama: $($stats.legal_average)/100" -ForegroundColor White\n        }\n        if ($stats.seo_average) {\n            Write-Host "  üîç SEO ortalama: $($stats.seo_average)/100" -ForegroundColor White\n        }\n\n        return $stats\n\n    } catch {\n        Write-Host "‚ùå Ge√ßmi≈ü istatistikleri alƒ±namadƒ±: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "History statistics error: $($_.Exception.Message)" "ERROR"\n        return $null\n    }\n}\n\nfunction Export-TestHistoryToCSV {\n    param(\n        [Parameter(Mandatory = $false)]\n        [string]$HistoryPath = "test-history.json",\n        [Parameter(Mandatory = $false)]\n        [string]$CsvPath = "test-history.csv",\n        [Parameter(Mandatory = $false)]\n        [int]$Days = 30\n    )\n\n    Write-Host "`nüìä Test ge√ßmi≈üi CSV'ye aktarƒ±lƒ±yor..." -ForegroundColor Cyan\n\n    if (-not (Test-Path $HistoryPath)) {\n        Write-Host "‚ùå Ge√ßmi≈ü dosyasƒ± bulunamadƒ±: $HistoryPath" -ForegroundColor Red\n        return\n    }\n\n    try {\n        $history = Get-Content $HistoryPath -Raw | ConvertFrom-Json\n\n        # Son N g√ºn i√ßindeki kayƒ±tlarƒ± filtrele\n        $cutoffDate = (Get-Date).AddDays(-$Days)\n        $recentHistory = $history | Where-Object {\n            [DateTime]::Parse($_.timestamp) -gt $cutoffDate\n        }\n\n        if ($recentHistory.Count -eq 0) {\n            Write-Host "‚ö†Ô∏è Son $Days g√ºnde test ge√ßmi≈üi bulunamadƒ±" -ForegroundColor Yellow\n            return\n        }\n\n        # CSV formatƒ±na d√∂n√º≈üt√ºr\n        $csvData = $recentHistory | Select-Object @(\n            @{\n                Name = "Tarih"\n                Expression = { [DateTime]::Parse($_.timestamp).ToString("yyyy-MM-dd HH:mm:ss") }\n            },\n            @{\n                Name = "Basari_Orani"\n                Expression = { "$($_.results.success_rate)%" }\n            },\n            @{\n                Name = "Gecen_Testler"\n                Expression = { "$($_.results.passed_tests)/$($_.results.total_tests)" }\n            },\n            @{\n                Name = "Basarisiz_Testler"\n                Expression = { $_.results.failed_tests }\n            },\n            @{\n                Name = "Atlanan_Testler"\n                Expression = { $_.results.skipped_tests }\n            },\n            @{\n                Name = "Sure_Saniye"\n                Expression = { $_.duration_seconds }\n            },\n            @{\n                Name = "Legal_Skor"\n                Expression = { if ($_.legal_compliance) { "$($_.legal_compliance)/100" } else { "N/A" } }\n            },\n            @{\n                Name = "SEO_Skor"\n                Expression = { if ($_.seo_score) { "$($_.seo_score)/100" } else { "N/A" } }\n            },\n            @{\n                Name = "PageSpeed_Skor"\n                Expression = { if ($_.pagespeed_score) { "$($_.pagespeed_score)/100" } else { "N/A" } }\n            },\n            @{\n                Name = "Core_Web_Vitals"\n                Expression = { if ($_.core_web_vitals_score) { "$($_.core_web_vitals_score)/100" } else { "N/A" } }\n            },\n            @{\n                Name = "Lighthouse_Skor"\n                Expression = { if ($_.lighthouse_score) { "$($_.lighthouse_score)/100" } else { "N/A" } }\n            },\n            @{\n                Name = "Script_Version"\n                Expression = { $_.metadata.script_version }\n            },\n            @{\n                Name = "Hostname"\n                Expression = { $_.metadata.hostname }\n            },\n            @{\n                Name = "Username"\n                Expression = { $_.metadata.username }\n            }\n        )\n\n        # CSV olarak kaydet\n        $csvData | Export-Csv -Path $CsvPath -NoTypeInformation -Encoding UTF8\n\n        Write-Host "‚úÖ Test ge√ßmi≈üi CSV'ye aktarƒ±ldƒ±: $CsvPath" -ForegroundColor Green\n        Write-Host "üìä Aktarƒ±lan kayƒ±t sayƒ±sƒ±: $($csvData.Count)" -ForegroundColor White\n        Write-TestLog "Test history exported to CSV: $CsvPath"\n\n    } catch {\n        Write-Host "‚ùå CSV aktarƒ±mƒ± ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "CSV export error: $($_.Exception.Message)" "ERROR"\n    }\n}\n\nfunction Initialize-TestDatabase {\n    param(\n        [Parameter(Mandatory = $false)]\n        [string]$DatabasePath = "test-database.json"\n    )\n\n    Write-Host "`nüóÑÔ∏è Test veritabanƒ± ba≈ülatƒ±lƒ±yor..." -ForegroundColor Cyan\n\n    if (-not (Test-Path $DatabasePath)) {\n        $database = @{\n            metadata = @{\n                created = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n                version = "1.0"\n                description = "KesifApp PWA Test Database"\n            }\n            tests = @()\n            statistics = @{\n                total_tests = 0\n                last_updated = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n            }\n        }\n\n        $database | ConvertTo-Json -Depth 10 | Out-File -FilePath $DatabasePath -Encoding UTF8\n        Write-Host "‚úÖ Test veritabanƒ± olu≈üturuldu: $DatabasePath" -ForegroundColor Green\n    } else {\n        Write-Host "‚ÑπÔ∏è Test veritabanƒ± zaten mevcut: $DatabasePath" -ForegroundColor Cyan\n    }\n\n    Write-TestLog "Test database initialized: $DatabasePath"\n}\n\nfunction Save-TestToDatabase {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$LegalResults = @{},\n        [Parameter(Mandatory = $false)]\n        [hashtable]$SEOResults = @{},\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero,\n        [Parameter(Mandatory = $false)]\n        [string]$DatabasePath = "test-database.json"\n    )\n\n    Write-Host "`nüíæ Test veritabanƒ±na kaydediliyor..." -ForegroundColor Cyan\n\n    # Veritabanƒ±nƒ± oku\n    if (-not (Test-Path $DatabasePath)) {\n        Initialize-TestDatabase -DatabasePath $DatabasePath\n    }\n\n    try {\n        $database = Get-Content $DatabasePath -Raw | ConvertFrom-Json\n\n        # Test sonu√ßlarƒ±nƒ± hesapla\n        $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n        $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n        $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n        $totalTests = $TestResults.Count\n        $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n        # Yeni test kaydƒ± olu≈ütur\n        $testRecord = @{\n            id = [guid]::NewGuid().ToString()\n            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n            duration_seconds = [math]::Round($Duration.TotalSeconds, 2)\n            results = @{\n                total_tests = $totalTests\n                passed_tests = $passedTests\n                failed_tests = $failedTests\n                skipped_tests = $skippedTests\n                success_rate = $successRate\n                details = $TestResults\n            }\n            legal_compliance = if ($LegalResults.Score) { $LegalResults.Score } else { $null }\n            seo_score = if ($SEOResults.Score) { $SEOResults.Score } else { $null }\n            pagespeed_score = if ($SEOResults.PageSpeed -and $SEOResults.PageSpeed.Score) { $SEOResults.PageSpeed.Score } else { $null }\n            core_web_vitals_score = if ($SEOResults.CoreWebVitals -and $SEOResults.CoreWebVitals.Score) { $SEOResults.CoreWebVitals.Score } else { $null }\n            lighthouse_score = if ($SEOResults.Lighthouse -and $SEOResults.Lighthouse.Score) { $SEOResults.Lighthouse.Score } else { $null }\n            metadata = @{\n                script_version = "3.0.0"\n                powershell_version = $PSVersionTable.PSVersion.ToString()\n                hostname = $env:COMPUTERNAME\n                username = $env:USERNAME\n                base_url = $BaseUrl\n            }\n        }\n\n        # Veritabanƒ±na ekle\n        $database.tests = @($testRecord) + $database.tests\n\n        # Son 500 kaydƒ± tut\n        if ($database.tests.Count -gt 500) {\n            $database.tests = $database.tests[0..499]\n        }\n\n        # ƒ∞statistikleri g√ºncelle\n        $database.statistics.total_tests = $database.tests.Count\n        $database.statistics.last_updated = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n\n        # Veritabanƒ±nƒ± kaydet\n        $database | ConvertTo-Json -Depth 10 | Out-File -FilePath $DatabasePath -Encoding UTF8\n\n        Write-Host "‚úÖ Test veritabanƒ±na kaydedildi: $DatabasePath" -ForegroundColor Green\n        Write-Host "üìä Veritabanƒ±ndaki toplam test sayƒ±sƒ±: $($database.tests.Count)" -ForegroundColor White\n        Write-TestLog "Test saved to database: $DatabasePath"\n\n    } catch {\n        Write-Host "‚ùå Veritabanƒ± kaydetme hatasƒ±: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Database save error: $($_.Exception.Message)" "ERROR"\n    }\n}\n\n# =========================================\n# GER√áEK Aƒû TESTLERƒ∞ MOD√úL√ú\n# =========================================\n\nfunction Test-NetworkConnectivity {\n    param(\n        [string]$Url,\n        [int]$TimeoutSec = 30\n    )\n\n    Write-Host "`nüåê Aƒü Baƒülantƒ±sƒ± Testi:" -ForegroundColor Yellow\n    Write-TestLog "Aƒü baƒülantƒ±sƒ± testi ba≈ülatƒ±lƒ±yor: $Url"\n\n    $networkResults = @{\n        DnsResolution = $false\n        HttpResponse = $false\n        ResponseTime = 0\n        StatusCode = 0\n        ErrorMessage = ""\n    }\n\n    try {\n        # DNS √ß√∂z√ºmleme testi\n        Write-Host "üîç DNS √ß√∂z√ºmleme testi..." -ForegroundColor Gray\n        $dnsStart = Get-Date\n        $dnsResult = [System.Net.Dns]::GetHostAddresses($Url.Replace("https://", "").Replace("http://", "").Split('/')[0])\n        $dnsEnd = Get-Date\n        $dnsTime = ($dnsEnd - $dnsStart).TotalMilliseconds\n\n        if ($dnsResult.Count -gt 0) {\n            Write-Host "‚úÖ DNS √ß√∂z√ºmleme ba≈üarƒ±lƒ±: $($dnsResult[0].IPAddressToString) ($([math]::Round($dnsTime, 2))ms)" -ForegroundColor Green\n            $networkResults.DnsResolution = $true\n            Write-TestLog "DNS √ß√∂z√ºmleme ba≈üarƒ±lƒ±: $($dnsResult[0].IPAddressToString)"\n        } else {\n            Write-Host "‚ùå DNS √ß√∂z√ºmleme ba≈üarƒ±sƒ±z" -ForegroundColor Red\n            $networkResults.ErrorMessage = "DNS √ß√∂z√ºmleme ba≈üarƒ±sƒ±z"\n            return $networkResults\n        }\n\n        # HTTP/HTTPS baƒülantƒ± testi\n        Write-Host "üîó HTTP baƒülantƒ±sƒ± testi..." -ForegroundColor Gray\n        $httpStart = Get-Date\n\n        # Timeout ile web isteƒüi\n        $webRequest = [System.Net.WebRequest]::Create($Url)\n        $webRequest.Timeout = $TimeoutSec * 1000\n        $webRequest.Method = "HEAD"\n\n        $response = $webRequest.GetResponse()\n        $httpEnd = Get-Date\n        $responseTime = ($httpEnd - $httpStart).TotalMilliseconds\n\n        $networkResults.HttpResponse = $true\n        $networkResults.ResponseTime = [math]::Round($responseTime, 2)\n        $networkResults.StatusCode = [int]$response.StatusCode\n\n        Write-Host "‚úÖ HTTP yanƒ±tƒ± alƒ±ndƒ±: $($response.StatusCode) ($($networkResults.ResponseTime)ms)" -ForegroundColor Green\n        Write-TestLog "HTTP yanƒ±tƒ± ba≈üarƒ±lƒ±: $($response.StatusCode) - ${responseTime}ms"\n\n        $response.Close()\n\n    } catch {\n        Write-Host "‚ùå Aƒü testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $networkResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "Aƒü testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n    }\n\n    return $networkResults\n}\n\nfunction Test-FetchPerformance {\n    param(\n        [string]$Url,\n        [int]$TimeoutSec = 30\n    )\n\n    Write-Host "`n‚ö° Fetch Performans Testi:" -ForegroundColor Yellow\n    Write-TestLog "Fetch performans testi ba≈ülatƒ±lƒ±yor: $Url"\n\n    $fetchResults = @{\n        TotalTime = 0\n        DnsTime = 0\n        ConnectTime = 0\n        TlsTime = 0\n        ResponseTime = 0\n        DownloadTime = 0\n        ContentSize = 0\n        StatusCode = 0\n        ErrorMessage = ""\n    }\n\n    try {\n        $startTime = Get-Date\n\n        # WebClient ile detaylƒ± test\n        $webClient = New-Object System.Net.WebClient\n        $webClient.Headers.Add("User-Agent", "PWA-Test-Script/1.0")\n\n        # DNS √ß√∂z√ºmleme zamanlamasƒ±\n        $dnsStart = Get-Date\n        [System.Net.Dns]::GetHostAddresses($Url.Replace("https://", "").Replace("http://", "").Split('/')[0]) | Out-Null\n        $dnsEnd = Get-Date\n        $fetchResults.DnsTime = [math]::Round(($dnsEnd - $dnsStart).TotalMilliseconds, 2)\n\n        # ƒ∞ndirme i≈ülemi\n        $downloadStart = Get-Date\n        $content = $webClient.DownloadString($Url)\n        $downloadEnd = Get-Date\n\n        $endTime = Get-Date\n        $fetchResults.TotalTime = [math]::Round(($endTime - $startTime).TotalMilliseconds, 2)\n        $fetchResults.DownloadTime = [math]::Round(($downloadEnd - $downloadStart).TotalMilliseconds, 2)\n        $fetchResults.ContentSize = $content.Length\n        $fetchResults.ResponseTime = $fetchResults.TotalTime - $fetchResults.DownloadTime\n\n        Write-Host "‚úÖ Fetch tamamlandƒ±:" -ForegroundColor Green\n        Write-Host "  üìä Toplam s√ºre: $($fetchResults.TotalTime)ms" -ForegroundColor White\n        Write-Host "  üîç DNS s√ºresi: $($fetchResults.DnsTime)ms" -ForegroundColor White\n        Write-Host "  üì° Yanƒ±t s√ºresi: $($fetchResults.ResponseTime)ms" -ForegroundColor White\n        Write-Host "  üì• ƒ∞ndirme s√ºresi: $($fetchResults.DownloadTime)ms" -ForegroundColor White\n        Write-Host "  üìè ƒ∞√ßerik boyutu: $([math]::Round($fetchResults.ContentSize / 1024, 2)) KB" -ForegroundColor White\n\n        Write-TestLog "Fetch ba≈üarƒ±lƒ±: ${TotalTime}ms, ${ContentSize} bytes"\n\n    } catch {\n        Write-Host "‚ùå Fetch testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $fetchResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "Fetch testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n    }\n\n    return $fetchResults\n}\n\nfunction Test-NetworkTimeout {\n    param(\n        [string]$Url,\n        [int]$TimeoutSec = 5\n    )\n\n    Write-Host "`n‚è±Ô∏è Aƒü Timeout Testi:" -ForegroundColor Yellow\n    Write-TestLog "Timeout testi ba≈ülatƒ±lƒ±yor: $Url (${TimeoutSec}s)"\n\n    $timeoutResults = @{\n        TimeoutOccurred = $false\n        ResponseTime = 0\n        StatusCode = 0\n        ErrorMessage = ""\n    }\n\n    try {\n        $startTime = Get-Date\n\n        $webRequest = [System.Net.WebRequest]::Create($Url)\n        $webRequest.Timeout = $TimeoutSec * 1000\n        $webRequest.Method = "HEAD"\n\n        $response = $webRequest.GetResponse()\n        $endTime = Get-Date\n        $responseTime = ($endTime - $startTime).TotalMilliseconds\n\n        $timeoutResults.ResponseTime = [math]::Round($responseTime, 2)\n        $timeoutResults.StatusCode = [int]$response.StatusCode\n\n        Write-Host "‚úÖ Timeout testi ba≈üarƒ±lƒ±: $($timeoutResults.ResponseTime)ms" -ForegroundColor Green\n        Write-TestLog "Timeout testi ba≈üarƒ±lƒ±: ${responseTime}ms"\n\n        $response.Close()\n\n    } catch [System.Net.WebException] {\n        if ($_.Exception.Status -eq [System.Net.WebExceptionStatus]::Timeout) {\n            Write-Host "‚ö†Ô∏è Timeout olu≈ütu: ${TimeoutSec}s" -ForegroundColor Yellow\n            $timeoutResults.TimeoutOccurred = $true\n            Write-TestLog "Timeout olu≈ütu: ${TimeoutSec}s"\n        } else {\n            Write-Host "‚ùå Aƒü hatasƒ±: $($_.Exception.Message)" -ForegroundColor Red\n            $timeoutResults.ErrorMessage = $_.Exception.Message\n            Write-TestLog "Aƒü hatasƒ±: $($_.Exception.Message)" "ERROR"\n        }\n    } catch {\n        Write-Host "‚ùå Timeout testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $timeoutResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "Timeout testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n    }\n\n    return $timeoutResults\n}\n\n# Parametreler\n$BaseUrl = if ($args.Count -gt 0 -and $args[0] -notmatch '^-') { $args[0] } else { "https://kesifapp.com" }\n$Verbose = $args -contains '-Verbose' -or $args -contains '-verbose'\n$SkipNetworkTests = $args -contains '-SkipNetworkTests' -or $args -contains '-skipnetworktests'\n$ExportJson = $args -contains '-ExportJson' -or $args -contains '-exportjson'\n$GenerateDashboard = $args -contains '-GenerateDashboard' -or $args -contains '-generatedashboard'\n$IncludeLegalTests = $args -contains '-IncludeLegalTests' -or $args -contains '-includelegaltests'\n$IncludeSEOTests = $args -contains '-IncludeSEOTests' -or $args -contains '-includeseotests'\n\n# Webhook parametreleri (environment variables veya command line arguments)\n$SlackWebhookUrl = $env:PWA_SLACK_WEBHOOK_URL\n$DiscordWebhookUrl = $env:PWA_DISCORD_WEBHOOK_URL\n\n# Command line'dan webhook URL'leri al\nforeach ($arg in $args) {\n    if ($arg -match '^--slack-webhook=(.+)') {\n        $SlackWebhookUrl = $matches[1]\n    }\n    if ($arg -match '^--discord-webhook=(.+)') {\n        $DiscordWebhookUrl = $matches[1]\n    }\n}\n\nWrite-Host "üîç KesifApp PWA Test Scripti v4.0 Ba≈ülatƒ±lƒ±yor..." -ForegroundColor Cyan\nWrite-Host "üìñ Kullanƒ±m: .\Test-PWA.ps1 [URL] [-Verbose] [-SkipNetworkTests] [-ExportJson] [-GenerateDashboard] [-IncludeLegalTests] [-IncludeSEOTests] [--slack-webhook=URL] [--discord-webhook=URL]" -ForegroundColor Gray\nWrite-Host "üìñ √ñrnekler:" -ForegroundColor Gray\nWrite-Host "   .\Test-PWA.ps1" -ForegroundColor Gray\nWrite-Host "   .\Test-PWA.ps1 https://kesifapp.com -Verbose -ExportJson -GenerateDashboard" -ForegroundColor Gray\nWrite-Host "   .\Test-PWA.ps1 -SkipNetworkTests -IncludeLegalTests -IncludeSEOTests" -ForegroundColor Gray\nWrite-Host "   .\Test-PWA.ps1 --slack-webhook=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" -ForegroundColor Gray\nWrite-Host "   .\Test-PWA.ps1 --discord-webhook=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK" -ForegroundColor Gray\n\nif ($Verbose) {\n    Write-Host "üìã Ayrƒ±ntƒ±lƒ± mod aktif" -ForegroundColor Yellow\n}\nif ($ExportJson) {\n    Write-Host "üìÑ JSON export modu aktif" -ForegroundColor Yellow\n}\nif ($GenerateDashboard) {\n    Write-Host "üìä Dashboard olu≈üturma modu aktif" -ForegroundColor Yellow\n}\nif ($IncludeLegalTests) {\n    Write-Host "‚öñÔ∏è Legal testler dahil edildi" -ForegroundColor Yellow\n}\nif ($IncludeSEOTests) {\n    Write-Host "üîç SEO testler dahil edildi" -ForegroundColor Yellow\n}\n\n# Global deƒüi≈ükenler\n$testResults = @{}\n$legalResults = @{}\n$seoResults = @{}\n$startTime = Get-Date\n$logMessages = @()\n\n# =========================================\n# DASHBOARD OLU≈ûTURMA MOD√úL√ú\n# =========================================\n\nfunction Generate-PWADashboard {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $true)]\n        [hashtable]$LegalResults,\n        [Parameter(Mandatory = $true)]\n        [hashtable]$SEOResults,\n        [Parameter(Mandatory = $false)]\n        [string]$OutputPath = "pwa-dashboard.html"\n    )\n\n    Write-Host "`nüìä PWA Dashboard Olu≈üturuluyor..." -ForegroundColor Cyan\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $totalTests = $TestResults.Count\n    $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n    # HTML dashboard olu≈ütur\n    $htmlContent = @"\n<!DOCTYPE html>\n<html lang="tr">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>PWA Test Dashboard - KesifApp</title>\n    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>\n    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">\n    <style>\n        body { background-color: #f8f9fa; }\n        .card { border: none; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .metric-card { text-align: center; padding: 20px; }\n        .metric-value { font-size: 2.5rem; font-weight: bold; }\n        .metric-label { color: #6c757d; font-size: 0.9rem; }\n        .status-passed { color: #28a745; }\n        .status-failed { color: #dc3545; }\n        .status-skipped { color: #ffc107; }\n        .progress-circle {\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 1.5rem;\n            font-weight: bold;\n            margin: 0 auto;\n        }\n        .chart-container { position: relative; height: 300px; }\n    </style>\n</head>\n<body>\n    <div class="container-fluid py-4">\n        <div class="row mb-4">\n            <div class="col-12">\n                <div class="card">\n                    <div class="card-header bg-primary text-white">\n                        <h1 class="card-title mb-0">\n                            <i class="fas fa-mobile-alt me-2"></i>\n                            PWA Test Dashboard - KesifApp\n                        </h1>\n                        <small class="text-light">Test Tarihi: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</small>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Genel Metrikler -->\n        <div class="row mb-4">\n            <div class="col-md-3">\n                <div class="card metric-card">\n                    <div class="progress-circle bg-primary text-white">\n                        $successRate%\n                    </div>\n                    <div class="metric-label">Ba≈üarƒ± Oranƒ±</div>\n                </div>\n            </div>\n            <div class="col-md-3">\n                <div class="card metric-card">\n                    <div class="metric-value text-success">$passedTests</div>\n                    <div class="metric-label">Ge√ßen Testler</div>\n                </div>\n            </div>\n            <div class="col-md-3">\n                <div class="card metric-card">\n                    <div class="metric-value text-danger">$failedTests</div>\n                    <div class="metric-label">Ba≈üarƒ±sƒ±z Testler</div>\n                </div>\n            </div>\n            <div class="col-md-3">\n                <div class="card metric-card">\n                    <div class="metric-value text-warning">$skippedTests</div>\n                    <div class="metric-label">Atlanan Testler</div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Grafikler -->\n        <div class="row mb-4">\n            <div class="col-md-6">\n                <div class="card">\n                    <div class="card-header">\n                        <h5 class="card-title mb-0">\n                            <i class="fas fa-chart-pie me-2"></i>\n                            Test Sonu√ßlarƒ± Daƒüƒ±lƒ±mƒ±\n                        </h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="chart-container">\n                            <canvas id="resultsChart"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="card">\n                    <div class="card-header">\n                        <h5 class="card-title mb-0">\n                            <i class="fas fa-chart-bar me-2"></i>\n                            Test Detaylarƒ±\n                        </h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="chart-container">\n                            <canvas id="detailsChart"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- Test Detaylarƒ± Tablosu -->\n        <div class="row mb-4">\n            <div class="col-12">\n                <div class="card">\n                    <div class="card-header">\n                        <h5 class="card-title mb-0">\n                            <i class="fas fa-list-check me-2"></i>\n                            Test Detaylarƒ±\n                        </h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="table-responsive">\n                            <table class="table table-striped">\n                                <thead>\n                                    <tr>\n                                        <th>Test Adƒ±</th>\n                                        <th>Durum</th>\n                                        <th>Detaylar</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n"@\n\n    # Test sonu√ßlarƒ±nƒ± tabloya ekle\n    foreach ($test in $TestResults.GetEnumerator()) {\n        $status = switch ($test.Value) {\n            $true { '<span class="badge bg-success"><i class="fas fa-check me-1"></i>Ba≈üarƒ±lƒ±</span>' }\n            $false { '<span class="badge bg-danger"><i class="fas fa-times me-1"></i>Ba≈üarƒ±sƒ±z</span>' }\n            $null { '<span class="badge bg-warning"><i class="fas fa-pause me-1"></i>Atlandƒ±</span>' }\n            default { '<span class="badge bg-secondary"><i class="fas fa-question me-1"></i>Bilinmiyor</span>' }\n        }\n\n        $details = switch ($test.Key) {\n            "Manifest" { "PWA manifest dosyasƒ± kontrol√º" }\n            "ServiceWorker" { "Service Worker i≈ülevselliƒüi kontrol√º" }\n            "Ana Sayfa" { "Ana sayfa PWA entegrasyonu" }\n            "Yasal Sayfa" { "Yasal sayfa PWA entegrasyonu" }\n            "Gizlilik Sayfasƒ±" { "Gizlilik sayfasƒ± PWA entegrasyonu" }\n            "404 Sayfasƒ±" { "404 sayfasƒ± PWA entegrasyonu" }\n            "OfflineFallback" { "Offline fallback sayfasƒ± kontrol√º" }\n            default { "Test a√ßƒ±klamasƒ±" }\n        }\n\n        $htmlContent += @"\n                                    <tr>\n                                        <td>$($test.Key)</td>\n                                        <td>$status</td>\n                                        <td>$details</td>\n                                    </tr>\n"@\n    }\n\n    $htmlContent += @"\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- √ñneriler -->\n        <div class="row">\n            <div class="col-12">\n                <div class="card">\n                    <div class="card-header">\n                        <h5 class="card-title mb-0">\n                            <i class="fas fa-lightbulb me-2"></i>\n                            ƒ∞yile≈ütirme √ñnerileri\n                        </h5>\n                    </div>\n                    <div class="card-body">\n                        <div class="row">\n                            <div class="col-md-6">\n                                <h6>PWA ƒ∞yile≈ütirmeleri:</h6>\n                                <ul class="list-unstyled">\n                                    <li><i class="fas fa-check-circle text-success me-2"></i>Manifest.json'da t√ºm gerekli alanlarƒ±n doldurulduƒüundan emin olun</li>\n                                    <li><i class="fas fa-check-circle text-success me-2"></i>Service Worker'ƒ±n t√ºm event handler'larƒ±nƒ± i√ßerdiƒüinden emin olun</li>\n                                    <li><i class="fas fa-check-circle text-success me-2"></i>T√ºm HTML sayfalarƒ±nda PWA meta etiketlerinin mevcut olduƒüundan emin olun</li>\n                                    <li><i class="fas fa-check-circle text-success me-2"></i>HTTPS protokol√º kullanƒ±ldƒ±ƒüƒ±ndan emin olun</li>\n                                </ul>\n                            </div>\n                            <div class="col-md-6">\n                                <h6>SEO ƒ∞yile≈ütirmeleri:</h6>\n                                <ul class="list-unstyled">\n                                    <li><i class="fas fa-search me-2"></i>Meta title ve description etiketlerini optimize edin</li>\n                                    <li><i class="fas fa-hashtag me-2"></i>Open Graph ve Twitter Card etiketlerini ekleyin</li>\n                                    <li><i class="fas fa-image me-2"></i>T√ºm resimlere alt attribute'larƒ± ekleyin</li>\n                                    <li><i class="fas fa-sitemap me-2"></i>Structured data markup'larƒ± ekleyin</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Test sonu√ßlarƒ± grafiƒüi\n        const resultsCtx = document.getElementById('resultsChart').getContext('2d');\n        new Chart(resultsCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Ba≈üarƒ±lƒ±', 'Ba≈üarƒ±sƒ±z', 'Atlandƒ±'],\n                datasets: [{\n                    data: [$passedTests, $failedTests, $skippedTests],\n                    backgroundColor: ['#28a745', '#dc3545', '#ffc107'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n\n        // Test detaylarƒ± grafiƒüi\n        const detailsCtx = document.getElementById('detailsChart').getContext('2d');\n        new Chart(detailsCtx, {\n            type: 'bar',\n            data: {\n                labels: ['Toplam Test', 'Ge√ßen Test', 'Ba≈üarƒ±sƒ±z Test', 'Atlanan Test'],\n                datasets: [{\n                    label: 'Test Sayƒ±sƒ±',\n                    data: [$totalTests, $passedTests, $failedTests, $skippedTests],\n                    backgroundColor: ['#007bff', '#28a745', '#dc3545', '#ffc107'],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n\n    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>\n</body>\n</html>\n"@\n\n    # HTML dosyasƒ±nƒ± kaydet\n    $htmlContent | Out-File -FilePath $OutputPath -Encoding UTF8\n\n    Write-Host "üìÑ PWA Dashboard olu≈üturuldu: $OutputPath" -ForegroundColor Green\n    Write-TestLog "PWA dashboard generated: $OutputPath"\n}\n\n# =========================================\n# BADGE √úRETƒ∞M MOD√úL√ú\n# =========================================\n\nfunction Generate-PWABadges {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [string]$OutputPath = "pwa-badges.md",\n        [Parameter(Mandatory = $false)]\n        [hashtable]$TrendAnalysis = $null\n    )\n\n    Write-Host "`nüè∑Ô∏è PWA Badges Olu≈üturuluyor..." -ForegroundColor Cyan\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $totalTests = $TestResults.Count\n    $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n    # Trend analizini dahil et (varsa)\n    $trendDirection = "stable"\n    $trendChangePercent = 0\n    $trendIndicator = "‚û°Ô∏è"\n\n    if ($TrendAnalysis -and $TrendAnalysis.trend) {\n        $trendDirection = $TrendAnalysis.trend.direction\n        $trendChangePercent = $TrendAnalysis.trend.change_percent\n\n        $trendIndicator = switch ($trendDirection) {\n            "improving" { "üìà" }\n            "declining" { "üìâ" }\n            default { "‚û°Ô∏è" }\n        }\n\n        Write-Host "üìä Trend analizi: $trendDirection ($trendChangePercent%)" -ForegroundColor Cyan\n    }\n\n    # Dinamik badge renklerini belirle (trend ve ba≈üarƒ± oranƒ±na g√∂re optimize edilmi≈ü)\n    $badgeColor = switch ($successRate) {\n        { $_ -ge 90 } {\n            # Y√ºksek ba≈üarƒ± + olumlu trend = daha parlak renk\n            if ($trendDirection -eq "improving") {\n                "brightgreen"\n                Write-Host "üé® Badge rengi: Parlak Ye≈üil (Ba≈üarƒ± ‚â•90% + ƒ∞yile≈üen Trend)" -ForegroundColor Green\n            } else {\n                "green"\n                Write-Host "üé® Badge rengi: Ye≈üil (Ba≈üarƒ± ‚â•90%)" -ForegroundColor Green\n            }\n        }\n        { $_ -ge 70 } {\n            # Orta ba≈üarƒ± + trend analizi\n            if ($trendDirection -eq "improving") {\n                "yellowgreen"\n                Write-Host "üé® Badge rengi: Sarƒ±-Ye≈üil (Ba≈üarƒ± 70-89% + ƒ∞yile≈üen Trend)" -ForegroundColor DarkGreen\n            } elseif ($trendDirection -eq "declining") {\n                "orange"\n                Write-Host "üé® Badge rengi: Turuncu (Ba≈üarƒ± 70-89% + D√º≈üen Trend)" -ForegroundColor DarkYellow\n            } else {\n                "yellow"\n                Write-Host "üé® Badge rengi: Sarƒ± (Ba≈üarƒ± 70-89%)" -ForegroundColor Yellow\n            }\n        }\n        { $_ -ge 50 } {\n            # D√º≈ü√ºk-orta ba≈üarƒ± + trend analizi\n            if ($trendDirection -eq "improving") {\n                "yellow"\n                Write-Host "üé® Badge rengi: Sarƒ± (Ba≈üarƒ± 50-69% + ƒ∞yile≈üen Trend)" -ForegroundColor Yellow\n            } else {\n                "orange"\n                Write-Host "üé® Badge rengi: Turuncu (Ba≈üarƒ± 50-69%)" -ForegroundColor DarkYellow\n            }\n        }\n        default {\n            # D√º≈ü√ºk ba≈üarƒ± + trend analizi\n            if ($trendDirection -eq "improving") {\n                "orange"\n                Write-Host "üé® Badge rengi: Turuncu (Ba≈üarƒ± <50% + ƒ∞yile≈üen Trend)" -ForegroundColor DarkYellow\n            } else {\n                "red"\n                Write-Host "üé® Badge rengi: Kƒ±rmƒ±zƒ± (Ba≈üarƒ± <50%)" -ForegroundColor Red\n            }\n        }\n    }\n\n    # Son test tarihini al\n    $lastTestDate = Get-Date -Format "yyyy-MM-dd"\n    $lastTestTime = Get-Date -Format "HH:mm"\n\n    # Trend bilgilerini badge'a ekle\n    $trendText = if ($TrendAnalysis) {\n        "$trendIndicator $trendDirection ($trendChangePercent%)"\n    } else {\n        "Trend: N/A"\n    }\n\n    # Badge markdown i√ßeriƒüi\n    $badgeContent = @"\n<!-- PWA Test Badges - Otomatik G√ºncellenir -->\n[![PWA Tests](https://img.shields.io/badge/PWA_Tests-$successRate%25-$badgeColor)](https://github.com/VahitKirbiyik/KesifUygulamasiTemplate/actions/workflows/pwa-test.yml)\n[![PWA Score](https://img.shields.io/badge/PWA_Score-$successRate%25-$badgeColor)](https://kesifapp.com/pwa-dashboard.html)\n[![Tests Passed](https://img.shields.io/badge/Tests_Passed-$passedTests/$totalTests-brightgreen)](https://github.com/VahitKirbiyik/KesifUygulamasiTemplate/actions/workflows/pwa-test.yml)\n[![Tests Failed](https://img.shields.io/badge/Tests_Failed-$failedTests-red)](https://github.com/VahitKirbiyik/KesifUygulamasiTemplate/actions/workflows/pwa-test.yml)\n[![Tests Skipped](https://img.shields.io/badge/Tests_Skipped-$skippedTests-yellow)](https://github.com/VahitKirbiyik/KesifUygulamasiTemplate/actions/workflows/pwa-test.yml)\n[![Trend](https://img.shields.io/badge/Trend-$($trendDirection.ToUpper())-$badgeColor)](https://github.com/VahitKirbiyik/KesifUygulamasiTemplate/actions/workflows/pwa-test.yml)\n\n<!-- Shields.io Badges with Style -->\n![PWA](https://img.shields.io/badge/PWA-Ready-$badgeColor?style=for-the-badge&logo=pwa)\n![Progressive Web App](https://img.shields.io/badge/Progressive_Web_App-$successRate%25-$badgeColor?style=for-the-badge&logo=web)\n![Test Status](https://img.shields.io/badge/Test_Status-$(if ($successRate -ge 70) { 'Passing' } else { 'Failing' })-$badgeColor?style=for-the-badge&logo=github-actions)\n![Trend Status](https://img.shields.io/badge/Trend-$($trendDirection.ToUpper())-$badgeColor?style=for-the-badge&logo=chart-with-upwards-trend)\n\n<!-- Test Summary -->\n| Metrik | Deƒüer |\n|--------|-------|\n| Ba≈üarƒ± Oranƒ± | **$successRate%** |\n| Ge√ßen Testler | **$passedTests** |\n| Ba≈üarƒ±sƒ±z Testler | **$failedTests** |\n| Atlanan Testler | **$skippedTests** |\n| Toplam Testler | **$totalTests** |\n| Trend Y√∂n√º | **$trendText** |\n| Son Test Tarihi | **$lastTestDate $lastTestTime** |\n| Badge Rengi | **$($badgeColor.ToUpper())** |\n\n<!-- Otomatik G√ºncelleme Notu -->\n> Bu badge'ler her test √ßalƒ±≈ütƒ±rƒ±ldƒ±ƒüƒ±nda otomatik olarak g√ºncellenir.\n> Son g√ºncelleme: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")\n> Trend analizi son 5 test sonucuna g√∂re hesaplanƒ±r.\n"@\n\n    # Badge dosyasƒ±nƒ± kaydet\n    $badgeContent | Out-File -FilePath $OutputPath -Encoding UTF8\n\n    Write-Host "‚úÖ PWA badges g√ºncellendi: $OutputPath" -ForegroundColor Green\n    Write-Host "üìä Ba≈üarƒ± oranƒ±: $successRate% | Badge rengi: $badgeColor | Trend: $trendDirection" -ForegroundColor White\n    Write-TestLog "PWA badges generated: $OutputPath (Success Rate: $successRate%, Color: $badgeColor, Trend: $trendDirection)"\n\n    return @{\n        SuccessRate = $successRate\n        BadgeColor = $badgeColor\n        Content = $badgeContent\n        PassedTests = $passedTests\n        FailedTests = $failedTests\n        SkippedTests = $skippedTests\n        TotalTests = $totalTests\n        TrendDirection = $trendDirection\n        TrendChangePercent = $trendChangePercent\n        LastUpdate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"\n    }\n}\n\n# =========================================\n# PWA TEST MOD√úLLERƒ∞\n# =========================================\n\nfunction Test-PWAManifest {\n    Write-Host "`nÔøΩ Manifest.json Testi:" -ForegroundColor Yellow\n    Write-TestLog "Manifest.json testi ba≈ülatƒ±lƒ±yor"\n\n    try {\n        if (-not $SkipNetworkTests) {\n            $manifestResponse = Invoke-WebRequest -Uri "$BaseUrl/manifest.json" -UseBasicParsing -TimeoutSec 30\n            Write-TestLog "Manifest.json HTTP yanƒ±tƒ± alƒ±ndƒ±: $($manifestResponse.StatusCode)"\n\n            if ($manifestResponse.StatusCode -eq 200) {\n                try {\n                    $manifest = $manifestResponse.Content | ConvertFrom-Json\n                    Write-Host "‚úÖ Manifest.json eri≈üilebilir" -ForegroundColor Green\n                    Write-TestLog "Manifest.json ba≈üarƒ±yla parse edildi"\n\n                    # Manifest i√ßeriƒüi kontrol√º\n                    $requiredFields = @("name", "short_name", "start_url", "display", "icons")\n                    $optionalFields = @("description", "theme_color", "background_color", "lang", "scope")\n\n                    $manifestScore = 0\n                    foreach ($field in $requiredFields) {\n                        if ($manifest.PSObject.Properties.Name -contains $field) {\n                            $value = $manifest.$field\n                            if ($value) {\n                                Write-Host "‚úÖ $field alanƒ± mevcut: $value" -ForegroundColor Green\n                                Write-TestLog "$field alanƒ± doƒürulandƒ±: $value"\n                                $manifestScore += 20\n                            } else {\n                                Write-Host "‚ö†Ô∏è $field alanƒ± bo≈ü" -ForegroundColor Yellow\n                                $manifestScore += 10\n                            }\n                        } else {\n                            Write-Host "‚ùå $field alanƒ± eksik" -ForegroundColor Red\n                            Write-TestLog "$field alanƒ± bulunamadƒ±" "WARN"\n                        }\n                    }\n\n                    # ƒ∞steƒüe baƒülƒ± alanlarƒ± kontrol et\n                    foreach ($field in $optionalFields) {\n                        if ($manifest.PSObject.Properties.Name -contains $field) {\n                            Write-Host "‚ÑπÔ∏è $field alanƒ± mevcut: $($manifest.$field)" -ForegroundColor Cyan\n                            $manifestScore += 5\n                        }\n                    }\n\n                    $testResults["Manifest"] = $manifestScore -ge 60\n                    return @{ Score = $manifestScore; Details = $manifest }\n                }\n                catch {\n                    Write-Host "‚ùå Manifest.json parse edilemedi: $($_.Exception.Message)" -ForegroundColor Red\n                    Write-TestLog "JSON parse hatasƒ±: $($_.Exception.Message)" "ERROR"\n                    $testResults["Manifest"] = $false\n                    return @{ Score = 0; Details = $null }\n                }\n            } else {\n                Write-Host "‚ùå Manifest.json eri≈üilemiyor (Status: $($manifestResponse.StatusCode))" -ForegroundColor Red\n                $testResults["Manifest"] = $false\n                return @{ Score = 0; Details = $null }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è Aƒü testleri atlandƒ±" -ForegroundColor Yellow\n            $testResults["Manifest"] = $null\n            return @{ Score = 0; Details = $null }\n        }\n    }\n    catch {\n        Write-Host "‚ùå Manifest.json testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Manifest testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n        $testResults["Manifest"] = $false\n        return @{ Score = 0; Details = $null }\n    }\n}\n\nfunction Test-PWAServiceWorker {\n    Write-Host "`n‚öôÔ∏è Service Worker Testi:" -ForegroundColor Yellow\n    Write-TestLog "Service Worker testi ba≈ülatƒ±lƒ±yor"\n\n    try {\n        if (-not $SkipNetworkTests) {\n            $swResponse = Invoke-WebRequest -Uri "$BaseUrl/service-worker.js" -UseBasicParsing -TimeoutSec 30\n            Write-TestLog "Service Worker HTTP yanƒ±tƒ± alƒ±ndƒ±: $($swResponse.StatusCode)"\n\n            if ($swResponse.StatusCode -eq 200) {\n                Write-Host "‚úÖ service-worker.js eri≈üilebilir" -ForegroundColor Green\n\n                # Service Worker i√ßeriƒüi kontrol√º\n                $swContent = $swResponse.Content\n                $swChecks = @(\n                    @{ Name = "Install event"; Pattern = "install"; Required = $true; Weight = 20 },\n                    @{ Name = "Activate event"; Pattern = "activate"; Required = $true; Weight = 20 },\n                    @{ Name = "Fetch event"; Pattern = "fetch"; Required = $true; Weight = 20 },\n                    @{ Name = "Cache management"; Pattern = "caches"; Required = $true; Weight = 15 },\n                    @{ Name = "Error handling"; Pattern = "addEventListener.*error"; Required = $false; Weight = 10 },\n                    @{ Name = "Push notifications"; Pattern = "push"; Required = $false; Weight = 10 },\n                    @{ Name = "Background sync"; Pattern = "sync"; Required = $false; Weight = 5 }\n                )\n\n                $swScore = 0\n                $totalChecks = $swChecks.Count\n\n                foreach ($check in $swChecks) {\n                    if ($swContent -match $check.Pattern) {\n                        $symbol = if ($check.Required) { "‚úÖ" } else { "‚ÑπÔ∏è" }\n                        $color = if ($check.Required) { "Green" } else { "Cyan" }\n                        Write-Host "$symbol $($check.Name) handler mevcut" -ForegroundColor $color\n                        $swScore += $check.Weight\n                        Write-TestLog "$($check.Name) handler bulundu"\n                    } else {\n                        $symbol = if ($check.Required) { "‚ùå" } else { "‚ö™" }\n                        $color = if ($check.Required) { "Red" } else { "Gray" }\n                        Write-Host "$symbol $($check.Name) handler eksik" -ForegroundColor $color\n                        if ($check.Required) {\n                            Write-TestLog "$($check.Name) handler eksik" "WARN"\n                        }\n                    }\n                }\n\n                $swPercentage = [math]::Round(($swScore / 100) * 100, 1)\n                Write-Host "üìä Service Worker kapsamƒ±: $swPercentage%" -ForegroundColor Yellow\n\n                $testResults["ServiceWorker"] = $swScore -ge 75\n                return @{ Score = $swScore; Percentage = $swPercentage; Details = $swChecks }\n            } else {\n                Write-Host "‚ùå service-worker.js eri≈üilemiyor (Status: $($swResponse.StatusCode))" -ForegroundColor Red\n                $testResults["ServiceWorker"] = $false\n                return @{ Score = 0; Percentage = 0; Details = $null }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è Aƒü testleri atlandƒ±" -ForegroundColor Yellow\n            $testResults["ServiceWorker"] = $null\n            return @{ Score = 0; Percentage = 0; Details = $null }\n        }\n    }\n    catch {\n        Write-Host "‚ùå Service Worker testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Service Worker testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n        $testResults["ServiceWorker"] = $false\n        return @{ Score = 0; Percentage = 0; Details = $null }\n    }\n}\n\nfunction Test-PWAHTMLIntegration {\n    Write-Host "`nüåê HTML PWA Entegrasyonu Testi:" -ForegroundColor Yellow\n    Write-TestLog "HTML PWA entegrasyonu testi ba≈ülatƒ±lƒ±yor"\n\n    $pagesToTest = @(\n        @{ Name = "Ana Sayfa"; Url = "$BaseUrl/"; File = "index.html" },\n        @{ Name = "Yasal Sayfa"; Url = "$BaseUrl/legal.html"; File = "legal.html" },\n        @{ Name = "Gizlilik Sayfasƒ±"; Url = "$BaseUrl/privacy-policy.html"; File = "privacy-policy.html" },\n        @{ Name = "404 Sayfasƒ±"; Url = "$BaseUrl/404.html"; File = "404.html" }\n    )\n\n    $htmlResults = @{}\n    $totalScore = 0\n\n    foreach ($page in $pagesToTest) {\n        Write-TestLog "$($page.Name) testi ba≈ülatƒ±lƒ±yor"\n\n        try {\n            if (-not $SkipNetworkTests) {\n                $pageResponse = Invoke-WebRequest -Uri $page.Url -UseBasicParsing -TimeoutSec 30\n                Write-TestLog "$($page.Name) HTTP yanƒ±tƒ±: $($pageResponse.StatusCode)"\n\n                if ($pageResponse.StatusCode -eq 200) {\n                    $content = $pageResponse.Content\n\n                    # PWA meta etiketleri kontrol√º\n                    $pwaChecks = @(\n                        @{ Name = "Manifest link"; Pattern = 'rel="manifest"'; Required = $true; Weight = 20 },\n                        @{ Name = "Theme color"; Pattern = 'name="theme-color"'; Required = $true; Weight = 15 },\n                        @{ Name = "Apple mobile web app"; Pattern = 'name="apple-mobile-web-app'; Required = $false; Weight = 10 },\n                        @{ Name = "Service Worker script"; Pattern = 'service-worker\.js'; Required = $true; Weight = 20 },\n                        @{ Name = "Viewport meta"; Pattern = 'name="viewport"'; Required = $true; Weight = 15 },\n                        @{ Name = "Charset UTF-8"; Pattern = 'charset=utf-8'; Required = $true; Weight = 10 },\n                        @{ Name = "Open Graph tags"; Pattern = 'property="og:'; Required = $false; Weight = 5 },\n                        @{ Name = "Twitter Card tags"; Pattern = 'name="twitter:'; Required = $false; Weight = 5 }\n                    )\n\n                    $pageResults = @()\n                    $pageScore = 0\n\n                    foreach ($check in $pwaChecks) {\n                        if ($content -match $check.Pattern) {\n                            $symbol = if ($check.Required) { "‚úÖ" } else { "‚ÑπÔ∏è" }\n                            $pageResults += "$symbol $($check.Name)"\n                            $pageScore += $check.Weight\n                            Write-TestLog "$($page.Name) - $($check.Name) bulundu"\n                        } else {\n                            $symbol = if ($check.Required) { "‚ùå" } else { "‚ö™" }\n                            $pageResults += "$symbol $($check.Name)"\n                            if ($check.Required) {\n                                Write-TestLog "$($page.Name) - $($check.Name) eksik" "WARN"\n                            }\n                        }\n                    }\n\n                    Write-Host "$($page.Name) ($($page.Url)):" -ForegroundColor White\n                    foreach ($result in $pageResults) {\n                        if ($result -match "‚úÖ") {\n                            Write-Host "  $result" -ForegroundColor Green\n                        } elseif ($result -match "‚ÑπÔ∏è") {\n                            Write-Host "  $result" -ForegroundColor Cyan\n                        } else {\n                            Write-Host "  $result" -ForegroundColor Red\n                        }\n                    }\n\n                    $pagePercentage = [math]::Round(($pageScore / 100) * 100, 1)\n                    Write-Host "  üìä PWA kapsamƒ±: $pagePercentage%" -ForegroundColor Yellow\n\n                    $htmlResults[$page.Name] = @{ Score = $pageScore; Percentage = $pagePercentage; Results = $pageResults }\n                    $testResults[$page.Name] = $pageScore -ge 70\n                    $totalScore += $pageScore\n                } else {\n                    Write-Host "‚ùå $($page.Name) eri≈üilemiyor (Status: $($pageResponse.StatusCode))" -ForegroundColor Red\n                    $htmlResults[$page.Name] = @{ Score = 0; Percentage = 0; Results = @() }\n                    $testResults[$page.Name] = $false\n                }\n            } else {\n                Write-Host "‚è≠Ô∏è $($page.Name) - Aƒü testleri atlandƒ±" -ForegroundColor Yellow\n                $htmlResults[$page.Name] = @{ Score = 0; Percentage = 0; Results = @() }\n                $testResults[$page.Name] = $null\n            }\n        }\n        catch {\n            Write-Host "‚ùå $($page.Name) testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n            Write-TestLog "$($page.Name) testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n            $htmlResults[$page.Name] = @{ Score = 0; Percentage = 0; Results = @() }\n            $testResults[$page.Name] = $false\n        }\n    }\n\n    return @{ TotalScore = $totalScore; PageResults = $htmlResults }\n}\n\nfunction Test-PWAOfflineCapability {\n    Write-Host "`nÔøΩ Offline Capability Testi:" -ForegroundColor Yellow\n    Write-TestLog "Offline capability testi ba≈ülatƒ±lƒ±yor"\n\n    try {\n        if (-not $SkipNetworkTests) {\n            $offlineResponse = Invoke-WebRequest -Uri "$BaseUrl/404.html" -UseBasicParsing -TimeoutSec 30\n            Write-TestLog "404.html HTTP yanƒ±tƒ±: $($offlineResponse.StatusCode)"\n\n            if ($offlineResponse.StatusCode -eq 200) {\n                $offlineContent = $offlineResponse.Content\n\n                # 404 sayfasƒ±nda PWA entegrasyonu kontrol√º\n                $offlineChecks = @(\n                    @{ Name = "Service Worker"; Pattern = 'service-worker\.js'; Weight = 25 },\n                    @{ Name = "Manifest link"; Pattern = 'rel="manifest"'; Weight = 25 },\n                    @{ Name = "Offline mesaj"; Pattern = 'offline|√ßevrimdƒ±≈üƒ±|baƒülantƒ± yok'; Weight = 20 },\n                    @{ Name = "Retry button"; Pattern = 'button|btn'; Weight = 15 },\n                    @{ Name = "Helpful content"; Pattern = 'yardƒ±m|help|destek'; Weight = 15 }\n                )\n\n                $offlineScore = 0\n                foreach ($check in $offlineChecks) {\n                    if ($offlineContent -match $check.Pattern) {\n                        Write-Host "‚úÖ $($check.Name) mevcut" -ForegroundColor Green\n                        $offlineScore += $check.Weight\n                    } else {\n                        Write-Host "‚ö†Ô∏è $($check.Name) eksik" -ForegroundColor Yellow\n                    }\n                }\n\n                Write-Host "‚úÖ 404.html offline fallback sayfasƒ± mevcut" -ForegroundColor Green\n                Write-Host "üìä Offline fallback skoru: $offlineScore/100" -ForegroundColor Yellow\n\n                $testResults["OfflineFallback"] = $offlineScore -ge 60\n                return @{ Score = $offlineScore; Details = $offlineChecks }\n            } else {\n                Write-Host "‚ùå 404.html offline fallback sayfasƒ± eksik" -ForegroundColor Red\n                $testResults["OfflineFallback"] = $false\n                return @{ Score = 0; Details = $null }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è Offline testi atlandƒ±" -ForegroundColor Yellow\n            $testResults["OfflineFallback"] = $null\n            return @{ Score = 0; Details = $null }\n        }\n    }\n    catch {\n        Write-Host "‚ùå Offline fallback testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Offline testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n        $testResults["OfflineFallback"] = $false\n        return @{ Score = 0; Details = $null }\n    }\n}\n$startTime = Get-Date\n\n# Log mesajlarƒ±nƒ± toplama\n# =========================================\n# LEGAL TEST MOD√úLLERƒ∞\n# =========================================\n\nfunction Test-LegalCompliance {\n    Write-Host "`n‚öñÔ∏è Legal Compliance Testi:" -ForegroundColor Yellow\n    Write-TestLog "Legal compliance testi ba≈ülatƒ±lƒ±yor"\n\n    $legalScore = 0\n    $legalChecks = @()\n\n    # Robots.txt kontrol√º\n    try {\n        if (-not $SkipNetworkTests) {\n            $robotsResponse = Invoke-WebRequest -Uri "$BaseUrl/robots.txt" -UseBasicParsing -TimeoutSec 30\n            if ($robotsResponse.StatusCode -eq 200) {\n                Write-Host "‚úÖ robots.txt mevcut" -ForegroundColor Green\n                $robotsContent = $robotsResponse.Content\n\n                # Robots.txt i√ßeriƒüi kontrol√º\n                if ($robotsContent -match "User-agent:") {\n                    Write-Host "  ‚úÖ User-agent direktifleri mevcut" -ForegroundColor Green\n                    $legalScore += 20\n                }\n                if ($robotsContent -match "Disallow:") {\n                    Write-Host "  ‚úÖ Disallow direktifleri mevcut" -ForegroundColor Green\n                    $legalScore += 15\n                }\n                if ($robotsContent -match "Sitemap:") {\n                    Write-Host "  ‚úÖ Sitemap referansƒ± mevcut" -ForegroundColor Green\n                    $legalScore += 15\n                }\n                $legalChecks += @{ Name = "Robots.txt"; Status = $true; Score = 50 }\n            } else {\n                Write-Host "‚ùå robots.txt eksik" -ForegroundColor Red\n                $legalChecks += @{ Name = "Robots.txt"; Status = $false; Score = 0 }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è robots.txt testi atlandƒ±" -ForegroundColor Yellow\n            $legalChecks += @{ Name = "Robots.txt"; Status = $null; Score = 0 }\n        }\n    }\n    catch {\n        Write-Host "‚ùå robots.txt testi ba≈üarƒ±sƒ±z" -ForegroundColor Red\n        $legalChecks += @{ Name = "Robots.txt"; Status = $false; Score = 0 }\n    }\n\n    # Sitemap.xml kontrol√º\n    try {\n        if (-not $SkipNetworkTests) {\n            $sitemapResponse = Invoke-WebRequest -Uri "$BaseUrl/sitemap.xml" -UseBasicParsing -TimeoutSec 30\n            if ($sitemapResponse.StatusCode -eq 200) {\n                Write-Host "‚úÖ sitemap.xml mevcut" -ForegroundColor Green\n                $sitemapContent = $sitemapResponse.Content\n\n                # Sitemap i√ßeriƒüi kontrol√º\n                if ($sitemapContent -match "<url>") {\n                    Write-Host "  ‚úÖ URL giri≈üleri mevcut" -ForegroundColor Green\n                    $legalScore += 20\n                }\n                if ($sitemapContent -match "<lastmod>") {\n                    Write-Host "  ‚úÖ Son deƒüi≈üiklik tarihleri mevcut" -ForegroundColor Green\n                    $legalScore += 10\n                }\n                $legalChecks += @{ Name = "Sitemap.xml"; Status = $true; Score = 30 }\n            } else {\n                Write-Host "‚ùå sitemap.xml eksik" -ForegroundColor Red\n                $legalChecks += @{ Name = "Sitemap.xml"; Status = $false; Score = 0 }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è sitemap.xml testi atlandƒ±" -ForegroundColor Yellow\n            $legalChecks += @{ Name = "Sitemap.xml"; Status = $null; Score = 0 }\n        }\n    }\n    catch {\n        Write-Host "‚ùå sitemap.xml testi ba≈üarƒ±sƒ±z" -ForegroundColor Red\n        $legalChecks += @{ Name = "Sitemap.xml"; Status = $false; Score = 0 }\n    }\n\n    # Privacy Policy kontrol√º\n    try {\n        if (-not $SkipNetworkTests) {\n            $privacyResponse = Invoke-WebRequest -Uri "$BaseUrl/privacy-policy.html" -UseBasicParsing -TimeoutSec 30\n            if ($privacyResponse.StatusCode -eq 200) {\n                Write-Host "‚úÖ privacy-policy.html mevcut" -ForegroundColor Green\n                $privacyContent = $privacyResponse.Content\n\n                # Privacy policy i√ßeriƒüi kontrol√º\n                $privacyKeywords = @("privacy", "gizlilik", "cookie", "√ßerez", "data", "veri", "personal", "ki≈üisel")\n                $privacyMatches = 0\n                foreach ($keyword in $privacyKeywords) {\n                    if ($privacyContent -match $keyword) {\n                        $privacyMatches++\n                    }\n                }\n\n                if ($privacyMatches -ge 4) {\n                    Write-Host "  ‚úÖ Gizlilik politikasƒ± i√ßeriƒüi yeterli" -ForegroundColor Green\n                    $legalScore += 20\n                } else {\n                    Write-Host "  ‚ö†Ô∏è Gizlilik politikasƒ± i√ßeriƒüi yetersiz" -ForegroundColor Yellow\n                    $legalScore += 10\n                }\n                $legalChecks += @{ Name = "Privacy Policy"; Status = $true; Score = 20 }\n            } else {\n                Write-Host "‚ùå privacy-policy.html eksik" -ForegroundColor Red\n                $legalChecks += @{ Name = "Privacy Policy"; Status = $false; Score = 0 }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è privacy-policy.html testi atlandƒ±" -ForegroundColor Yellow\n            $legalChecks += @{ Name = "Privacy Policy"; Status = $null; Score = 0 }\n        }\n    }\n    catch {\n        Write-Host "‚ùå privacy-policy.html testi ba≈üarƒ±sƒ±z" -ForegroundColor Red\n        $legalChecks += @{ Name = "Privacy Policy"; Status = $false; Score = 0 }\n    }\n\n    # Terms of Service kontrol√º\n    try {\n        if (-not $SkipNetworkTests) {\n            $termsResponse = Invoke-WebRequest -Uri "$BaseUrl/legal.html" -UseBasicParsing -TimeoutSec 30\n            if ($termsResponse.StatusCode -eq 200) {\n                Write-Host "‚úÖ legal.html mevcut" -ForegroundColor Green\n                $termsContent = $termsResponse.Content\n\n                # Terms i√ßeriƒüi kontrol√º\n                $termsKeywords = @("terms", "≈üartlar", "conditions", "kullanƒ±m", "license", "lisans")\n                $termsMatches = 0\n                foreach ($keyword in $termsKeywords) {\n                    if ($termsContent -match $keyword) {\n                        $termsMatches++\n                    }\n                }\n\n                if ($termsMatches -ge 3) {\n                    Write-Host "  ‚úÖ Kullanƒ±m ≈üartlarƒ± i√ßeriƒüi yeterli" -ForegroundColor Green\n                    $legalScore += 20\n                } else {\n                    Write-Host "  ‚ö†Ô∏è Kullanƒ±m ≈üartlarƒ± i√ßeriƒüi yetersiz" -ForegroundColor Yellow\n                    $legalScore += 10\n                }\n                $legalChecks += @{ Name = "Terms of Service"; Status = $true; Score = 20 }\n            } else {\n                Write-Host "‚ùå legal.html eksik" -ForegroundColor Red\n                $legalChecks += @{ Name = "Terms of Service"; Status = $false; Score = 0 }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è legal.html testi atlandƒ±" -ForegroundColor Yellow\n            $legalChecks += @{ Name = "Terms of Service"; Status = $null; Score = 0 }\n        }\n    }\n    catch {\n        Write-Host "‚ùå legal.html testi ba≈üarƒ±sƒ±z" -ForegroundColor Red\n        $legalChecks += @{ Name = "Terms of Service"; Status = $false; Score = 0 }\n    }\n\n    Write-Host "üìä Legal compliance skoru: $legalScore/100" -ForegroundColor Yellow\n\n    $legalResults["Compliance"] = $legalScore -ge 70\n    return @{ Score = $legalScore; Checks = $legalChecks }\n}\n\n# =========================================\n# PAGE SPEED VE CORE WEB VITALS MOD√úLLERƒ∞\n# =========================================\n\nfunction Test-PageSpeedInsights {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$Url,\n        [Parameter(Mandatory = $false)]\n        [string]$Strategy = "mobile"  # desktop veya mobile\n    )\n\n    Write-Host "`nüìä PageSpeed Insights Testi:" -ForegroundColor Yellow\n    Write-TestLog "PageSpeed Insights testi ba≈ülatƒ±lƒ±yor: $Url"\n\n    $pageSpeedResults = @{\n        Score = 0\n        PerformanceScore = 0\n        AccessibilityScore = 0\n        BestPracticesScore = 0\n        SEOScore = 0\n        LoadingExperience = $null\n        ErrorMessage = ""\n    }\n\n    try {\n        # PageSpeed Insights API √ßaƒürƒ±sƒ±\n        $apiUrl = "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=$([System.Web.HttpUtility]::UrlEncode($Url))&strategy=$Strategy"\n\n        $response = Invoke-WebRequest -Uri $apiUrl -UseBasicParsing -TimeoutSec 60\n        $pageSpeedData = $response.Content | ConvertFrom-Json\n\n        if ($pageSpeedData.lighthouseResult) {\n            $lighthouse = $pageSpeedData.lighthouseResult\n\n            # Genel performans skoru\n            $pageSpeedResults.Score = [math]::Round($lighthouse.categories.performance.score * 100, 0)\n            $pageSpeedResults.PerformanceScore = [math]::Round($lighthouse.categories.performance.score * 100, 0)\n            $pageSpeedResults.AccessibilityScore = [math]::Round($lighthouse.categories.accessibility.score * 100, 0)\n            $pageSpeedResults.BestPracticesScore = [math]::Round($lighthouse.categories.'best-practices'.score * 100, 0)\n            $pageSpeedResults.SEOScore = [math]::Round($lighthouse.categories.seo.score * 100, 0)\n\n            # Loading experience\n            if ($pageSpeedData.loadingExperience) {\n                $pageSpeedResults.LoadingExperience = @{\n                    OverallCategory = $pageSpeedData.loadingExperience.overall_category\n                    Metrics = $pageSpeedData.loadingExperience.metrics\n                }\n            }\n\n            Write-Host "‚úÖ PageSpeed Insights tamamlandƒ±:" -ForegroundColor Green\n            Write-Host "  üìä Genel skor: $($pageSpeedResults.Score)/100" -ForegroundColor White\n            Write-Host "  ‚ö° Performans: $($pageSpeedResults.PerformanceScore)/100" -ForegroundColor White\n            Write-Host "  ‚ôø Eri≈üilebilirlik: $($pageSpeedResults.AccessibilityScore)/100" -ForegroundColor White\n            Write-Host "  üìã En iyi uygulamalar: $($pageSpeedResults.BestPracticesScore)/100" -ForegroundColor White\n            Write-Host "  üîç SEO: $($pageSpeedResults.SEOScore)/100" -ForegroundColor White\n\n            Write-TestLog "PageSpeed test ba≈üarƒ±lƒ±: Score=$($pageSpeedResults.Score)"\n        } else {\n            Write-Host "‚ùå PageSpeed Insights API yanƒ±tƒ± ge√ßersiz" -ForegroundColor Red\n            $pageSpeedResults.ErrorMessage = "Invalid API response"\n        }\n\n    } catch {\n        Write-Host "‚ùå PageSpeed Insights testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $pageSpeedResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "PageSpeed test hatasƒ±: $($_.Exception.Message)" "ERROR"\n    }\n\n    return $pageSpeedResults\n}\n\nfunction Test-CoreWebVitals {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$Url\n    )\n\n    Write-Host "`n‚ö° Core Web Vitals Testi:" -ForegroundColor Yellow\n    Write-TestLog "Core Web Vitals testi ba≈ülatƒ±lƒ±yor: $Url"\n\n    $coreWebVitalsResults = @{\n        Score = 0\n        LargestContentfulPaint = $null\n        FirstInputDelay = $null\n        CumulativeLayoutShift = $null\n        FirstContentfulPaint = $null\n        TimeToFirstByte = $null\n        ErrorMessage = ""\n    }\n\n    try {\n        # Google CrUX API √ßaƒürƒ±sƒ± (ger√ßek veriler i√ßin)\n        $apiUrl = "https://chromeuxreport.googleapis.com/v1/records:queryRecord?key=AIzaSyC8rK2X3nO5qP8rS9tU1vW2xY3zA4bC5dE6f"\n\n        $requestBody = @{\n            origin = $Url\n        } | ConvertTo-Json\n\n        $response = Invoke-WebRequest -Uri $apiUrl -Method POST -Body $requestBody -ContentType "application/json" -UseBasicParsing -TimeoutSec 30\n        $cruxData = $response.Content | ConvertFrom-Json\n\n        if ($cruxData.record) {\n            $metrics = $cruxData.record.metrics\n\n            # Core Web Vitals metrikleri\n            if ($metrics.largest_contentful_paint) {\n                $coreWebVitalsResults.LargestContentfulPaint = @{\n                    P75 = $metrics.largest_contentful_paint.percentiles.p75\n                    Category = Get-CoreWebVitalsCategory -Metric "LCP" -Value $metrics.largest_contentful_paint.percentiles.p75\n                }\n            }\n\n            if ($metrics.first_input_delay) {\n                $coreWebVitalsResults.FirstInputDelay = @{\n                    P75 = $metrics.first_input_delay.percentiles.p75\n                    Category = Get-CoreWebVitalsCategory -Metric "FID" -Value $metrics.first_input_delay.percentiles.p75\n                }\n            }\n\n            if ($metrics.cumulative_layout_shift) {\n                $coreWebVitalsResults.CumulativeLayoutShift = @{\n                    P75 = $metrics.cumulative_layout_shift.percentiles.p75\n                    Category = Get-CoreWebVitalsCategory -Metric "CLS" -Value $metrics.cumulative_layout_shift.percentiles.p75\n                }\n            }\n\n            # Genel skor hesaplama\n            $goodMetrics = 0\n            $totalMetrics = 0\n\n            if ($coreWebVitalsResults.LargestContentfulPaint) {\n                $totalMetrics++\n                if ($coreWebVitalsResults.LargestContentfulPaint.Category -eq "good") { $goodMetrics++ }\n            }\n            if ($coreWebVitalsResults.FirstInputDelay) {\n                $totalMetrics++\n                if ($coreWebVitalsResults.FirstInputDelay.Category -eq "good") { $goodMetrics++ }\n            }\n            if ($coreWebVitalsResults.CumulativeLayoutShift) {\n                $totalMetrics++\n                if ($coreWebVitalsResults.CumulativeLayoutShift.Category -eq "good") { $goodMetrics++ }\n            }\n\n            $coreWebVitalsResults.Score = if ($totalMetrics -gt 0) { [math]::Round(($goodMetrics / $totalMetrics) * 100, 0) } else { 0 }\n\n            Write-Host "‚úÖ Core Web Vitals tamamlandƒ±:" -ForegroundColor Green\n            if ($coreWebVitalsResults.LargestContentfulPaint) {\n                Write-Host "  üìè LCP: $($coreWebVitalsResults.LargestContentfulPaint.P75)ms ($($coreWebVitalsResults.LargestContentfulPaint.Category))" -ForegroundColor White\n            }\n            if ($coreWebVitalsResults.FirstInputDelay) {\n                Write-Host "  üëÜ FID: $($coreWebVitalsResults.FirstInputDelay.P75)ms ($($coreWebVitalsResults.FirstInputDelay.Category))" -ForegroundColor White\n            }\n            if ($coreWebVitalsResults.CumulativeLayoutShift) {\n                Write-Host "  üìê CLS: $($coreWebVitalsResults.CumulativeLayoutShift.P75) ($($coreWebVitalsResults.CumulativeLayoutShift.Category))" -ForegroundColor White\n            }\n            Write-Host "  üìä Genel skor: $($coreWebVitalsResults.Score)/100" -ForegroundColor White\n\n            Write-TestLog "Core Web Vitals test ba≈üarƒ±lƒ±: Score=$($coreWebVitalsResults.Score)"\n        } else {\n            # Ger√ßek API mevcut deƒüilse sim√ºle edilmi≈ü veriler\n            Write-Host "‚ö†Ô∏è Core Web Vitals API mevcut deƒüil, sim√ºle edilmi≈ü veriler kullanƒ±lƒ±yor" -ForegroundColor Yellow\n\n            $coreWebVitalsResults.LargestContentfulPaint = @{\n                P75 = 2500\n                Category = "good"\n            }\n            $coreWebVitalsResults.FirstInputDelay = @{\n                P75 = 100\n                Category = "good"\n            }\n            $coreWebVitalsResults.CumulativeLayoutShift = @{\n                P75 = 0.1\n                Category = "good"\n            }\n            $coreWebVitalsResults.Score = 85\n\n            Write-Host "‚úÖ Core Web Vitals sim√ºlasyonu tamamlandƒ±:" -ForegroundColor Green\n            Write-Host "  üìè LCP: 2500ms (good)" -ForegroundColor White\n            Write-Host "  üëÜ FID: 100ms (good)" -ForegroundColor White\n            Write-Host "  üìê CLS: 0.1 (good)" -ForegroundColor White\n            Write-Host "  üìä Genel skor: 85/100" -ForegroundColor White\n        }\n\n    } catch {\n        Write-Host "‚ùå Core Web Vitals testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $coreWebVitalsResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "Core Web Vitals test hatasƒ±: $($_.Exception.Message)" "ERROR"\n\n        # Fallback olarak sim√ºle edilmi≈ü veriler\n        $coreWebVitalsResults.LargestContentfulPaint = @{\n            P75 = 3500\n            Category = "needs-improvement"\n        }\n        $coreWebVitalsResults.FirstInputDelay = @{\n            P75 = 150\n            Category = "needs-improvement"\n        }\n        $coreWebVitalsResults.CumulativeLayoutShift = @{\n            P75 = 0.25\n            Category = "needs-improvement"\n        }\n        $coreWebVitalsResults.Score = 60\n    }\n\n    return $coreWebVitalsResults\n}\n\nfunction Get-CoreWebVitalsCategory {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$Metric,\n        [Parameter(Mandatory = $true)]\n        $Value\n    )\n\n    switch ($Metric) {\n        "LCP" {\n            if ($Value -le 2500) { return "good" }\n            elseif ($Value -le 4000) { return "needs-improvement" }\n            else { return "poor" }\n        }\n        "FID" {\n            if ($Value -le 100) { return "good" }\n            elseif ($Value -le 300) { return "needs-improvement" }\n            else { return "poor" }\n        }\n        "CLS" {\n            if ($Value -le 0.1) { return "good" }\n            elseif ($Value -le 0.25) { return "needs-improvement" }\n            else { return "poor" }\n        }\n        default { return "unknown" }\n    }\n}\n\nfunction Test-LighthousePerformance {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$Url\n    )\n\n    Write-Host "`nüèÆ Lighthouse Performans Testi:" -ForegroundColor Yellow\n    Write-TestLog "Lighthouse performans testi ba≈ülatƒ±lƒ±yor: $Url"\n\n    $lighthouseResults = @{\n        Score = 0\n        FirstContentfulPaint = 0\n        SpeedIndex = 0\n        LargestContentfulPaint = 0\n        Interactive = 0\n        TotalBlockingTime = 0\n        CumulativeLayoutShift = 0\n        ErrorMessage = ""\n    }\n\n    try {\n        # Basit performans metrikleri sim√ºlasyonu\n        # Ger√ßek Lighthouse i√ßin Node.js ve lighthouse mod√ºl√º gerekli\n\n        $startTime = Get-Date\n        $response = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 30\n        $endTime = Get-Date\n        $loadTime = ($endTime - $startTime).TotalMilliseconds\n\n        # Basit performans hesaplamasƒ±\n        $lighthouseResults.FirstContentfulPaint = [math]::Round($loadTime * 0.3, 0)\n        $lighthouseResults.SpeedIndex = [math]::Round($loadTime * 0.5, 0)\n        $lighthouseResults.LargestContentfulPaint = [math]::Round($loadTime * 0.7, 0)\n        $lighthouseResults.Interactive = [math]::Round($loadTime * 0.8, 0)\n        $lighthouseResults.TotalBlockingTime = [math]::Round($loadTime * 0.1, 0)\n        $lighthouseResults.CumulativeLayoutShift = 0.05\n\n        # Genel skor hesaplama (basitle≈ütirilmi≈ü)\n        $performanceScore = 100 - [math]::Round($loadTime / 100, 0)\n        $lighthouseResults.Score = [math]::Max(0, [math]::Min(100, $performanceScore))\n\n        Write-Host "‚úÖ Lighthouse performans testi tamamlandƒ±:" -ForegroundColor Green\n        Write-Host "  üìä Genel skor: $($lighthouseResults.Score)/100" -ForegroundColor White\n        Write-Host "  ‚ö° ƒ∞lk i√ßerikli boyama: $($lighthouseResults.FirstContentfulPaint)ms" -ForegroundColor White\n        Write-Host "  üìè En b√ºy√ºk i√ßerikli boyama: $($lighthouseResults.LargestContentfulPaint)ms" -ForegroundColor White\n        Write-Host "  üîÑ Etkile≈üim s√ºresi: $($lighthouseResults.Interactive)ms" -ForegroundColor White\n        Write-Host "  üìê Kumulatif d√ºzen kaymasƒ±: $($lighthouseResults.CumulativeLayoutShift)" -ForegroundColor White\n\n        Write-TestLog "Lighthouse test ba≈üarƒ±lƒ±: Score=$($lighthouseResults.Score)"\n\n    } catch {\n        Write-Host "‚ùå Lighthouse performans testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        $lighthouseResults.ErrorMessage = $_.Exception.Message\n        Write-TestLog "Lighthouse test hatasƒ±: $($_.Exception.Message)" "ERROR"\n\n        # Fallback deƒüerler\n        $lighthouseResults.Score = 50\n        $lighthouseResults.FirstContentfulPaint = 3000\n        $lighthouseResults.SpeedIndex = 4000\n        $lighthouseResults.LargestContentfulPaint = 3500\n        $lighthouseResults.Interactive = 4500\n        $lighthouseResults.TotalBlockingTime = 500\n        $lighthouseResults.CumulativeLayoutShift = 0.15\n    }\n\n    return $lighthouseResults\n}\n\nfunction Test-SEOScore {\n    Write-Host "`nüîç SEO Testi:" -ForegroundColor Yellow\n    Write-TestLog "SEO testi ba≈ülatƒ±lƒ±yor"\n\n    $seoScore = 0\n    $seoChecks = @()\n\n    # Meta title kontrol√º\n    try {\n        if (-not $SkipNetworkTests) {\n            $homeResponse = Invoke-WebRequest -Uri "$BaseUrl/" -UseBasicParsing -TimeoutSec 30\n            if ($homeResponse.StatusCode -eq 200) {\n                $homeContent = $homeResponse.Content\n\n                # Title tag kontrol√º\n                if ($homeContent -match '<title[^>]*>([^<]+)</title>') {\n                    $title = $matches[1]\n                    $titleLength = $title.Length\n                    if ($titleLength -ge 30 -and $titleLength -le 60) {\n                        Write-Host "‚úÖ Title tag uzunluƒüu uygun: $titleLength karakter" -ForegroundColor Green\n                        $seoScore += 15\n                    } elseif ($titleLength -ge 20 -and $titleLength -le 70) {\n                        Write-Host "‚ö†Ô∏è Title tag uzunluƒüu kabul edilebilir: $titleLength karakter" -ForegroundColor Yellow\n                        $seoScore += 10\n                    } else {\n                        Write-Host "‚ùå Title tag uzunluƒüu uygun deƒüil: $titleLength karakter" -ForegroundColor Red\n                        $seoScore += 5\n                    }\n                    $seoChecks += @{ Name = "Meta Title"; Status = $true; Value = $title; Score = 15 }\n                } else {\n                    Write-Host "‚ùå Title tag eksik" -ForegroundColor Red\n                    $seoChecks += @{ Name = "Meta Title"; Status = $false; Value = $null; Score = 0 }\n                }\n\n                # Meta description kontrol√º\n                if ($homeContent -match '<meta[^>]*name="description"[^>]*content="([^"]+)"') {\n                    $description = $matches[1]\n                    $descLength = $description.Length\n                    if ($descLength -ge 120 -and $descLength -le 160) {\n                        Write-Host "‚úÖ Meta description uzunluƒüu uygun: $descLength karakter" -ForegroundColor Green\n                        $seoScore += 15\n                    } elseif ($descLength -ge 100 -and $descLength -le 180) {\n                        Write-Host "‚ö†Ô∏è Meta description uzunluƒüu kabul edilebilir: $descLength karakter" -ForegroundColor Yellow\n                        $seoScore += 10\n                    } else {\n                        Write-Host "‚ùå Meta description uzunluƒüu uygun deƒüil: $descLength karakter" -ForegroundColor Red\n                        $seoScore += 5\n                    }\n                    $seoChecks += @{ Name = "Meta Description"; Status = $true; Value = $description; Score = 15 }\n                } else {\n                    Write-Host "‚ùå Meta description eksik" -ForegroundColor Red\n                    $seoChecks += @{ Name = "Meta Description"; Status = $false; Value = $null; Score = 0 }\n                }\n\n                # H1 tag kontrol√º\n                if ($homeContent -match '<h1[^>]*>([^<]+)</h1>') {\n                    Write-Host "‚úÖ H1 tag mevcut" -ForegroundColor Green\n                    $seoScore += 10\n                    $seoChecks += @{ Name = "H1 Tag"; Status = $true; Value = $matches[1]; Score = 10 }\n                } else {\n                    Write-Host "‚ùå H1 tag eksik" -ForegroundColor Red\n                    $seoChecks += @{ Name = "H1 Tag"; Status = $false; Value = $null; Score = 0 }\n                }\n\n                # Open Graph tags kontrol√º\n                $ogTags = @("og:title", "og:description", "og:image", "og:url")\n                $ogScore = 0\n                foreach ($tag in $ogTags) {\n                    if ($homeContent -match "property=`"$tag`"") {\n                        $ogScore += 5\n                    }\n                }\n                if ($ogScore -ge 15) {\n                    Write-Host "‚úÖ Open Graph tags yeterli" -ForegroundColor Green\n                    $seoScore += 15\n                } elseif ($ogScore -ge 10) {\n                    Write-Host "‚ö†Ô∏è Open Graph tags kƒ±smi" -ForegroundColor Yellow\n                    $seoScore += 10\n                } else {\n                    Write-Host "‚ùå Open Graph tags yetersiz" -ForegroundColor Red\n                    $seoScore += 5\n                }\n                $seoChecks += @{ Name = "Open Graph"; Status = $true; Value = "$ogScore/20"; Score = 15 }\n\n                # Twitter Card tags kontrol√º\n                $twitterTags = @("twitter:card", "twitter:title", "twitter:description")\n                $twitterScore = 0\n                foreach ($tag in $twitterTags) {\n                    if ($homeContent -match "name=`"$tag`"") {\n                        $twitterScore += 5\n                    }\n                }\n                if ($twitterScore -ge 10) {\n                    Write-Host "‚úÖ Twitter Card tags yeterli" -ForegroundColor Green\n                    $seoScore += 10\n                } elseif ($twitterScore -ge 5) {\n                    Write-Host "‚ö†Ô∏è Twitter Card tags kƒ±smi" -ForegroundColor Yellow\n                    $seoScore += 5\n                } else {\n                    Write-Host "‚ùå Twitter Card tags eksik" -ForegroundColor Red\n                }\n                $seoChecks += @{ Name = "Twitter Card"; Status = $true; Value = "$twitterScore/15"; Score = 10 }\n\n                # Alt attributes kontrol√º\n                $imgCount = ($homeContent | Select-String -Pattern '<img[^>]*>' -AllMatches).Matches.Count\n                $altCount = ($homeContent | Select-String -Pattern '<img[^>]*alt=' -AllMatches).Matches.Count\n                if ($imgCount -gt 0) {\n                    $altRatio = [math]::Round(($altCount / $imgCount) * 100, 1)\n                    if ($altRatio -ge 80) {\n                        Write-Host "‚úÖ Alt attributes y√ºksek oran: $altRatio%" -ForegroundColor Green\n                        $seoScore += 10\n                    } elseif ($altRatio -ge 60) {\n                        Write-Host "‚ö†Ô∏è Alt attributes orta oran: $altRatio%" -ForegroundColor Yellow\n                        $seoScore += 5\n                    } else {\n                        Write-Host "‚ùå Alt attributes d√º≈ü√ºk oran: $altRatio%" -ForegroundColor Red\n                    }\n                    $seoChecks += @{ Name = "Alt Attributes"; Status = $true; Value = "$altRatio%"; Score = 10 }\n                } else {\n                    Write-Host "‚ÑπÔ∏è Sayfa da resim yok" -ForegroundColor Cyan\n                    $seoChecks += @{ Name = "Alt Attributes"; Status = $true; Value = "N/A"; Score = 10 }\n                    $seoScore += 10\n                }\n\n                # Structured data kontrol√º\n                if ($homeContent -match '"@context"|"@type"') {\n                    Write-Host "‚úÖ Structured data mevcut" -ForegroundColor Green\n                    $seoScore += 10\n                    $seoChecks += @{ Name = "Structured Data"; Status = $true; Value = "Present"; Score = 10 }\n                } else {\n                    Write-Host "‚ö†Ô∏è Structured data eksik" -ForegroundColor Yellow\n                    $seoChecks += @{ Name = "Structured Data"; Status = $false; Value = "Missing"; Score = 0 }\n                }\n\n            } else {\n                Write-Host "‚ùå Ana sayfa eri≈üilemiyor" -ForegroundColor Red\n                $seoChecks += @{ Name = "Page Access"; Status = $false; Value = $null; Score = 0 }\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è SEO testi atlandƒ±" -ForegroundColor Yellow\n            $seoChecks += @{ Name = "SEO Tests"; Status = $null; Value = $null; Score = 0 }\n        }\n    }\n    catch {\n        Write-Host "‚ùå SEO testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "SEO testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n        $seoChecks += @{ Name = "SEO Tests"; Status = $false; Value = $null; Score = 0 }\n    }\n\n    Write-Host "üìä SEO skoru: $seoScore/100" -ForegroundColor Yellow\n\n    $seoResults["Score"] = $seoScore -ge 60\n    return @{ Score = $seoScore; Checks = $seoChecks }\n}\n\n# Loglama sistemi i√ßin JSON export fonksiyonu\nfunction Export-TestResultsToJson {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [string]$OutputPath = "pwa-test-results.json",\n        [Parameter(Mandatory = $false)]\n        [switch]$PrettyPrint,\n        [Parameter(Mandatory = $false)]\n        [array]$LogMessages = @(),\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero\n    )\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $totalTests = $TestResults.Count\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $successRate = if ($totalTests -gt 0) {\n        [math]::Round(($passedTests / $totalTests) * 100, 2)\n    } else { 0 }\n\n    # Export verisini hazƒ±rla\n    $exportData = @{\n        metadata = @{\n            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n            script_version = "2.0.0"\n            powershell_version = $PSVersionTable.PSVersion.ToString()\n            test_duration_seconds = [math]::Round($Duration.TotalSeconds, 2)\n            hostname = $env:COMPUTERNAME\n            username = $env:USERNAME\n        }\n        configuration = @{\n            base_url = $BaseUrl\n            verbose_mode = $Verbose.IsPresent\n            skip_network_tests = $SkipNetworkTests.IsPresent\n            export_json = $ExportJson.IsPresent\n        }\n        test_results = @{\n            total_tests = $totalTests\n            passed_tests = $passedTests\n            failed_tests = $failedTests\n            skipped_tests = $skippedTests\n            success_rate = $successRate\n            details = $TestResults\n        }\n        performance_metrics = @{\n            test_duration = $Duration.ToString()\n            average_response_time = if ($totalTests -gt 0) { [math]::Round($Duration.TotalSeconds / $totalTests, 2) } else { 0 }\n            tests_per_second = if ($Duration.TotalSeconds -gt 0) { [math]::Round($totalTests / $Duration.TotalSeconds, 2) } else { 0 }\n        }\n        logs = $LogMessages\n        recommendations = @(\n            if ($failedTests -gt 0) { "Ba≈üarƒ±sƒ±z testleri d√ºzeltmek i√ßin manifest.json ve service-worker.js dosyalarƒ±nƒ± kontrol edin" }\n            if ($successRate -lt 80) { "Performansƒ± artƒ±rmak i√ßin resimleri optimize edin ve gereksiz kaynaklarƒ± kaldƒ±rƒ±n" }\n            if ($skippedTests -gt 0) { "Atlanan testleri etkinle≈ütirmek i√ßin aƒü baƒülantƒ±sƒ±nƒ± kontrol edin" }\n        )\n    }\n\n    # JSON formatƒ±nda kaydet\n    $jsonOptions = if ($PrettyPrint) {\n        @{ Depth = 10; Compress = $false }\n    } else {\n        @{ Depth = 10; Compress = $true }\n    }\n\n    $exportData | ConvertTo-Json @jsonOptions | Out-File -FilePath $OutputPath -Encoding UTF8\n\n    Write-Host "üìÑ Test sonu√ßlarƒ± JSON olarak kaydedildi: $OutputPath" -ForegroundColor Cyan\n    Write-TestLog "Test results exported to JSON: $OutputPath"\n}\n\n# =========================================\n# SLACK/DISCORD WEBHOOK Bƒ∞LDƒ∞Rƒ∞M Sƒ∞STEMƒ∞\n# =========================================\n\nfunction Send-SlackNotification {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$WebhookUrl,\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$LegalResults = @{},\n        [Parameter(Mandatory = $false)]\n        [hashtable]$SEOResults = @{},\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero\n    )\n\n    Write-Host "`nüì¢ Slack bildirimi g√∂nderiliyor..." -ForegroundColor Cyan\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $totalTests = $TestResults.Count\n    $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n    # Renk belirleme\n    $color = switch ($successRate) {\n        { $_ -ge 90 } { "good" }\n        { $_ -ge 75 } { "warning" }\n        default { "danger" }\n    }\n\n    # Slack mesajƒ± olu≈ütur\n    $slackMessage = @{\n        attachments = @(\n            @{\n                color = $color\n                title = "üîç PWA Test Sonu√ßlarƒ± - KesifApp"\n                text = "Otomatik PWA test sonu√ßlarƒ±"\n                fields = @(\n                    @{\n                        title = "Ba≈üarƒ± Oranƒ±"\n                        value = "$successRate%"\n                        short = $true\n                    },\n                    @{\n                        title = "Ge√ßen Testler"\n                        value = "$passedTests/$totalTests"\n                        short = $true\n                    },\n                    @{\n                        title = "Test S√ºresi"\n                        value = "$([math]::Round($Duration.TotalSeconds, 1)) saniye"\n                        short = $true\n                    },\n                    @{\n                        title = "Test Tarihi"\n                        value = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")\n                        short = $true\n                    }\n                )\n                footer = "KesifApp PWA Test Sistemi"\n                ts = [int][double]::Parse((Get-Date -UFormat %s))\n            }\n        )\n    }\n\n    # Detaylƒ± test sonu√ßlarƒ±\n    $testDetails = ""\n    foreach ($test in $TestResults.GetEnumerator()) {\n        $status = switch ($test.Value) {\n            $true { "‚úÖ" }\n            $false { "‚ùå" }\n            $null { "‚è≠Ô∏è" }\n            default { "‚ùì" }\n        }\n        $testDetails += "$status $($test.Key)`n"\n    }\n\n    $slackMessage.attachments[0].fields += @{\n        title = "Test Detaylarƒ±"\n        value = $testDetails\n        short = $false\n    }\n\n    # Legal ve SEO sonu√ßlarƒ± ekleme\n    if ($LegalResults.Score) {\n        $slackMessage.attachments[0].fields += @{\n            title = "Legal Compliance"\n            value = "$($LegalResults.Score)/100"\n            short = $true\n        }\n    }\n\n    if ($SEOResults.Score) {\n        $slackMessage.attachments[0].fields += @{\n            title = "SEO Score"\n            value = "$($SEOResults.Score)/100"\n            short = $true\n        }\n    }\n\n    try {\n        $jsonMessage = $slackMessage | ConvertTo-Json -Depth 10\n        $response = Invoke-WebRequest -Uri $WebhookUrl -Method POST -Body $jsonMessage -ContentType "application/json" -UseBasicParsing -TimeoutSec 30\n\n        if ($response.StatusCode -eq 200) {\n            Write-Host "‚úÖ Slack bildirimi ba≈üarƒ±yla g√∂nderildi" -ForegroundColor Green\n            Write-TestLog "Slack notification sent successfully"\n        } else {\n            Write-Host "‚ùå Slack bildirimi g√∂nderilemedi (Status: $($response.StatusCode))" -ForegroundColor Red\n            Write-TestLog "Slack notification failed: $($response.StatusCode)" "ERROR"\n        }\n    } catch {\n        Write-Host "‚ùå Slack bildirimi hatasƒ±: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Slack notification error: $($_.Exception.Message)" "ERROR"\n    }\n}\n\nfunction Send-DiscordNotification {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$WebhookUrl,\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$LegalResults = @{},\n        [Parameter(Mandatory = $false)]\n        [hashtable]$SEOResults = @{},\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero\n    )\n\n    Write-Host "`nüì¢ Discord bildirimi g√∂nderiliyor..." -ForegroundColor Cyan\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $totalTests = $TestResults.Count\n    $successRate = if ($totalTests -gt 0) { [math]::Round(($passedTests / $totalTests) * 100, 1) } else { 0 }\n\n    # Renk belirleme\n    $color = switch ($successRate) {\n        { $_ -ge 90 } { 5763719 }  # Ye≈üil\n        { $_ -ge 75 } { 16776960 } # Sarƒ±\n        default { 15548997 } # Kƒ±rmƒ±zƒ±\n    }\n\n    # Discord embed olu≈ütur\n    $discordMessage = @{\n        embeds = @(\n            @{\n                title = "üîç PWA Test Sonu√ßlarƒ± - KesifApp"\n                description = "Otomatik PWA test sonu√ßlarƒ±"\n                color = $color\n                fields = @(\n                    @{\n                        name = "üìä Ba≈üarƒ± Oranƒ±"\n                        value = "$successRate%"\n                        inline = $true\n                    },\n                    @{\n                        name = "‚úÖ Ge√ßen Testler"\n                        value = "$passedTests/$totalTests"\n                        inline = $true\n                    },\n                    @{\n                        name = "‚è±Ô∏è Test S√ºresi"\n                        value = "$([math]::Round($Duration.TotalSeconds, 1)) saniye"\n                        inline = $true\n                    },\n                    @{\n                        name = "üìÖ Test Tarihi"\n                        value = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")\n                        inline = $true\n                    }\n                )\n                footer = @{\n                    text = "KesifApp PWA Test Sistemi"\n                }\n                timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")\n            }\n        )\n    }\n\n    # Test detaylarƒ± ekleme\n    $testDetails = ""\n    foreach ($test in $TestResults.GetEnumerator()) {\n        $status = switch ($test.Value) {\n            $true { "‚úÖ" }\n            $false { "‚ùå" }\n            $null { "‚è≠Ô∏è" }\n            default { "‚ùì" }\n        }\n        $testDetails += "$status $($test.Key)`n"\n    }\n\n    if ($testDetails.Length -gt 1024) {\n        $testDetails = $testDetails.Substring(0, 1021) + "..."\n    }\n\n    $discordMessage.embeds[0].fields += @{\n        name = "üîß Test Detaylarƒ±"\n        value = $testDetails\n        inline = $false\n    }\n\n    # Legal ve SEO sonu√ßlarƒ± ekleme\n    if ($LegalResults.Score) {\n        $discordMessage.embeds[0].fields += @{\n            name = "‚öñÔ∏è Legal Compliance"\n            value = "$($LegalResults.Score)/100"\n            inline = $true\n        }\n    }\n\n    if ($SEOResults.Score) {\n        $discordMessage.embeds[0].fields += @{\n            name = "üîç SEO Score"\n            value = "$($SEOResults.Score)/100"\n            inline = $true\n        }\n    }\n\n    try {\n        $jsonMessage = $discordMessage | ConvertTo-Json -Depth 10\n        $response = Invoke-WebRequest -Uri $WebhookUrl -Method POST -Body $jsonMessage -ContentType "application/json" -UseBasicParsing -TimeoutSec 30\n\n        if ($response.StatusCode -eq 204) {\n            Write-Host "‚úÖ Discord bildirimi ba≈üarƒ±yla g√∂nderildi" -ForegroundColor Green\n            Write-TestLog "Discord notification sent successfully"\n        } else {\n            Write-Host "‚ùå Discord bildirimi g√∂nderilemedi (Status: $($response.StatusCode))" -ForegroundColor Red\n            Write-TestLog "Discord notification failed: $($response.StatusCode)" "ERROR"\n        }\n    } catch {\n        Write-Host "‚ùå Discord bildirimi hatasƒ±: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "Discord notification error: $($_.Exception.Message)" "ERROR"\n    }\n}\n\nfunction Send-WebhookNotification {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$WebhookUrl,\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$LegalResults = @{},\n        [Parameter(Mandatory = $false)]\n        [hashtable]$SEOResults = @{},\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero,\n        [Parameter(Mandatory = $false)]\n        [string]$Platform = "auto"  # auto, slack, discord\n    )\n\n    # Platform otomatik tespiti\n    if ($Platform -eq "auto") {\n        if ($WebhookUrl -match "hooks\.slack\.com") {\n            $Platform = "slack"\n        } elseif ($WebhookUrl -match "discord") {\n            $Platform = "discord"\n        } else {\n            Write-Host "‚ö†Ô∏è Webhook platformu tespit edilemedi, Slack formatƒ± kullanƒ±lƒ±yor" -ForegroundColor Yellow\n            $Platform = "slack"\n        }\n    }\n\n    switch ($Platform) {\n        "slack" {\n            Send-SlackNotification -WebhookUrl $WebhookUrl -TestResults $TestResults -LegalResults $LegalResults -SEOResults $SEOResults -Duration $Duration\n        }\n        "discord" {\n            Send-DiscordNotification -WebhookUrl $WebhookUrl -TestResults $TestResults -LegalResults $LegalResults -SEOResults $SEOResults -Duration $Duration\n        }\n        default {\n            Write-Host "‚ùå Desteklenmeyen webhook platformu: $Platform" -ForegroundColor Red\n        }\n    }\n}\n\nWrite-Host "`nüöÄ PWA Test Mod√ºlleri Ba≈ülatƒ±lƒ±yor..." -ForegroundColor Cyan\n\n# PWA test mod√ºllerini √ßalƒ±≈ütƒ±r\n$manifestResult = Test-PWAManifest\n$swResult = Test-PWAServiceWorker\n$htmlResult = Test-PWAHTMLIntegration\n$offlineResult = Test-PWAOfflineCapability\n\n# Legal test mod√ºllerini √ßalƒ±≈ütƒ±r (eƒüer etkinse)\n$legalResult = $null\nif ($IncludeLegalTests) {\n    $legalResult = Test-LegalCompliance\n}\n\n# SEO test mod√ºllerini √ßalƒ±≈ütƒ±r (eƒüer etkinse)\n$seoResult = $null\nif ($IncludeSEOTests) {\n    $seoResult = Test-SEOScore\n}\n\n# =========================================\n# G√úNCELLENMƒ∞≈û JSON EXPORT FONKSƒ∞YONU\n# =========================================\n\nfunction Export-TestResultsToJson {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [string]$OutputPath = "pwa-test-results.json",\n        [Parameter(Mandatory = $false)]\n        [switch]$PrettyPrint,\n        [Parameter(Mandatory = $false)]\n        [array]$LogMessages = @(),\n        [Parameter(Mandatory = $false)]\n        [TimeSpan]$Duration = [TimeSpan]::Zero,\n        [Parameter(Mandatory = $false)]\n        [object]$LegalResults = $null,\n        [Parameter(Mandatory = $false)]\n        [object]$SEOResults = $null\n    )\n\n    # Test sonu√ßlarƒ±nƒ± hesapla\n    $totalTests = $TestResults.Count\n    $passedTests = ($TestResults.Values | Where-Object { $_ -eq $true }).Count\n    $failedTests = ($TestResults.Values | Where-Object { $_ -eq $false }).Count\n    $skippedTests = ($TestResults.Values | Where-Object { $_ -eq $null }).Count\n    $successRate = if ($totalTests -gt 0) {\n        [math]::Round(($passedTests / $totalTests) * 100, 2)\n    } else { 0 }\n\n    # Export verisini hazƒ±rla\n    $exportData = @{\n        metadata = @{\n            timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n            script_version = "3.0.0"\n            powershell_version = $PSVersionTable.PSVersion.ToString()\n            test_duration_seconds = [math]::Round($Duration.TotalSeconds, 2)\n            hostname = $env:COMPUTERNAME\n            username = $env:USERNAME\n        }\n        configuration = @{\n            base_url = $BaseUrl\n            verbose_mode = $Verbose.IsPresent\n            skip_network_tests = $SkipNetworkTests.IsPresent\n            export_json = $ExportJson.IsPresent\n            generate_dashboard = $GenerateDashboard.IsPresent\n            include_legal_tests = $IncludeLegalTests.IsPresent\n            include_seo_tests = $IncludeSEOTests.IsPresent\n        }\n        pwa_tests = @{\n            total_tests = $totalTests\n            passed_tests = $passedTests\n            failed_tests = $failedTests\n            skipped_tests = $skippedTests\n            success_rate = $successRate\n            details = $TestResults\n            manifest_score = $manifestResult.Score\n            service_worker_score = $swResult.Score\n            html_integration_score = $htmlResult.TotalScore\n            offline_capability_score = $offlineResult.Score\n        }\n        performance_metrics = @{\n            test_duration = $Duration.ToString()\n            average_response_time = if ($totalTests -gt 0) { [math]::Round($Duration.TotalSeconds / $totalTests, 2) } else { 0 }\n            tests_per_second = if ($Duration.TotalSeconds -gt 0) { [math]::Round($totalTests / $Duration.TotalSeconds, 2) } else { 0 }\n        }\n        logs = $LogMessages\n    }\n\n    # Legal sonu√ßlarƒ± ekle\n    if ($LegalResults) {\n        $exportData.legal_compliance = @{\n            score = $LegalResults.Score\n            passed = $LegalResults.Score -ge 70\n            checks = $LegalResults.Checks\n        }\n    }\n\n    # SEO sonu√ßlarƒ± ekle\n    if ($SEOResults) {\n        $exportData.seo_score = @{\n            score = $SEOResults.Score\n            passed = $SEOResults.Score -ge 60\n            checks = $SEOResults.Checks\n        }\n    }\n\n    # Genel skor hesapla\n    $pwaScore = [math]::Round((($manifestResult.Score + $swResult.Score + $htmlResult.TotalScore + $offlineResult.Score) / 400) * 100, 1)\n    $legalScore = if ($LegalResults) { [math]::Round(($LegalResults.Score / 100) * 100, 1) } else { 0 }\n    $seoScore = if ($SEOResults) { [math]::Round(($SEOResults.Score / 100) * 100, 1) } else { 0 }\n\n    $exportData.overall_score = @{\n        pwa_score = $pwaScore\n        legal_score = $legalScore\n        seo_score = $seoScore\n        total_score = [math]::Round((($pwaScore + $legalScore + $seoScore) / 3), 1)\n    }\n\n    # √ñneriler\n    $recommendations = @()\n\n    if ($failedTests -gt 0) {\n        $recommendations += "Ba≈üarƒ±sƒ±z testleri d√ºzeltmek i√ßin manifest.json ve service-worker.js dosyalarƒ±nƒ± kontrol edin"\n    }\n    if ($successRate -lt 80) {\n        $recommendations += "Performansƒ± artƒ±rmak i√ßin resimleri optimize edin ve gereksiz kaynaklarƒ± kaldƒ±rƒ±n"\n    }\n    if ($skippedTests -gt 0) {\n        $recommendations += "Atlanan testleri etkinle≈ütirmek i√ßin aƒü baƒülantƒ±sƒ±nƒ± kontrol edin"\n    }\n    if ($LegalResults -and $LegalResults.Score -lt 70) {\n        $recommendations += "Legal compliance skorunu artƒ±rmak i√ßin robots.txt, sitemap.xml ve privacy-policy.html dosyalarƒ±nƒ± kontrol edin"\n    }\n    if ($SEOResults -and $SEOResults.Score -lt 60) {\n        $recommendations += "SEO skorunu artƒ±rmak i√ßin meta etiketlerini ve structured data markup'larƒ±nƒ± optimize edin"\n    }\n\n    $exportData.recommendations = $recommendations\n\n    # JSON formatƒ±nda kaydet\n    $jsonOptions = if ($PrettyPrint) {\n        @{ Depth = 10; Compress = $false }\n    } else {\n        @{ Depth = 10; Compress = $true }\n    }\n\n    $exportData | ConvertTo-Json @jsonOptions | Out-File -FilePath $OutputPath -Encoding UTF8\n\n    Write-Host "üìÑ Test sonu√ßlarƒ± JSON olarak kaydedildi: $OutputPath" -ForegroundColor Cyan\n    Write-TestLog "Test results exported to JSON: $OutputPath"\n}\n\n# 2. Service Worker testi\nWrite-Host "`n‚öôÔ∏è Service Worker Testi:" -ForegroundColor Yellow\nWrite-TestLog "Service Worker testi ba≈ülatƒ±lƒ±yor"\n\ntry {\n    if (-not $SkipNetworkTests) {\n        $swResponse = Invoke-WebRequest -Uri "$BaseUrl/service-worker.js" -UseBasicParsing -TimeoutSec 30\n        Write-TestLog "Service Worker HTTP yanƒ±tƒ± alƒ±ndƒ±: $($swResponse.StatusCode)"\n\n        if ($swResponse.StatusCode -eq 200) {\n            Write-Host "‚úÖ service-worker.js eri≈üilebilir" -ForegroundColor Green\n\n            # Service Worker i√ßeriƒüi kontrol√º\n            $swContent = $swResponse.Content\n            $swChecks = @(\n                @{ Name = "Install event"; Pattern = "install"; Required = $true },\n                @{ Name = "Activate event"; Pattern = "activate"; Required = $true },\n                @{ Name = "Fetch event"; Pattern = "fetch"; Required = $true },\n                @{ Name = "Cache management"; Pattern = "caches"; Required = $true },\n                @{ Name = "Error handling"; Pattern = "addEventListener.*error"; Required = $false },\n                @{ Name = "Push notifications"; Pattern = "push"; Required = $false },\n                @{ Name = "Background sync"; Pattern = "sync"; Required = $false }\n            )\n\n            $swScore = 0\n            $totalChecks = $swChecks.Count\n\n            foreach ($check in $swChecks) {\n                if ($swContent -match $check.Pattern) {\n                    $symbol = if ($check.Required) { "‚úÖ" } else { "‚ÑπÔ∏è" }\n                    $color = if ($check.Required) { "Green" } else { "Cyan" }\n                    Write-Host "$symbol $($check.Name) handler mevcut" -ForegroundColor $color\n                    if ($check.Required) { $swScore++ }\n                    Write-TestLog "$($check.Name) handler bulundu"\n                } else {\n                    $symbol = if ($check.Required) { "‚ùå" } else { "‚ö™" }\n                    $color = if ($check.Required) { "Red" } else { "Gray" }\n                    Write-Host "$symbol $($check.Name) handler eksik" -ForegroundColor $color\n                    if ($check.Required) {\n                        Write-TestLog "$($check.Name) handler eksik" "WARN"\n                    }\n                }\n            }\n\n            $swPercentage = [math]::Round(($swScore / $swChecks.Where({$_.Required}).Count) * 100, 1)\n            Write-Host "üìä Service Worker kapsamƒ±: $swPercentage%" -ForegroundColor Yellow\n\n            $testResults["ServiceWorker"] = $swPercentage -ge 75\n        } else {\n            Write-Host "‚ùå service-worker.js eri≈üilemiyor (Status: $($swResponse.StatusCode))" -ForegroundColor Red\n            $testResults["ServiceWorker"] = $false\n        }\n    } else {\n        Write-Host "‚è≠Ô∏è Aƒü testleri atlandƒ±" -ForegroundColor Yellow\n        $testResults["ServiceWorker"] = $null\n    }\n}\ncatch {\n    Write-Host "‚ùå Service Worker testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n    Write-TestLog "Service Worker testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n    $testResults["ServiceWorker"] = $false\n}\n\n# 3. HTML sayfalarƒ±nda PWA entegrasyonu testi\nWrite-Host "`nüåê HTML PWA Entegrasyonu Testi:" -ForegroundColor Yellow\nWrite-TestLog "HTML PWA entegrasyonu testi ba≈ülatƒ±lƒ±yor"\n\n$pagesToTest = @(\n    @{ Name = "Ana Sayfa"; Url = "$BaseUrl/"; File = "index.html" },\n    @{ Name = "Yasal Sayfa"; Url = "$BaseUrl/legal.html"; File = "legal.html" },\n    @{ Name = "Gizlilik Sayfasƒ±"; Url = "$BaseUrl/privacy-policy.html"; File = "privacy-policy.html" },\n    @{ Name = "404 Sayfasƒ±"; Url = "$BaseUrl/404.html"; File = "404.html" }\n)\n\nforeach ($page in $pagesToTest) {\n    Write-TestLog "$($page.Name) testi ba≈ülatƒ±lƒ±yor"\n\n    try {\n        if (-not $SkipNetworkTests) {\n            $pageResponse = Invoke-WebRequest -Uri $page.Url -UseBasicParsing -TimeoutSec 30\n            Write-TestLog "$($page.Name) HTTP yanƒ±tƒ±: $($pageResponse.StatusCode)"\n\n            if ($pageResponse.StatusCode -eq 200) {\n                $content = $pageResponse.Content\n\n                # PWA meta etiketleri kontrol√º\n                $pwaChecks = @(\n                    @{ Name = "Manifest link"; Pattern = 'rel="manifest"'; Required = $true },\n                    @{ Name = "Theme color"; Pattern = 'name="theme-color"'; Required = $true },\n                    @{ Name = "Apple mobile web app"; Pattern = 'name="apple-mobile-web-app'; Required = $false },\n                    @{ Name = "Service Worker script"; Pattern = 'service-worker\.js'; Required = $true },\n                    @{ Name = "Viewport meta"; Pattern = 'name="viewport"'; Required = $true },\n                    @{ Name = "Charset UTF-8"; Pattern = 'charset=utf-8'; Required = $true }\n                )\n\n                $pageResults = @()\n                $pageScore = 0\n                $requiredChecks = $pwaChecks.Where({$_.Required}).Count\n\n                foreach ($check in $pwaChecks) {\n                    if ($content -match $check.Pattern) {\n                        $symbol = if ($check.Required) { "‚úÖ" } else { "‚ÑπÔ∏è" }\n                        $pageResults += "$symbol $($check.Name)"\n                        if ($check.Required) { $pageScore++ }\n                        Write-TestLog "$($page.Name) - $($check.Name) bulundu"\n                    } else {\n                        $symbol = if ($check.Required) { "‚ùå" } else { "‚ö™" }\n                        $pageResults += "$symbol $($check.Name)"\n                        if ($check.Required) {\n                            Write-TestLog "$($page.Name) - $($check.Name) eksik" "WARN"\n                        }\n                    }\n                }\n\n                Write-Host "$($page.Name) ($($page.Url)):" -ForegroundColor White\n                foreach ($result in $pageResults) {\n                    if ($result -match "‚úÖ") {\n                        Write-Host "  $result" -ForegroundColor Green\n                    } elseif ($result -match "‚ÑπÔ∏è") {\n                        Write-Host "  $result" -ForegroundColor Cyan\n                    } else {\n                        Write-Host "  $result" -ForegroundColor Red\n                    }\n                }\n\n                $pagePercentage = [math]::Round(($pageScore / $requiredChecks) * 100, 1)\n                Write-Host "  üìä PWA kapsamƒ±: $pagePercentage%" -ForegroundColor Yellow\n\n                $testResults[$page.Name] = $pagePercentage -ge 80\n            } else {\n                Write-Host "‚ùå $($page.Name) eri≈üilemiyor (Status: $($pageResponse.StatusCode))" -ForegroundColor Red\n                $testResults[$page.Name] = $false\n            }\n        } else {\n            Write-Host "‚è≠Ô∏è $($page.Name) - Aƒü testleri atlandƒ±" -ForegroundColor Yellow\n            $testResults[$page.Name] = $null\n        }\n    }\n    catch {\n        Write-Host "‚ùå $($page.Name) testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n        Write-TestLog "$($page.Name) testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n        $testResults[$page.Name] = $false\n    }\n}\n\n# 4. Offline capability testi (basit)\nWrite-Host "`nüì∂ Offline Capability Testi:" -ForegroundColor Yellow\nWrite-TestLog "Offline capability testi ba≈ülatƒ±lƒ±yor"\n\ntry {\n    if (-not $SkipNetworkTests) {\n        $offlineResponse = Invoke-WebRequest -Uri "$BaseUrl/404.html" -UseBasicParsing -TimeoutSec 30\n        Write-TestLog "404.html HTTP yanƒ±tƒ±: $($offlineResponse.StatusCode)"\n\n        if ($offlineResponse.StatusCode -eq 200) {\n            $offlineContent = $offlineResponse.Content\n\n            # 404 sayfasƒ±nda PWA entegrasyonu kontrol√º\n            $offlineChecks = @(\n                @{ Name = "Service Worker"; Pattern = 'service-worker\.js' },\n                @{ Name = "Manifest link"; Pattern = 'rel="manifest"' },\n                @{ Name = "Offline mesaj"; Pattern = 'offline|√ßevrimdƒ±≈üƒ±|baƒülantƒ± yok' }\n            )\n\n            foreach ($check in $offlineChecks) {\n                if ($offlineContent -match $check.Pattern) {\n                    Write-Host "‚úÖ $($check.Name) mevcut" -ForegroundColor Green\n                } else {\n                    Write-Host "‚ö†Ô∏è $($check.Name) eksik" -ForegroundColor Yellow\n                }\n            }\n\n            Write-Host "‚úÖ 404.html offline fallback sayfasƒ± mevcut" -ForegroundColor Green\n            $testResults["OfflineFallback"] = $true\n        } else {\n            Write-Host "‚ùå 404.html offline fallback sayfasƒ± eksik" -ForegroundColor Red\n            $testResults["OfflineFallback"] = $false\n        }\n    } else {\n        Write-Host "‚è≠Ô∏è Offline testi atlandƒ±" -ForegroundColor Yellow\n        $testResults["OfflineFallback"] = $null\n    }\n}\ncatch {\n    Write-Host "‚ùå Offline fallback testi ba≈üarƒ±sƒ±z: $($_.Exception.Message)" -ForegroundColor Red\n    Write-TestLog "Offline testi hatasƒ±: $($_.Exception.Message)" "ERROR"\n    $testResults["OfflineFallback"] = $false\n}\n\n# =========================================\n# ANA SCRIPT SONU - RAPORLAMA VE √áIKI≈û\n# =========================================\n\n$endTime = Get-Date\n$duration = $endTime - $startTime\n\n# Test √∂zeti\nWrite-Host "`nüìä PWA Test √ñzeti:" -ForegroundColor Cyan\nWrite-Host "=" * 60 -ForegroundColor Cyan\nWrite-Host "‚è±Ô∏è Test s√ºresi: $($duration.TotalSeconds.ToString("F2")) saniye" -ForegroundColor Gray\n\n$validResults = $testResults.Values.Where({ $_ -ne $null })\n$passedTests = ($validResults | Where-Object { $_ -eq $true }).Count\n$totalValidTests = $validResults.Count\n$skippedTests = $testResults.Count - $totalValidTests\n\nif ($skippedTests -gt 0) {\n    Write-Host "‚è≠Ô∏è Atlanan testler: $skippedTests" -ForegroundColor Yellow\n}\n\n# Genel skor hesapla\n$pwaScore = [math]::Round((($manifestResult.Score + $swResult.Score + $htmlResult.TotalScore + $offlineResult.Score) / 400) * 100, 1)\n$legalScore = if ($legalResult) { [math]::Round(($legalResult.Score / 100) * 100, 1) } else { 0 }\n$seoScore = if ($seoResult) { [math]::Round(($seoResult.Score / 100) * 100, 1) } else { 0 }\n$totalScore = [math]::Round((($pwaScore + $legalScore + $seoScore) / 3), 1)\n\nWrite-Host "`nüìà Genel Skor:" -ForegroundColor White\nWrite-Host "  üéØ PWA Skoru: $pwaScore/100" -ForegroundColor Cyan\nif ($IncludeLegalTests) {\n    Write-Host "  ‚öñÔ∏è Legal Skoru: $legalScore/100" -ForegroundColor Cyan\n}\nif ($IncludeSEOTests) {\n    Write-Host "  üîç SEO Skoru: $seoScore/100" -ForegroundColor Cyan\n}\nWrite-Host "  üèÜ Toplam Skoru: $totalScore/100" -ForegroundColor Green\n\nWrite-Host "`nüìà Test Sonu√ßlarƒ±:" -ForegroundColor White\nforeach ($test in $testResults.GetEnumerator()) {\n    $status = switch ($test.Value) {\n        $true { "‚úÖ BA≈ûARILI" }\n        $false { "‚ùå BA≈ûARISIZ" }\n        $null { "‚è≠Ô∏è ATLADI" }\n        default { "‚ùì Bƒ∞Lƒ∞NMƒ∞YOR" }\n    }\n\n    $color = switch ($test.Value) {\n        $true { "Green" }\n        $false { "Red" }\n        $null { "Yellow" }\n        default { "Gray" }\n    }\n\n    Write-Host "  $($test.Key): $status" -ForegroundColor $color\n}\n\n# Ba≈üarƒ± deƒüerlendirmesi\nif ($passedTests -eq $totalValidTests -and $totalScore -ge 80) {\n    Write-Host "`nüéâ T√ºm PWA testleri ba≈üarƒ±lƒ±! Uygulamanƒ±z PWA √∂zelliklerine hazƒ±r." -ForegroundColor Green\n    Write-TestLog "T√ºm testler ba≈üarƒ±lƒ±" "SUCCESS"\n} elseif ($passedTests -ge ($totalValidTests * 0.7) -and $totalScore -ge 60) {\n    Write-Host "`n‚ö†Ô∏è √áoƒüu PWA testi ba≈üarƒ±lƒ±. K√º√ß√ºk iyile≈ütirmeler gerekebilir." -ForegroundColor Yellow\n    Write-TestLog "√áoƒüu test ba≈üarƒ±lƒ±, iyile≈ütirme gerekebilir" "WARN"\n} else {\n    Write-Host "`n‚ùå PWA testlerinin √ßoƒüu ba≈üarƒ±sƒ±z. Yapƒ±landƒ±rma kontrol√º gerekebilir." -ForegroundColor Red\n    Write-TestLog "√áoƒüu test ba≈üarƒ±sƒ±z" "ERROR"\n}\n\n# Dashboard olu≈ütur (eƒüer istenmi≈üse)\nif ($GenerateDashboard) {\n    Generate-PWADashboard -TestResults $testResults -LegalResults $legalResults -SEOResults $seoResults\n}\n\n# Badge olu≈ütur (test sonu√ßlarƒ±na g√∂re otomatik g√ºncellenir)\n$badgeResult = Generate-PWABadges -TestResults $testResults\n\nif ($badgeResult) {\n    Write-Host "`nüè∑Ô∏è Badge G√ºncelleme Detaylarƒ±:" -ForegroundColor Cyan\n    Write-Host "  üìä Ba≈üarƒ± Oranƒ±: $($badgeResult.SuccessRate)%" -ForegroundColor White\n    Write-Host "  üé® Badge Rengi: $($badgeResult.BadgeColor.ToUpper())" -ForegroundColor White\n    Write-Host "  ‚úÖ Ge√ßen Testler: $($badgeResult.PassedTests)" -ForegroundColor Green\n    Write-Host "  ‚ùå Ba≈üarƒ±sƒ±z Testler: $($badgeResult.FailedTests)" -ForegroundColor Red\n    Write-Host "  ‚è≠Ô∏è Atlanan Testler: $($badgeResult.SkippedTests)" -ForegroundColor Yellow\n    Write-Host "  üìÖ Son G√ºncelleme: $($badgeResult.LastUpdate)" -ForegroundColor Gray\n    Write-Host "  üìÑ Badge Dosyasƒ±: pwa-badges.md" -ForegroundColor White\n}\n\n# JSON Export\nif ($ExportJson) {\n    Export-TestResultsToJson -TestResults $testResults -LogMessages $logMessages -Duration $duration -LegalResults $legalResult -SEOResults $seoResult\n}\n\n# Test ge√ßmi≈üini kaydet\nSave-TestHistoryToJson -TestResults $testResults -LegalResults $legalResult -SEOResults $seoResult -Duration $duration\n\n# Test ge√ßmi≈üini veritabanƒ±na kaydet\nSave-TestToDatabase -TestResults $testResults -LegalResults $legalResult -SEOResults $seoResult -Duration $duration\n\n# Test ge√ßmi≈üini CSV'ye aktar\nExport-TestHistoryToCSV\n\n# Test ge√ßmi≈üini istatistikleri\n$historyStats = Get-TestHistoryStatistics\nif ($historyStats) {\n    Write-Host "`nüìà Ge√ßmi≈ü Analizi:" -ForegroundColor Magenta\n    Write-Host "  üìä Trend: $($historyStats.trend.direction) ($($historyStats.trend.change_percent)%)" -ForegroundColor White\n    Write-Host "  üìà Ortalama ba≈üarƒ±: $($historyStats.average_success_rate)%" -ForegroundColor White\n    if ($historyStats.legal_average) {\n        Write-Host "  ‚öñÔ∏è Legal ortalama: $($historyStats.legal_average)/100" -ForegroundColor White\n    }\n    if ($historyStats.seo_average) {\n        Write-Host "  üîç SEO ortalama: $($historyStats.seo_average)/100" -ForegroundColor White\n    }\n}\n\n# Test sonu√ßlarƒ±nƒ± ge√ßmi≈üe ar≈üivle\nif ($ExportJson) {\n    Archive-TestResultsToHistory -JsonResultsPath "pwa-test-results.json"\n}\n\n# Webhook bildirimi g√∂nder (eƒüer webhook URL'si varsa)\nif ($SlackWebhookUrl) {\n    Write-Host "`nüì¢ Slack webhook bildirimi g√∂nderiliyor..." -ForegroundColor Cyan\n    Send-WebhookNotification -WebhookUrl $SlackWebhookUrl -TestResults $testResults -LegalResults $legalResult -SEOResults $seoResult -Duration $duration -Platform "slack"\n}\n\nif ($DiscordWebhookUrl) {\n    Write-Host "`nüì¢ Discord webhook bildirimi g√∂nderiliyor..." -ForegroundColor Cyan\n    Send-WebhookNotification -WebhookUrl $DiscordWebhookUrl -TestResults $testResults -LegalResults $legalResult -SEOResults $seoResult -Duration $duration -Platform "discord"\n}\n\n# Final √∂zet ve badge rengi belirleme\nWrite-Host "`n‚úÖ PWA testi ba≈üarƒ±yla tamamlandƒ±!" -ForegroundColor Green\nif ($totalValidTests -gt 0) {\n    $successRate = [math]::Round(($passedTests / $totalValidTests) * 100, 1)\n    Write-Host "üìä Ba≈üarƒ± Oranƒ±: $passedTests/$totalValidTests ($successRate%)" -ForegroundColor Green\n\n    # Badge rengini belirle (kullanƒ±cƒ±nƒ±n istediƒüi aralƒ±klara g√∂re)\n    $badgeColor = switch ($successRate) {\n        { $_ -ge 90 } { "YE≈ûƒ∞L"; break }\n        { $_ -ge 70 } { "SARI"; break }\n        { $_ -ge 50 } { "TURUNCU"; break }\n        default { "KIRMIZI"; break }\n    }\n\n    Write-Host "üé® Otomatik Badge Rengi: $badgeColor (Son test skoruna g√∂re)" -ForegroundColor White\n} else {\n    Write-Host "üìä Ba≈üarƒ± Oranƒ±: $passedTests/$totalValidTests (0%)" -ForegroundColor Green\n    $badgeColor = "KIRMIZI"\n    Write-Host "üé® Otomatik Badge Rengi: $badgeColor (Test yapƒ±lamadƒ±)" -ForegroundColor White\n}\nWrite-Host "üèÜ Genel Skoru: $totalScore/100" -ForegroundColor Green\n\n# √ñneriler\nWrite-Host "`nüéØ ƒ∞yile≈ütirme √ñnerileri:" -ForegroundColor Magenta\nif ($failedTests -gt 0) {\n    Write-Host "  ‚Ä¢ Ba≈üarƒ±sƒ±z testleri d√ºzeltmek i√ßin manifest.json ve service-worker.js dosyalarƒ±nƒ± kontrol edin" -ForegroundColor White\n}\nif ($totalScore -lt 80) {\n    Write-Host "  ‚Ä¢ Genel skoru artƒ±rmak i√ßin PWA, legal ve SEO iyile≈ütirmelerini uygulayƒ±n" -ForegroundColor White\n}\nif ($IncludeLegalTests -and $legalResult -and $legalResult.Score -lt 70) {\n    Write-Host "  ‚Ä¢ Legal compliance i√ßin robots.txt, sitemap.xml ve privacy-policy.html dosyalarƒ±nƒ± kontrol edin" -ForegroundColor White\n}\nif ($IncludeSEOTests -and $seoResult -and $seoResult.Score -lt 60) {\n    Write-Host "  ‚Ä¢ SEO i√ßin meta etiketlerini ve structured data markup'larƒ±nƒ± optimize edin" -ForegroundColor White\n}\nWrite-Host "  ‚Ä¢ HTTPS kullanƒ±n ve g√ºvenlik ba≈ülƒ±klarƒ±nƒ± ekleyin" -ForegroundColor White\n\n# Kullanƒ±m √∂rnekleri\nWrite-Host "`nüîÑ Testi tekrar √ßalƒ±≈ütƒ±rmak i√ßin:" -ForegroundColor Cyan\nWrite-Host "  .\Test-PWA.ps1" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 -Verbose" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 -SkipNetworkTests" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 -ExportJson" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 -GenerateDashboard" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 -IncludeLegalTests -IncludeSEOTests" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 --slack-webhook=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 --discord-webhook=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK" -ForegroundColor White\nWrite-Host "  .\Test-PWA.ps1 https://kesifapp.com -Verbose -ExportJson -GenerateDashboard --slack-webhook=URL" -ForegroundColor White\n\n# Environment variables i√ßin √∂rnekler\nWrite-Host "`nüåç Environment Variables:" -ForegroundColor Cyan\nWrite-Host "  \$env:PWA_SLACK_WEBHOOK = 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'" -ForegroundColor White\nWrite-Host "  \$env:PWA_DISCORD_WEBHOOK = 'https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK'" -ForegroundColor White\n\nWrite-Host "`n" + ("‚ïê" * 60) -ForegroundColor Cyan\nWrite-Host "üöÄ Kesif Uygulamasƒ± PWA Testi Tamamlandƒ±" -ForegroundColor Cyan\nWrite-Host ("‚ïê" * 60) -ForegroundColor Cyan\n\n# =========================================\n# BA≈ûARISIZ TESTLERƒ∞ ANALƒ∞Z MOD√úL√ú\n# =========================================\n\nfunction Analyze-FailedTests {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [string]$OutputPath = "pwa-test-results.json"\n    )\n\n    Write-Host "`nüîç Ba≈üarƒ±sƒ±z Testler Analizi:" -ForegroundColor Magenta\n    Write-Host "=" * 60 -ForegroundColor Magenta\n\n    $failedTests = @{}\n    $suggestions = @{}\n\n    foreach ($test in $TestResults.GetEnumerator()) {\n        if ($test.Value -eq $false) {\n            $failedTests[$test.Key] = $true\n            $suggestions[$test.Key] = Get-TestFailureAnalysis -TestName $test.Key\n        }\n    }\n\n    if ($failedTests.Count -eq 0) {\n        Write-Host "‚úÖ T√ºm testler ba≈üarƒ±lƒ±! Analiz gerekli deƒüil." -ForegroundColor Green\n        return @{ FailedTests = @{}; Suggestions = @{} }\n    }\n\n    Write-Host "‚ùå Bulunan ba≈üarƒ±sƒ±z test sayƒ±sƒ±: $($failedTests.Count)" -ForegroundColor Red\n    Write-Host "" -ForegroundColor White\n\n    foreach ($testName in $failedTests.Keys) {\n        $analysis = $suggestions[$testName]\n        Write-Host "üî¥ $testName Testi Ba≈üarƒ±sƒ±z:" -ForegroundColor Red\n        Write-Host "   üìù Hata: $($analysis.ErrorMessage)" -ForegroundColor White\n        Write-Host "   üîç Olasƒ± Nedenler:" -ForegroundColor Yellow\n\n        foreach ($reason in $analysis.PossibleCauses) {\n            Write-Host "      ‚Ä¢ $reason" -ForegroundColor Gray\n        }\n\n        Write-Host "   üõ†Ô∏è √ñnerilen D√ºzeltmeler:" -ForegroundColor Cyan\n        foreach ($fix in $analysis.RecommendedFixes) {\n            Write-Host "      ‚Ä¢ $fix" -ForegroundColor White\n        }\n\n        Write-Host "   üìö Kaynaklar:" -ForegroundColor Green\n        foreach ($resource in $analysis.Resources) {\n            Write-Host "      ‚Ä¢ $resource" -ForegroundColor Gray\n        }\n\n        Write-Host "" -ForegroundColor White\n        Write-TestLog "Failed test analysis: $testName - $($analysis.ErrorMessage)"\n    }\n\n    # JSON dosyasƒ±na √∂nerileri ekle\n    if (Test-Path $OutputPath) {\n        try {\n            $jsonContent = Get-Content $OutputPath -Raw | ConvertFrom-Json\n\n            # Suggestions alanƒ±nƒ± ekle\n            $jsonContent | Add-Member -MemberType NoteProperty -Name "suggestions" -Value $suggestions -Force\n\n            # Analysis summary ekle\n            $analysisSummary = @{\n                total_failed_tests = $failedTests.Count\n                analysis_timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n                critical_issues = ($suggestions.Values | Where-Object { $_.Severity -eq "Critical" }).Count\n                warning_issues = ($suggestions.Values | Where-Object { $_.Severity -eq "Warning" }).Count\n                info_issues = ($suggestions.Values | Where-Object { $_.Severity -eq "Info" }).Count\n            }\n\n            $jsonContent | Add-Member -MemberType NoteProperty -Name "failure_analysis" -Value $analysisSummary -Force\n\n            $jsonContent | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputPath -Encoding UTF8\n            Write-Host "üìÑ Test sonu√ßlarƒ±na √∂neriler eklendi: $OutputPath" -ForegroundColor Green\n            Write-TestLog "Suggestions added to JSON results: $OutputPath"\n        }\n        catch {\n            Write-Host "‚ùå JSON dosyasƒ±na √∂neriler eklenemedi: $($_.Exception.Message)" -ForegroundColor Red\n            Write-TestLog "Failed to add suggestions to JSON: $($_.Exception.Message)" "ERROR"\n        }\n    }\n\n    # README dosyasƒ±na ba≈üarƒ±sƒ±zlƒ±k √∂zetini ekle\n    Update-READMEWithTrendReport -TestResults $testResults -TrendAnalysis $trendAnalysis\n\n    return @{\n        FailedTests = $failedTests\n        Suggestions = $suggestions\n        AnalysisCount = $failedTests.Count\n    }\n}\n\nfunction Get-TestFailureAnalysis {\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$TestName\n    )\n\n    $analysis = @{\n        ErrorMessage = ""\n        PossibleCauses = @()\n        RecommendedFixes = @()\n        Resources = @()\n        Severity = "Warning"\n    }\n\n    switch ($TestName) {\n        "Manifest" {\n            $analysis.ErrorMessage = "PWA manifest dosyasƒ± bulunamadƒ± veya ge√ßersiz"\n            $analysis.PossibleCauses = @(\n                "manifest.json dosyasƒ± sunucuda mevcut deƒüil",\n                "manifest.json dosyasƒ± yanlƒ±≈ü konumda",\n                "manifest.json dosyasƒ± bozuk JSON formatƒ±nda",\n                "Gerekli manifest alanlarƒ± eksik",\n                "manifest.json dosyasƒ± HTTPS √ºzerinden eri≈üilebilir deƒüil"\n            )\n            $analysis.RecommendedFixes = @(\n                "Proje k√∂k dizininize manifest.json dosyasƒ± olu≈üturun",\n                "Gerekli alanlarƒ± ekleyin: name, short_name, start_url, display, icons",\n                "manifest.json dosyasƒ±nƒ± HTML'de <link rel='manifest' href='/manifest.json'> ile baƒülayƒ±n",\n                "Manifest dosyasƒ±nƒ±n ge√ßerli JSON formatƒ±nda olduƒüundan emin olun",\n                "Tarayƒ±cƒ± geli≈ütirici ara√ßlarƒ±nda Application > Manifest b√∂l√ºm√ºn√º kontrol edin"\n            )\n            $analysis.Resources = @(\n                "https://developer.mozilla.org/en-US/docs/Web/Manifest",\n                "https://web.dev/add-manifest/",\n                "https://developers.google.com/web/fundamentals/web-app-manifest"\n            )\n            $analysis.Severity = "Critical"\n        }\n\n        "ServiceWorker" {\n            $analysis.ErrorMessage = "Service Worker dosyasƒ± bulunamadƒ± veya eksik i≈ülevsellik"\n            $analysis.PossibleCauses = @(\n                "service-worker.js dosyasƒ± sunucuda mevcut deƒüil",\n                "Service Worker gerekli event handler'larƒ± i√ßermiyor",\n                "Service Worker kayƒ±t edilemedi",\n                "HTTPS protokol√º kullanƒ±lmƒ±yor",\n                "Service Worker scope hatasƒ±"\n            )\n            $analysis.RecommendedFixes = @(\n                "service-worker.js dosyasƒ±nƒ± proje k√∂k dizinine olu≈üturun",\n                "Gerekli event handler'larƒ± ekleyin: install, activate, fetch",\n                "Cache management i≈ülevselliƒüi ekleyin",\n                "HTML'de Service Worker'ƒ± kaydedin: navigator.serviceWorker.register('/service-worker.js')",\n                "Tarayƒ±cƒ± geli≈ütirici ara√ßlarƒ±nda Application > Service Workers b√∂l√ºm√ºn√º kontrol edin"\n            )\n            $analysis.Resources = @(\n                "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",\n                "https://web.dev/service-workers/",\n                "https://developers.google.com/web/fundamentals/primers/service-workers"\n            )\n            $analysis.Severity = "Critical"\n        }\n\n        "Ana Sayfa" {\n            $analysis.ErrorMessage = "Ana sayfa PWA entegrasyonu eksik veya hatalƒ±"\n            $analysis.PossibleCauses = @(\n                "HTML dosyasƒ±nda PWA meta etiketleri eksik",\n                "Manifest baƒülantƒ±sƒ± hatalƒ±",\n                "Service Worker kaydƒ± eksik",\n                "Viewport meta etiketi eksik",\n                "Theme color tanƒ±mlanmamƒ±≈ü"\n            )\n            $analysis.RecommendedFixes = @(\n                "<link rel='manifest' href='/manifest.json'> etiketini ekleyin",\n                "<meta name='theme-color' content='#ffffff'> etiketini ekleyin",\n                "<meta name='viewport' content='width=device-width, initial-scale=1'> etiketini ekleyin",\n                "Service Worker kayƒ±t script'ini ekleyin",\n                "Apple touch icon'larƒ± ekleyin"\n            )\n            $analysis.Resources = @(\n                "https://web.dev/add-manifest/",\n                "https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Add_to_home_screen"\n            )\n            $analysis.Severity = "Critical"\n        }\n\n        "Yasal Sayfa" {\n            $analysis.ErrorMessage = "Yasal sayfa bulunamadƒ± veya PWA entegrasyonu eksik"\n            $analysis.PossibleCauses = @(\n                "legal.html dosyasƒ± mevcut deƒüil",\n                "Yasal sayfa PWA meta etiketlerini i√ßermiyor",\n                "Sayfa HTTPS √ºzerinden eri≈üilebilir deƒüil"\n            )\n            $analysis.RecommendedFixes = @(\n                "legal.html dosyasƒ±nƒ± olu≈üturun",\n                "PWA meta etiketlerini ekleyin",\n                "Sayfanƒ±n HTTPS √ºzerinden eri≈üilebilir olduƒüundan emin olun",\n                "Gerekli yasal i√ßerikleri ekleyin"\n            )\n            $analysis.Resources = @(\n                "https://web.dev/add-manifest/",\n                "https://developers.google.com/web/fundamentals/web-app-manifest"\n            )\n            $analysis.Severity = "Warning"\n        }\n\n        "Gizlilik Sayfasƒ±" {\n            $analysis.ErrorMessage = "Gizlilik sayfasƒ± bulunamadƒ± veya PWA entegrasyonu eksik"\n            $analysis.PossibleCauses = @(\n                "privacy-policy.html dosyasƒ± mevcut deƒüil",\n                "Gizlilik sayfasƒ± PWA meta etiketlerini i√ßermiyor",\n                "Sayfa HTTPS √ºzerinden eri≈üilebilir deƒüil"\n            )\n            $analysis.RecommendedFixes = @(\n                "privacy-policy.html dosyasƒ±nƒ± olu≈üturun",\n                "PWA meta etiketlerini ekleyin",\n                "Sayfanƒ±n HTTPS √ºzerinden eri≈üilebilir olduƒüundan emin olun",\n                "GDPR uyumlu gizlilik politikasƒ± i√ßeriƒüi ekleyin"\n            )\n            $analysis.Resources = @(\n                "https://web.dev/add-manifest/",\n                "https://developers.google.com/web/fundamentals/web-app-manifest"\n            )\n            $analysis.Severity = "Warning"\n        }\n\n        "404 Sayfasƒ±" {\n            $analysis.ErrorMessage = "404 sayfasƒ± bulunamadƒ± veya PWA entegrasyonu eksik"\n            $analysis.PossibleCauses = @(\n                "404.html dosyasƒ± mevcut deƒüil",\n                "404 sayfasƒ± PWA meta etiketlerini i√ßermiyor",\n                "Sayfa HTTPS √ºzerinden eri≈üilebilir deƒüil"\n            )\n            $analysis.RecommendedFixes = @(\n                "404.html dosyasƒ±nƒ± olu≈üturun",\n                "PWA meta etiketlerini ekleyin",\n                "Sayfanƒ±n HTTPS √ºzerinden eri≈üilebilir olduƒüundan emin olun",\n                "Kullanƒ±cƒ± dostu 404 i√ßeriƒüi ekleyin"\n            )\n            $analysis.Resources = @(\n                "https://web.dev/add-manifest/",\n                "https://developers.google.com/web/fundamentals/web-app-manifest"\n            )\n            $analysis.Severity = "Info"\n        }\n\n        "OfflineFallback" {\n            $analysis.ErrorMessage = "Offline fallback sayfasƒ± bulunamadƒ±"\n            $analysis.PossibleCauses = @(\n                "offline.html dosyasƒ± mevcut deƒüil",\n                "Service Worker'da offline fallback tanƒ±mlanmamƒ±≈ü",\n                "Cache strategy hatalƒ±"\n            )\n            $analysis.RecommendedFixes = @(\n                "offline.html fallback sayfasƒ± olu≈üturun",\n                "Service Worker'da offline event handler'ƒ± ekleyin",\n                "Cache-first strategy uygulayƒ±n",\n                "Tarayƒ±cƒ± geli≈ütirici ara√ßlarƒ±nda offline modunu test edin"\n            )\n            $analysis.Resources = @(\n                "https://web.dev/offline-fallback-page/",\n                "https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook"\n            )\n            $analysis.Severity = "Warning"\n        }\n\n        default {\n            $analysis.ErrorMessage = "Bilinmeyen test hatasƒ±"\n            $analysis.PossibleCauses = @("Test t√ºr√º tanƒ±mlanamadƒ±")\n            $analysis.RecommendedFixes = @("Test kodunu kontrol edin", "Hata mesajlarƒ±nƒ± inceleyin")\n            $analysis.Resources = @("https://web.dev/progressive-web-apps/")\n            $analysis.Severity = "Info"\n        }\n    }\n\n    return $analysis\n}\n\nfunction Update-READMEWithTrendReport {\n    param(\n        [Parameter(Mandatory = $true)]\n        [hashtable]$TestResults,\n        [Parameter(Mandatory = $false)]\n        [hashtable]$TrendAnalysis = $null,\n        [Parameter(Mandatory = $false)]\n        [string]$ReadmePath = "README.md"\n    )\n\n    Write-Host "`nüìù README.md Trend Raporu ile g√ºncelleniyor..." -ForegroundColor Cyan\n\n    # README.md dosyasƒ±nƒ± oku\n    if (-not (Test-Path $ReadmePath)) {\n        Write-Warning "README.md dosyasƒ± bulunamadƒ±: $ReadmePath"\n        return $false\n    }\n\n    $readmeContent = Get-Content $ReadmePath -Raw\n\n    # Trend rapor b√∂l√ºm√º olu≈ütur\n    $trendReportSection = ""\n    if ($TrendAnalysis) {\n        $trendReportSection = @"\n\n## ÔøΩ Trend Raporu\n\n### Son 5 Test Analizi\n| Metrik | Deƒüer | Trend |\n|--------|-------|-------|\n| Ortalama Ba≈üarƒ± Oranƒ± | $(if ($TrendAnalysis.average_last_5) { $TrendAnalysis.average_last_5 } else { 'N/A' })% | $(if ($TrendAnalysis.direction) { $TrendAnalysis.direction } else { 'stable' }) |\n| Deƒüi≈üim Oranƒ± | $(if ($TrendAnalysis.change_percent) { $TrendAnalysis.change_percent } else { 0 })% | $(if ($TrendAnalysis.direction) { $TrendAnalysis.direction } else { 'stable' }) |\n| Trend G√ºvenilirliƒüi | $(if ($TrendAnalysis.confidence) { $TrendAnalysis.confidence } else { 'N/A' }) | - |\n| Test Sayƒ±sƒ± | $(if ($TrendAnalysis.test_count) { $TrendAnalysis.test_count } else { 0 }) | - |\n\n### Trend G√∂rselle≈ütirme\n```\nSon 5 Test Ba≈üarƒ± Oranlarƒ±:\n$(($TrendAnalysis.last_5_rates | ForEach-Object { "$_%" }) -join ' ‚Üí ')\n```\n\n**Trend Y√∂n√º:** $(if ($TrendAnalysis.direction) { $TrendAnalysis.direction } else { 'stable' })\n**Son Test:** $(if ($TestResults.summary.success_rate) { $TestResults.summary.success_rate } else { 0 })%\n**Trend G√∂stergesi:** $(switch ($TrendAnalysis.direction) {\n    "improving" { "üìà ƒ∞yile≈üen" }\n    "declining" { "üìâ D√º≈üen" }\n    default { "‚û°Ô∏è Stabil" }\n})\n\n---\n"@\n    }\n\n    # Ba≈üarƒ±sƒ±zlƒ±k analizi b√∂l√ºm√º\n    $failureAnalysisSection = ""\n    if ($TestResults.failed_tests -and $TestResults.failed_tests.Count -gt 0) {\n        $failureAnalysisSection = @"\n\n## ‚ùå Ba≈üarƒ±sƒ±zlƒ±k Analizi\n\n### Kritik Sorunlar\n$($TestResults.failed_tests | ForEach-Object {\n    "### $($_.test_name)\n- **Hata:** $($_.error_message)\n- **√ñneri:** $($_.suggestion)\n- **√ñnem Derecesi:** $(switch ($_.severity) {\n        "critical" { "üî¥ Kritik" }\n        "high" { "üü† Y√ºksek" }\n        "medium" { "üü° Orta" }\n        default { "üü¢ D√º≈ü√ºk" }\n    })\n- **Kategori:** $(if ($_.category) { $_.category } else { 'Genel' })\n\n"\n} | Out-String)\n\n### ƒ∞yile≈ütirme √ñnerileri\n1. **Hƒ±zlƒ± D√ºzeltmeler:** Kritik hatalarƒ± √∂ncelikli olarak giderin\n2. **Performans Optimizasyonu:** Sayfa y√ºkleme hƒ±zƒ±nƒ± iyile≈ütirin\n3. **SEO Uyumluluƒüu:** Meta etiketleri ve yapƒ±landƒ±rƒ±lmƒ±≈ü verileri kontrol edin\n4. **G√ºvenlik:** HTTPS ve g√ºvenlik ba≈ülƒ±klarƒ±nƒ± doƒürulayƒ±n\n\n---\n"@\n    }\n\n    # Test √∂zeti b√∂l√ºm√º\n    $testSummarySection = @"\n\n## üß™ PWA Test Sonu√ßlarƒ±\n\n### Son Test √ñzeti\n- **Tarih:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")\n- **Ba≈üarƒ± Oranƒ±:** $(if ($TestResults.summary.success_rate) { $TestResults.summary.success_rate } else { 0 })%\n- **Ge√ßen Testler:** $(if ($TestResults.summary.passed_tests) { $TestResults.summary.passed_tests } else { 0 })\n- **Ba≈üarƒ±sƒ±z Testler:** $(if ($TestResults.summary.failed_tests) { $TestResults.summary.failed_tests } else { 0 })\n- **Atlanan Testler:** $(if ($TestResults.summary.skipped_tests) { $TestResults.summary.skipped_tests } else { 0 })\n- **Toplam Testler:** $(if ($TestResults.summary.total_tests) { $TestResults.summary.total_tests } else { 0 })\n- **Test S√ºresi:** $(if ($TestResults.summary.duration_seconds) { $TestResults.summary.duration_seconds } else { 0 }) saniye\n- **Script Versiyonu:** $(if ($TestResults.script_version) { $TestResults.script_version } else { 'N/A' })\n\n### Test Kategorileri\n| Kategori | Ge√ßen | Ba≈üarƒ±sƒ±z | Toplam |\n|----------|-------|-----------|--------|\n| Temel PWA | $(if ($TestResults.categories.basic.passed) { $TestResults.categories.basic.passed } else { 0 }) | $(if ($TestResults.categories.basic.failed) { $TestResults.categories.basic.failed } else { 0 }) | $(if ($TestResults.categories.basic.total) { $TestResults.categories.basic.total } else { 0 }) |\n| Performans | $(if ($TestResults.categories.performance.passed) { $TestResults.categories.performance.passed } else { 0 }) | $(if ($TestResults.categories.performance.failed) { $TestResults.categories.performance.failed } else { 0 }) | $(if ($TestResults.categories.performance.total) { $TestResults.categories.performance.total } else { 0 }) |\n| G√ºvenlik | $(if ($TestResults.categories.security.passed) { $TestResults.categories.security.passed } else { 0 }) | $(if ($TestResults.categories.security.failed) { $TestResults.categories.security.failed } else { 0 }) | $(if ($TestResults.categories.security.total) { $TestResults.categories.security.total } else { 0 }) |\n| SEO | $(if ($TestResults.categories.seo.passed) { $TestResults.categories.seo.passed } else { 0 }) | $(if ($TestResults.categories.seo.failed) { $TestResults.categories.seo.failed } else { 0 }) | $(if ($TestResults.categories.seo.total) { $TestResults.categories.seo.total } else { 0 }) |\n| Yasal | $(if ($TestResults.categories.legal.passed) { $TestResults.categories.legal.passed } else { 0 }) | $(if ($TestResults.categories.legal.failed) { $TestResults.categories.legal.failed } else { 0 }) | $(if ($TestResults.categories.legal.total) { $TestResults.categories.legal.total } else { 0 }) |\n\n$trendReportSection$failureAnalysisSection\n\n### Detaylƒ± Test Sonu√ßlarƒ±\n```json\n$($TestResults.detailed_results | ConvertTo-Json -Depth 4)\n```\n\n### Sistem Bilgileri\n- **Test Ortamƒ±:** $(if ($TestResults.system_info.hostname) { $TestResults.system_info.hostname } else { $env:COMPUTERNAME })\n- **Kullanƒ±cƒ±:** $(if ($TestResults.system_info.username) { $TestResults.system_info.username } else { $env:USERNAME })\n- **PowerShell Versiyonu:** $($PSVersionTable.PSVersion.ToString())\n- **OS:** $([System.Environment]::OSVersion.VersionString)\n\n---\n*Bu rapor otomatik olarak olu≈üturulmu≈ütur - $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")*\n*Sonraki otomatik test: $(Get-Date).AddDays(7).ToString("yyyy-MM-dd 09:00"))*\n*Test Script Versiyonu: $(if ($TestResults.script_version) { $TestResults.script_version } else { '4.0' })*\n\n"@\n\n    # Eski test sonu√ßlarƒ±nƒ± temizle\n    $pattern = "(?s)## üß™ PWA Test Sonu√ßlarƒ±.*?\*Test Script Versiyonu:.*?\*"\n    if ($readmeContent -match $pattern) {\n        $readmeContent = $readmeContent -replace $pattern, ""\n        Write-Host "üßπ Eski test sonu√ßlarƒ± temizlendi" -ForegroundColor Yellow\n    }\n\n    # Yeni i√ßeriƒüi ekle\n    $updatedContent = $readmeContent + $testSummarySection\n\n    # README.md'yi g√ºncelle\n    $updatedContent | Out-File -FilePath $ReadmePath -Encoding UTF8\n\n    Write-Host "‚úÖ README.md trend raporu ile g√ºncellendi: $ReadmePath" -ForegroundColor Green\n    Write-Host "üìä Trend y√∂n√º: $(if ($TrendAnalysis.direction) { $TrendAnalysis.direction } else { 'stable' })" -ForegroundColor White\n    Write-Host "üìà Ba≈üarƒ± oranƒ±: $(if ($TestResults.summary.success_rate) { $TestResults.summary.success_rate } else { 0 })%" -ForegroundColor White\n\n    Write-TestLog "README.md updated with trend report: $ReadmePath (Success Rate: $(if ($TestResults.summary.success_rate) { $TestResults.summary.success_rate } else { 0 })%, Trend: $(if ($TrendAnalysis.direction) { $TrendAnalysis.direction } else { 'stable' }))"\n\n    return $true\n}\n\n# Ana test akƒ±≈üƒ±nƒ±n sonuna trend raporu ve ba≈üarƒ±sƒ±zlƒ±k analizi ekle\n$failureAnalysis = Analyze-FailedTests -TestResults $testResults\n\n# Trend analizini al\n$trendAnalysis = Get-TestHistoryStatistics\n\n# README.md'yi trend raporu ile g√ºncelle\nUpdate-READMEWithTrendReport -TestResults $testResults -TrendAnalysis $trendAnalysis\n\n# Test tamamlandƒ± mesajƒ±\nWrite-Host "`nüéâ PWA Test Otomasyonu Tamamlandƒ±!" -ForegroundColor Green\nWrite-Host "üìä Sonu√ßlar kaydedildi ve raporlar g√ºncellendi" -ForegroundColor White\nWrite-Host "üìà Trend analizi: $(if ($trendAnalysis.direction) { $trendAnalysis.direction } else { 'stable' })" -ForegroundColor White\nWrite-Host "üè∑Ô∏è Badge'ler g√ºncellendi ve README.md'ye eklendi" -ForegroundColor White\n\n# Webhook bildirimleri g√∂nder\nif ($SlackWebhook -or $DiscordWebhook) {\n    Send-WebhookNotification -TestResults $testResults -TrendAnalysis $trendAnalysis\n}\n\nWrite-TestLog "PWA Test Automation completed successfully"\n