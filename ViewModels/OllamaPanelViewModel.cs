using System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\nusing System.Windows.Input;\nusing KesifUygulamasiTemplate.Services;\n\nnamespace KesifUygulamasiTemplate.ViewModels\n{\n    public class OllamaPanelViewModel : INotifyPropertyChanged\n    {\n        private readonly OllamaService _ollamaService;\n        private string _soru;\n        private string _cevap;\n        private bool _panelAcik = false;\n\n        public string Soru\n        {\n            get => _soru;\n            set { _soru = value; OnPropertyChanged(); }\n        }\n\n        public string Cevap\n        {\n            get => _cevap;\n            set { _cevap = value; OnPropertyChanged(); }\n        }\n\n        public bool PanelAcik\n        {\n            get => _panelAcik;\n            set { _panelAcik = value; OnPropertyChanged(); }\n        }\n\n        public ICommand SoruSorCommand { get; }\n        public ICommand PanelToggleCommand { get; }\n\n        public OllamaPanelViewModel()\n        {\n            _ollamaService = new OllamaService();\n            SoruSorCommand = new Command(async () => await SoruSor());\n            PanelToggleCommand = new Command(() => PanelAcik = !PanelAcik);\n        }\n\n        private async Task SoruSor()\n        {\n            if (!string.IsNullOrWhiteSpace(Soru))\n            {\n                Cevap = "⏳ Yanıt bekleniyor...";\n                try\n                {\n                    Cevap = await _ollamaService.SoruSorAsync(Soru);\n                }\n                catch (Exception ex)\n                {\n                    Cevap = $"⚠️ Hata: {ex.Message}";\n                }\n            }\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)\n            => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\n