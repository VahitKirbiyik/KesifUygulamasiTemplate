using System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\nusing System.Windows.Input;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Services;\nusing Microsoft.Maui.Controls;\n\n// Alias for Services namespace classes to avoid conflicts\nusing TrafficInfo = KesifUygulamasiTemplate.Services.TrafficInfo;\nusing TrafficIncident = KesifUygulamasiTemplate.Services.TrafficIncident;\n\nnamespace KesifUygulamasiTemplate.ViewModels\n{\n    public class RouteViewModel : INotifyPropertyChanged\n    {\n        private LocationModel? _startLocation;\n        private LocationModel? _endLocation;\n        private ObservableCollection<LocationModel> _routePoints;\n        private bool _isBusy;\n        private string _errorMessage;\n        private ObservableCollection<TrafficInfo> _trafficData;\n        private ObservableCollection<TrafficIncident> _trafficIncidents;\n        private string _trafficWarningMessage;\n        private bool _hasTrafficWarnings;\n        private TimeSpan _estimatedDelay;\n        private TrafficSeverity _currentCongestionLevel;\n\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        public LocationModel? StartLocation\n        {\n            get => _startLocation;\n            set\n            {\n                _startLocation = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public LocationModel? EndLocation\n        {\n            get => _endLocation;\n            set\n            {\n                _endLocation = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public ObservableCollection<LocationModel> RoutePoints\n        {\n            get => _routePoints;\n            set\n            {\n                _routePoints = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public bool IsBusy\n        {\n            get => _isBusy;\n            set\n            {\n                _isBusy = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public string ErrorMessage\n        {\n            get => _errorMessage;\n            set\n            {\n                _errorMessage = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public ObservableCollection<TrafficInfo> TrafficData\n        {\n            get => _trafficData;\n            set\n            {\n                _trafficData = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public ObservableCollection<TrafficIncident> TrafficIncidents\n        {\n            get => _trafficIncidents;\n            set\n            {\n                _trafficIncidents = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public string TrafficWarningMessage\n        {\n            get => _trafficWarningMessage;\n            set\n            {\n                _trafficWarningMessage = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public bool HasTrafficWarnings\n        {\n            get => _hasTrafficWarnings;\n            set\n            {\n                _hasTrafficWarnings = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public KesifUygulamasiTemplate.Services.Interfaces.RouteOptimizationType SelectedOptimizationType { get; set; } = KesifUygulamasiTemplate.Services.Interfaces.RouteOptimizationType.Fastest;\n        \n        private string _currentProvider = "Offline";\n        public string CurrentProvider\n        {\n            get => _currentProvider;\n            set\n            {\n                _currentProvider = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public ObservableCollection<string> OptimizationTypes { get; } = new()\n        {\n            "Fastest",\n            "Shortest", \n            "Eco",\n            "Safe"\n        };\n\n        public string SelectedOptimizationTypeString\n        {\n            get => SelectedOptimizationType.ToString();\n            set\n            {\n                if (Enum.TryParse<KesifUygulamasiTemplate.Services.Interfaces.RouteOptimizationType>(value, out var type))\n                {\n                    SelectedOptimizationType = type;\n                    OnPropertyChanged();\n                }\n            }\n        }\n\n        public TimeSpan EstimatedDelay\n        {\n            get => _estimatedDelay;\n            set\n            {\n                _estimatedDelay = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public TrafficSeverity CurrentCongestionLevel\n        {\n            get => _currentCongestionLevel;\n            set\n            {\n                _currentCongestionLevel = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public ICommand GetRouteCommand { get; }\n        public ICommand GenerateRouteCommand { get; }\n        public ICommand RefreshTrafficCommand { get; }\n\n        private readonly IRouteService _routeService;\n        private readonly ITrafficService _trafficService;\n\n        public RouteViewModel(IRouteService routeService, ITrafficService trafficService)\n        {\n            _routeService = routeService ?? throw new ArgumentNullException(nameof(routeService));\n            _trafficService = trafficService ?? throw new ArgumentNullException(nameof(trafficService));\n            _routePoints = new ObservableCollection<LocationModel>();\n            _errorMessage = string.Empty;\n            _trafficData = new ObservableCollection<TrafficInfo>();\n            _trafficIncidents = new ObservableCollection<TrafficIncident>();\n            _trafficWarningMessage = string.Empty;\n            _hasTrafficWarnings = false;\n            _estimatedDelay = TimeSpan.Zero;\n            _currentCongestionLevel = TrafficSeverity.Low;\n            GetRouteCommand = new Command(async () => await GenerateRouteAsync());\n            GenerateRouteCommand = new Command(async () => await GenerateRouteAsync());\n            RefreshTrafficCommand = new Command(async () => await RefreshTrafficAsync());\n        }\n\n        public RouteViewModel()\n        {\n            _routeService = null!;\n            _trafficService = null!;\n            _routePoints = new ObservableCollection<LocationModel>();\n            _errorMessage = string.Empty;\n            _trafficData = new ObservableCollection<TrafficInfo>();\n            _trafficIncidents = new ObservableCollection<TrafficIncident>();\n            _trafficWarningMessage = string.Empty;\n            _hasTrafficWarnings = false;\n            _estimatedDelay = TimeSpan.Zero;\n            _currentCongestionLevel = TrafficSeverity.Low;\n            GetRouteCommand = new Command(async () => await GenerateRouteAsync());\n            GenerateRouteCommand = new Command(async () => await GenerateRouteAsync());\n            RefreshTrafficCommand = new Command(async () => await RefreshTrafficAsync());\n        }\n\n        private async Task GenerateRouteAsync()\n        {\n            if (StartLocation == null || EndLocation == null)\n            {\n                ErrorMessage = "Başlangıç ve bitiş noktalarını belirtin";\n                return;\n            }\n\n            IsBusy = true;\n            ErrorMessage = string.Empty;\n\n            try\n            {\n                // Route generation logic with optimization type\n                if (_routeService != null && StartLocation != null && EndLocation != null)\n                {\n                    var route = await _routeService.GetRouteAsync(StartLocation, EndLocation, SelectedOptimizationType);\n                    RoutePoints.Clear();\n                    foreach (var point in route)\n                    {\n                        RoutePoints.Add(point);\n                    }\n                    \n                    // Update current provider from service\n                    CurrentProvider = _routeService.CurrentProvider;\n                }\n                else\n                {\n                    // Fallback to simple route\n                    RoutePoints.Clear();\n                    if (StartLocation != null && EndLocation != null)\n                    {\n                        RoutePoints.Add(StartLocation);\n                        RoutePoints.Add(EndLocation);\n                    }\n                }\n\n                // Trafik verilerini yükle\n                await LoadTrafficDataAsync();\n            }\n            catch (Exception ex)\n            {\n                ErrorMessage = $"Rota oluşturma hatası: {ex.Message}";\n            }\n            finally\n            {\n                IsBusy = false;\n            }\n        }\n\n        private async Task RefreshTrafficAsync()\n        {\n            if (RoutePoints.Count < 2)\n            {\n                ErrorMessage = "Önce rota oluşturun";\n                return;\n            }\n\n            IsBusy = true;\n            ErrorMessage = string.Empty;\n\n            try\n            {\n                await LoadTrafficDataAsync();\n            }\n            catch (Exception ex)\n            {\n                ErrorMessage = $"Trafik verisi güncelleme hatası: {ex.Message}";\n            }\n            finally\n            {\n                IsBusy = false;\n            }\n        }\n\n        private async Task LoadTrafficDataAsync()\n        {\n            if (_trafficService == null || RoutePoints.Count < 2)\n                return;\n\n            try\n            {\n                // Trafik verilerini al\n                var routeList = RoutePoints.ToList();\n                var delayInfo = await _trafficService.CalculateRouteDelaysAsync(routeList);\n                var warnings = await _trafficService.GetTrafficWarningsAsync(routeList);\n\n                // UI'yi güncelle\n                TrafficData.Clear();\n                TrafficIncidents.Clear();\n\n                // Trafik bilgilerini ekle\n                var trafficInfo = new TrafficInfo\n                {\n                    Location = RoutePoints.FirstOrDefault() ?? new LocationModel { Latitude = 0, Longitude = 0 },\n                    TrafficLevel = delayInfo.TotalDelayMinutes > 10 ? TrafficLevel.Heavy :\n                                   delayInfo.TotalDelayMinutes > 5 ? TrafficLevel.Moderate : TrafficLevel.Normal,\n                    TravelTimeMinutes = delayInfo.TotalDelayMinutes + 10, // Tahmini toplam süre\n                    NormalTimeMinutes = 10, // Tahmini normal süre\n                    IsDataAvailable = true,\n                    Message = delayInfo.TotalDelayMinutes > 0 ? $"Trafik nedeniyle {delayInfo.TotalDelayMinutes:F1} dakika gecikme" : "Normal trafik koşulları",\n                    Timestamp = DateTime.Now\n                };\n                TrafficData.Add(trafficInfo);\n\n                // Trafik uyarılarını işle\n                if (warnings.Any())\n                {\n                    HasTrafficWarnings = true;\n                    TrafficWarningMessage = string.Join("\n", warnings.Select(w => w.Message));\n                    \n                    // En yüksek önem derecesini al\n                    var maxSeverity = warnings.Max(w => w.Severity);\n                    CurrentCongestionLevel = maxSeverity switch\n                    {\n                        KesifUygulamasiTemplate.Services.TrafficWarningSeverity.Critical => TrafficSeverity.Critical,\n                        KesifUygulamasiTemplate.Services.TrafficWarningSeverity.High => TrafficSeverity.High,\n                        KesifUygulamasiTemplate.Services.TrafficWarningSeverity.Medium => TrafficSeverity.Medium,\n                        _ => TrafficSeverity.Low\n                    };\n                }\n                else\n                {\n                    HasTrafficWarnings = false;\n                    TrafficWarningMessage = string.Empty;\n                    CurrentCongestionLevel = TrafficSeverity.Low;\n                }\n\n                EstimatedDelay = TimeSpan.FromMinutes(delayInfo.TotalDelayMinutes);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Trafik verisi yüklenirken hata: {ex.Message}");\n                ErrorMessage = "Trafik verisi alınamadı";\n            }\n        }\n\n        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName ?? string.Empty));\n        }\n    }\n}\n