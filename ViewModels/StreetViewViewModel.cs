using System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\nusing System.Windows.Input;\nusing Microsoft.Maui.Controls;\nusing Microsoft.Maui.Devices.Sensors;\nusing Microsoft.Maui.ApplicationModel;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Models;\nusing System;\n\nnamespace KesifUygulamasiTemplate.ViewModels\n{\n    public class StreetViewViewModel : INotifyPropertyChanged\n    {\n        private readonly StreetViewService _streetViewService;\n        private readonly ConfigurationService _configurationService;\n\n        public StreetViewViewModel()\n        {\n            _configurationService = new ConfigurationService();\n            _streetViewService = new StreetViewService(_configurationService);\n        }\n\n        public StreetViewViewModel(ConfigurationService configurationService)\n        {\n            _configurationService = configurationService;\n            _streetViewService = new StreetViewService(_configurationService);\n        }\n\n        private StreetViewPanorama? _currentPanorama;\n        public StreetViewPanorama? CurrentPanorama\n        {\n            get => _currentPanorama;\n            set\n            {\n                _currentPanorama = value;\n                OnPropertyChanged();\n                UpdateStreetViewUrl();\n            }\n        }\n\n        private string? _streetViewUrl;\n        public string StreetViewUrl\n        {\n            get => string.IsNullOrWhiteSpace(_streetViewUrl) ? "https://via.placeholder.com/600x400?text=Panorama+yukleniyor..." : _streetViewUrl;\n            private set { _streetViewUrl = value; OnPropertyChanged(); }\n        }\n\n        public ObservableCollection<StreetViewLink> Links { get; set; } = new ObservableCollection<StreetViewLink>();\n\n        private double _heading = 210;\n        public double Heading { get => _heading; set { _heading = value; OnPropertyChanged(); UpdateStreetViewUrl(); } }\n\n        private double _pitch = 10;\n        public double Pitch { get => _pitch; set { _pitch = value; OnPropertyChanged(); UpdateStreetViewUrl(); } }\n\n        private double _fov = 80;\n        public double FOV { get => _fov; set { _fov = value; OnPropertyChanged(); UpdateStreetViewUrl(); } }\n\n        private async void UpdateStreetViewUrl()\n        {\n            if (CurrentPanorama != null)\n            {\n                try\n                {\n                    var apiKey = await _streetViewService.GetApiKeyAsync();\n                    StreetViewUrl = $"https://www.google.com/maps/embed/v1/streetview?key={apiKey}&location={CurrentPanorama.Latitude},{CurrentPanorama.Longitude}&heading={Heading}&pitch={Pitch}&fov={FOV}";\n                }\n                catch\n                {\n                    StreetViewUrl = "https://via.placeholder.com/600x400?text=Panorama+yuklenemedi";\n                }\n            }\n        }\n\n        public ICommand LoadPanoramaCommand => new Command<StreetViewLink>(async link =>\n        {\n            if (link == null) return;\n            try\n            {\n                var panorama = await _streetViewService.GetPanoramaByIdAsync(link.ToId);\n                CurrentPanorama = panorama;\n                Links.Clear();\n                foreach (var l in panorama.Links)\n                    Links.Add(l);\n            }\n            catch (Exception ex)\n            {\n                if (Application.Current?.MainPage != null)\n                    await Application.Current.MainPage.DisplayAlert("Hata", $"Panorama yüklenemedi: {ex.Message}", "Tamam");\n            }\n        });\n\n        public async Task LoadPanoramaByUserLocationAsync()\n        {\n            try\n            {\n                var status = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();\n                if (status != PermissionStatus.Granted)\n                {\n                    status = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();\n                    if (status != PermissionStatus.Granted)\n                    {\n                        if (Application.Current?.MainPage != null)\n                            await Application.Current.MainPage.DisplayAlert("İzin Gerekli", "Konum izni verilmediği için panorama yüklenemiyor.", "Tamam");\n                        return;\n                    }\n                }\n\n                var location = await Geolocation.GetLastKnownLocationAsync()\n                                ?? await Geolocation.GetLocationAsync(new GeolocationRequest(GeolocationAccuracy.Medium));\n\n                if (location != null)\n                {\n                    var panorama = await _streetViewService.GetPanorama(location.Latitude, location.Longitude);\n                    CurrentPanorama = panorama;\n                    Links.Clear();\n                    foreach (var link in panorama.Links)\n                        Links.Add(link);\n                }\n            }\n            catch (Exception ex)\n            {\n                if (Application.Current?.MainPage != null)\n                    await Application.Current.MainPage.DisplayAlert("Hata", $"Konum yüklenemedi: {ex.Message}", "Tamam");\n            }\n        }\n\n        public string? StreetName { get; set; }\n        public string? City { get; set; }\n\n        public void LoadStreetData()\n        {\n            // Veri yükleme işlemi\n        }\n\n        public event PropertyChangedEventHandler? PropertyChanged;\n        private void OnPropertyChanged([CallerMemberName] string? name = null) =>\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n    }\n}\n