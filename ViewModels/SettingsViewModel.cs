using System;\nusing System.Threading.Tasks;\nusing System.Windows.Input;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.ViewModels.Base;\nusing Microsoft.Maui.Controls;\nusing Microsoft.Maui.ApplicationModel;\nusing KesifUygulamasiTemplate.UI;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services;\n\nnamespace KesifUygulamasiTemplate.ViewModels\n{\n    public class SettingsViewModel : BaseViewModel\n    {\n        private readonly KesifUygulamasiTemplate.Services.Interfaces.IPreferencesService _preferencesService;\n        private readonly ILocationPrivacyService _locationPrivacyService;\n\n        private bool _isDarkMode;\n        private string _language = "en";\n        private bool _isOfflineMode;\n        private Models.AppTheme _selectedTheme;\n        private bool _isPushEnabled;\n        private bool _isVoiceGuidanceEnabled;\n        private string _selectedMapProvider = "Google";\n        private string _selectedRouteOptimization = "Fastest";\n\n        public bool IsDarkMode\n        {\n            get => _isDarkMode;\n            set => SetProperty(ref _isDarkMode, value);\n        }\n\n        public string Language\n        {\n            get => _language;\n            set => SetProperty(ref _language, value);\n        }\n\n        public new bool IsOfflineMode\n        {\n            get => _isOfflineMode;\n            set => SetProperty(ref _isOfflineMode, value);\n        }\n\n        public Models.AppTheme SelectedTheme\n        {\n            get => _selectedTheme;\n            set => SetProperty(ref _selectedTheme, value);\n        }\n\n        public bool IsPushEnabled\n        {\n            get => _isPushEnabled;\n            set => SetProperty(ref _isPushEnabled, value);\n        }\n\n        public bool IsVoiceGuidanceEnabled\n        {\n            get => _isVoiceGuidanceEnabled;\n            set => SetProperty(ref _isVoiceGuidanceEnabled, value);\n        }\n\n        public string SelectedMapProvider\n        {\n            get => _selectedMapProvider;\n            set => SetProperty(ref _selectedMapProvider, value);\n        }\n\n        public string SelectedRouteOptimization\n        {\n            get => _selectedRouteOptimization;\n            set => SetProperty(ref _selectedRouteOptimization, value);\n        }\n\n        public string[] MapProviders => new[] { "Google", "Mapbox", "HERE", "Offline" };\n        public string[] RouteOptimizationTypes => new[] { "Fastest", "Shortest", "Eco", "Safe" };\n        public string[] ThemeOptions => new[] { "Light", "Dark", "System" };\n\n        public bool IsTurkishSelected => Language == "tr";\n        public bool IsEnglishSelected => Language == "en";\n\n        public ICommand SetTurkishCommand { get; }\n        public ICommand SetEnglishCommand { get; }\n        public ICommand SetOfflineModeCommand { get; }\n        public ICommand RequestLocationPermissionCommand { get; }\n        public ICommand CheckLocationPermissionCommand { get; }\n        public ICommand ToggleOfflineModeCommand { get; }\n        public ICommand PayPalDonationCommand { get; }\n        public ICommand StripeDonationCommand { get; }\n        public ICommand ToggleVoiceGuidanceCommand { get; }\n        public ICommand SetLightThemeCommand { get; }\n        public ICommand SetDarkThemeCommand { get; }\n        public ICommand SetCustomThemeCommand { get; }\n        public ICommand GoToProfileCommand { get; }\n\n        public SettingsViewModel(KesifUygulamasiTemplate.Services.Interfaces.IPreferencesService preferencesService, ILocationPrivacyService locationPrivacyService)\n        {\n            _preferencesService = preferencesService ?? throw new ArgumentNullException(nameof(preferencesService));\n            _locationPrivacyService = locationPrivacyService ?? throw new ArgumentNullException(nameof(locationPrivacyService));\n\n            SetTurkishCommand = new Command(() => SetLanguage("tr"));\n            SetEnglishCommand = new Command(() => SetLanguage("en"));\n            SetOfflineModeCommand = new Command<bool>(SetOfflineMode);\n            RequestLocationPermissionCommand = new Command(async () => await RequestLocationPermissionAsync());\n            CheckLocationPermissionCommand = new Command(async () =>\n            {\n                var status = await CheckLocationPermissionAsync();\n                // Handle the status if needed\n            });\n            ToggleOfflineModeCommand = new Command(async () => await ToggleOfflineModeAsync());\n            PayPalDonationCommand = new Command(async () => await OpenPayPalDonationAsync());\n            StripeDonationCommand = new Command(async () => await OpenStripeDonationAsync());\n            ToggleVoiceGuidanceCommand = new Command(async () => await ToggleVoiceGuidanceAsync());\n            SetLightThemeCommand = new Command(() => SetTheme(Models.AppTheme.Light));\n            SetDarkThemeCommand = new Command(() => SetTheme(Models.AppTheme.Dark));\n            SetCustomThemeCommand = new Command(() => SetTheme(Models.AppTheme.Custom));\n            GoToProfileCommand = new Command(async () => await GoToProfileAsync());\n        }\n\n        private void SetLanguage(string language)\n        {\n            Language = language;\n            OnPropertyChanged(nameof(IsTurkishSelected));\n            OnPropertyChanged(nameof(IsEnglishSelected));\n        }\n\n        public async void SetOfflineMode(bool isOffline)\n        {\n            try\n            {\n                if (isOffline)\n                {\n                    await OfflineModeService.Instance.EnableOfflineModeAsync();\n                }\n                else\n                {\n                    await OfflineModeService.Instance.DisableOfflineModeAsync();\n                }\n\n                IsOfflineMode = OfflineModeService.Instance.IsOfflineMode;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to set offline mode: {ex.Message}");\n            }\n        }\n\n        public async Task RequestLocationPermissionAsync()\n        {\n            try\n            {\n                var result = await _locationPrivacyService.RequestLocationPermissionWithPrivacyInfoAsync();\n                if (!result)\n                {\n                    if (Application.Current?.MainPage != null)\n                    {\n                        await Application.Current.MainPage.DisplayAlert("Permission Denied", "Location permission is required for this feature.", "OK");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                if (Application.Current?.MainPage != null)\n                {\n                    await Application.Current.MainPage.DisplayAlert("Error", $"Failed to request location permission: {ex.Message}", "OK");\n                }\n            }\n        }\n\n        public async Task<string> CheckLocationPermissionAsync()\n        {\n            try\n            {\n                // Implementation for checking location permission\n                // For now, return a mock status\n                return "Permission status checked";\n            }\n            catch (Exception ex)\n            {\n                if (Application.Current?.MainPage != null)\n                {\n                    await Application.Current.MainPage.DisplayAlert("Error", $"Failed to check location permission: {ex.Message}", "OK");\n                }\n                return "Error checking permission";\n            }\n        }\n\n        private async Task ToggleOfflineModeAsync()\n        {\n            try\n            {\n                if (IsOfflineMode)\n                {\n                    await OfflineModeService.Instance.DisableOfflineModeAsync();\n                }\n                else\n                {\n                    await OfflineModeService.Instance.EnableOfflineModeAsync();\n                }\n\n                IsOfflineMode = OfflineModeService.Instance.IsOfflineMode;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to toggle offline mode: {ex.Message}");\n            }\n        }\n\n        private async Task OpenPayPalDonationAsync()\n        {\n            // Open PayPal donation link\n            if (Application.Current?.MainPage != null)\n            {\n                await Application.Current.MainPage.DisplayAlert("PayPal Donation", "Opening PayPal donation page...", "OK");\n            }\n        }\n\n        private async Task OpenStripeDonationAsync()\n        {\n            // Open Stripe donation link\n            if (Application.Current?.MainPage != null)\n            {\n                await Application.Current.MainPage.DisplayAlert("Stripe Donation", "Opening Stripe donation page...", "OK");\n            }\n        }\n\n        private Task ToggleVoiceGuidanceAsync()\n        {\n            IsVoiceGuidanceEnabled = !IsVoiceGuidanceEnabled;\n            return Task.CompletedTask;\n        }\n\n        private void SetTheme(Models.AppTheme theme)\n        {\n            SelectedTheme = theme;\n\n            // Set the application theme\n            var app = Application.Current;\n            if (app != null)\n            {\n                app.UserAppTheme = theme switch\n                {\n                    Models.AppTheme.Dark => Microsoft.Maui.ApplicationModel.AppTheme.Dark,\n                    Models.AppTheme.Light => Microsoft.Maui.ApplicationModel.AppTheme.Light,\n                    _ => Microsoft.Maui.ApplicationModel.AppTheme.Light\n                };\n            }\n\n            // Update IsDarkMode property\n            IsDarkMode = theme == Models.AppTheme.Dark;\n        }\n\n        private async Task GoToProfileAsync()\n        {\n            await Shell.Current.GoToAsync("//ProfilePage");\n        }\n    }\n}\n