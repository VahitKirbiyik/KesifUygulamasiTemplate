using System;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing KesifUygulamasiTemplate.Services;\n\nnamespace KesifUygulamasiTemplate.ViewModels.Base\n{\n    /// <summary>\n    /// Tüm ViewModels için temel sınıf\n    /// </summary>\n    public abstract class BaseViewModel : INotifyPropertyChanged\n    {\n        private bool _isBusy;\n        private string _errorMessage = string.Empty;\n        private string _title = string.Empty;\n\n        /// <summary>\n        /// Sayfa başlığı\n        /// </summary>\n        public string Title\n        {\n            get => _title;\n            set => SetProperty(ref _title, value);\n        }\n\n        /// <summary>\n        /// Meşgul durumu, genellikle işlem devam ederken true olarak ayarlanır\n        /// </summary>\n        public bool IsBusy\n        {\n            get => _isBusy;\n            set => SetProperty(ref _isBusy, value);\n        }\n\n        /// <summary>\n        /// Meşgul değil durumu (IsBusy'nin tersi)\n        /// </summary>\n        public bool IsNotBusy => !IsBusy;\n\n        /// <summary>\n        /// Hata mesajı, işlem başarısız olduğunda ayarlanır\n        /// </summary>\n        public string ErrorMessage\n        {\n            get => _errorMessage;\n            set => SetProperty(ref _errorMessage, value);\n        }\n\n        /// <summary>\n        /// Offline mod aktif mi?\n        /// </summary>\n        public bool IsOfflineMode => OfflineModeService.Instance.IsOfflineMode;\n\n        /// <summary>\n        /// Online mod aktif mi?\n        /// </summary>\n        public bool IsOnlineMode => OfflineModeService.Instance.IsOnlineMode;\n\n        /// <summary>\n        /// Offline durum mesajı\n        /// </summary>\n        public string OfflineStatusMessage => OfflineModeService.Instance.OfflineStatusMessage;\n\n        /// <summary>\n        /// Önbellekteki öğe sayısı\n        /// </summary>\n        public int CachedItemsCount => OfflineModeService.Instance.CachedItemsCount;\n\n        /// <summary>\n        /// Önbellek boyutu (okunabilir format)\n        /// </summary>\n        public string CacheSizeFormatted => OfflineModeService.Instance.CacheSizeFormatted;\n\n        /// <summary>\n        /// Property değişikliği olayı\n        /// </summary>\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        /// <summary>\n        /// PropertyChanged olayını tetikler\n        /// </summary>\n        /// <param name="propertyName">Değişen property adı</param>\n        public virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        /// <summary>\n        /// Property'yi ayarlar ve değişiklik olduğunda PropertyChanged olayını tetikler\n        /// </summary>\n        /// <typeparam name="T">Property tipi</typeparam>\n        /// <param name="storage">Referans olarak depolama alanı</param>\n        /// <param name="value">Ayarlanacak yeni değer</param>\n        /// <param name="propertyName">Property adı</param>\n        /// <returns>Değer değiştiyse true, aksi halde false</returns>\n        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string? propertyName = null)\n        {\n            if (Equals(storage, value))\n                return false;\n\n            storage = value;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n\n        protected NavigationService? NavigationService { get; }\n\n        public BaseViewModel()\n        {\n            NavigationService = App.Current?.Handler?.MauiContext?.Services?.GetService<NavigationService>();\n\n            // Offline mode değişikliklerini dinle\n            OfflineModeService.Instance.OfflineModeChanged += OnOfflineModeChanged;\n            OfflineModeService.Instance.PropertyChanged += OnOfflineModePropertyChanged;\n        }\n\n        /// <summary>\n        /// Offline mod değişikliği olayı\n        /// </summary>\n        private void OnOfflineModeChanged(object? sender, OfflineModeChangedEventArgs e)\n        {\n            // Offline mod durumu değiştiğinde ilgili property'leri güncelle\n            OnPropertyChanged(nameof(IsOfflineMode));\n            OnPropertyChanged(nameof(IsOnlineMode));\n            OnPropertyChanged(nameof(OfflineStatusMessage));\n        }\n\n        /// <summary>\n        /// Offline mode service property değişikliği olayı\n        /// </summary>\n        private void OnOfflineModePropertyChanged(object? sender, PropertyChangedEventArgs e)\n        {\n            // Cache bilgileri veya durum mesajı değiştiğinde güncelle\n            if (e.PropertyName == nameof(OfflineModeService.OfflineStatusMessage))\n            {\n                OnPropertyChanged(nameof(OfflineStatusMessage));\n            }\n            else if (e.PropertyName == nameof(OfflineModeService.CachedItemsCount))\n            {\n                OnPropertyChanged(nameof(CachedItemsCount));\n            }\n            else if (e.PropertyName == nameof(OfflineModeService.CacheSizeFormatted))\n            {\n                OnPropertyChanged(nameof(CacheSizeFormatted));\n            }\n        }\n\n        /// <summary>\n        /// ViewModel'den animasyonlu sayfa geçişi için yardımcı metot.\n        /// </summary>\n        protected async Task NavigateToAsync(Page page, bool animated = true)\n        {\n            if (NavigationService != null)\n                await NavigationService.PushAsync(page, animated);\n        }\n\n        /// <summary>\n        /// Async komut çalıştırma yardımcı metodu\n        /// </summary>\n        public async Task ExecuteAsync(Func<Task> action)\n        {\n            if (IsBusy)\n                return;\n\n            try\n            {\n                IsBusy = true;\n                ErrorMessage = string.Empty;\n                await action();\n            }\n            catch (Exception ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            finally\n            {\n                IsBusy = false;\n            }\n        }\n\n        /// <summary>\n        /// Async komut çalıştırma yardımcı metodu (mesaj ile)\n        /// </summary>\n        public async Task ExecuteAsync(Func<Task> action, string loadingMessage)\n        {\n            if (IsBusy)\n                return;\n\n            try\n            {\n                IsBusy = true;\n                ErrorMessage = string.Empty;\n                // Burada loadingMessage kullanılabilir (örneğin bir loading indicator göstermek için)\n                await action();\n            }\n            catch (Exception ex)\n            {\n                ErrorMessage = ex.Message;\n            }\n            finally\n            {\n                IsBusy = false;\n            }\n        }\n\n        /// <summary>\n        /// Başarı mesajı gösterme yardımcı metodu\n        /// </summary>\n        public async Task ShowSuccessAsync(string message)\n        {\n            // Implementation would depend on your UI framework\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Bilgi mesajı gösterme yardımcı metodu\n        /// </summary>\n        public async Task ShowInfoAsync(string message)\n        {\n            // Implementation would depend on your UI framework\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Uyarı mesajı gösterme yardımcı metodu\n        /// </summary>\n        public async Task ShowWarningAsync(string message)\n        {\n            // Implementation would depend on your UI framework\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Hata mesajı gösterme yardımcı metodu\n        /// </summary>\n        public async Task ShowErrorAsync(string message)\n        {\n            // Implementation would depend on your UI framework\n            await Task.CompletedTask;\n        }\n    }\n}\n