using System.Collections.ObjectModel;\nusing System.Threading.Tasks;\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing Microsoft.Maui.Devices.Sensors;\nusing KesifUygulamasiTemplate.ViewModels;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.ViewModels\n{\n    // ViewModel'leri CommunityToolkit.Mvvm �zellikleriyle g��lendir\n    public partial class RouteViewModel : BaseViewModel\n    {\n        private readonly IRouteService _routeService;\n\n        [ObservableProperty]\n        private Location? startLocation;\n        \n        [ObservableProperty]\n        private Location? endLocation;\n        \n        [ObservableProperty]\n        [NotifyPropertyChangedFor(nameof(HasValidRoute))]\n        private ObservableCollection<Location> routePoints = new();\n        \n        public bool HasValidRoute => RoutePoints?.Count > 1;\n\n        public RouteViewModel(IRouteService routeService)\n        {\n            _routeService = routeService;\n        }\n        \n        [RelayCommand(CanExecute = nameof(CanGenerateRoute))]\n        private async Task GenerateRouteAsync()\n        {\n            if (StartLocation != null && EndLocation != null)\n            {\n                var route = await _routeService.CalculateRouteAsync(StartLocation, EndLocation);\n                RoutePoints = new ObservableCollection<Location>(route);\n            }\n        }\n        \n        private bool CanGenerateRoute() => \n            StartLocation != null && EndLocation != null && !IsBusy;\n    }\n}\n