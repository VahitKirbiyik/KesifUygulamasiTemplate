# release-build.ps1\n# Tüm test, build, signing ve artefact işlemlerini otomatikleştirir\n\n# 1️⃣ .resx anahtar kontrolü\nWrite-Host "🔹 Tüm .resx dosyaları ve anahtarlar kontrol ediliyor..."\ndotnet run --project Tools/ResxKeyChecker --verify-all >> pre-commit.log 2>&1\n\n\n# 2️⃣ Özellik testleri\nWrite-Host "🔹 Uygulama özellikleri test ediliyor..."\ndotnet test --filter "Category=FeatureTest" --logger trx --results-directory TestResults >> pre-commit.log 2>&1\n\n# 1️⃣ Hook kontrolleri\nWrite-Host "🔹 pre-commit, pre-push ve commit-msg kontrolleri..."\nif (Test-Path ".\pre-commit.ps1") { & ".\pre-commit.ps1" }\nif (Test-Path ".\pre-push.ps1") { & ".\pre-push.ps1" }\n\n# 2️⃣ .resx ve anahtar doğrulama\nWrite-Host "🔹 26 dil .resx kontrolleri..."\ndotnet run --project Tools/ResxKeyChecker --verify-all >> pre-commit.log 2>&1\n\n# 3️⃣ Özellik testleri\nWrite-Host "🔹 Tüm özellik testleri çalıştırılıyor..."\ndotnet test --filter "Category=FeatureTest" --logger trx --results-directory TestResults >> pre-commit.log 2>&1\n\n# 4️⃣ Otomatik sürüm ve build\nWrite-Host "🔹 Sürüm ve build numarası güncelleniyor..."\n$versionFile = "VERSION.txt"\n$version = Get-Content $versionFile\n$versionParts = $version -split "\."\n$versionParts[2] = [int]$versionParts[2] + 1\n$newVersion = ($versionParts -join ".")\nSet-Content $versionFile $newVersion\n\n# Android ve iOS versiyon güncelle\n(Get-Content "Android/Properties/AndroidManifest.xml") -replace 'android:versionCode="\d+"', "android:versionCode=\"$($versionParts[2])\"" | Set-Content "Android/Properties/AndroidManifest.xml"\n(Get-Content "Android/Properties/AndroidManifest.xml") -replace 'android:versionName=".*"', "android:versionName=\"$newVersion\"" | Set-Content "Android/Properties/AndroidManifest.xml"\n\n(Get-Content "iOS/Info.plist") -replace '<key>CFBundleShortVersionString</key>\s*<string>.*</string>', "<key>CFBundleShortVersionString</key><string>$newVersion</string>" | Set-Content "iOS/Info.plist"\n(Get-Content "iOS/Info.plist") -replace '<key>CFBundleVersion</key>\s*<string>.*</string>', "<key>CFBundleVersion</key><string>$($versionParts[2])</string>" | Set-Content "iOS/Info.plist"\n\n# 5️⃣ Changelog üretimi\nWrite-Host "🔹 Changelog oluşturuluyor..."\ngit log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md\n\n# 6️⃣ Build işlemleri\nWrite-Host "🔹 Android build..."\ndotnet publish -c Release -f net8.0-android -o out/Android >> pre-commit.log 2>&1\nWrite-Host "🔹 iOS build..."\ndotnet publish -c Release -f net8.0-ios -o out/iOS >> pre-commit.log 2>&1\n\n# 7️⃣ Signing ve artefact yönetimi\n$keystorePath = ".\Keys\release.keystore"\n$keystorePass = $env:KEYSTORE_PASS\n$keystoreAlias = $env:KEYSTORE_ALIAS\n& "jarsigner" -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $keystorePath out/Android/*.apk $keystoreAlias\n\ncd ios\nfastlane match appstore\nfastlane ios beta\ncd ..\n\n# 8️⃣ Log ve hata kontrolü\nif (Test-Path ".\pre-commit.log") {\n    $errors = Get-Content ".\pre-commit.log" | Select-String "error|fail"\n    if ($errors) {\n        Write-Host "❌ Hata bulundu. İşlem durduruldu."\n        exit 1\n    } else {\n        Write-Host "✅ Tüm test, build ve release işlemleri başarılı."\n    }\n}\n\n# 9️⃣ Git işlemleri\ngit add .\ngit commit -m "All features tested, version updated, changelog generated, builds ready, beta prepared"\nWrite-Host "✅ Commit tamamlandı. Push yapılabilir."\n\n# 1️⃣0️⃣ GitHub Actions workflow entegrasyonu\n# .github/workflows/ci-cd.yml dosyası release-build.ps1’i çalıştıracak\n# git add .\n\n# PowerShell script to build the project, run tests, generate coverage report, and clean up directories\n\n# Step 1: Build the project\nWrite-Host "Building the project..."\ndotnet build "..\KesifUygulamasiTemplate.csproj" --configuration Release\n\n# Step 2: Run tests and generate coverage report\nWrite-Host "Running tests and generating coverage report..."\ndotnet test "..\KesifUygulamasiTemplate.csproj" --collect:"XPlat Code Coverage"\n\n# Step 3: Clean up unnecessary directories\n$directoriesToClean = @(\n    "..\bin",\n    "..\obj",\n    "..\.vs",\n    "..\TestResults"\n)\n\nforeach ($dir in $directoriesToClean) {\n    if (Test-Path $dir) {\n        Write-Host "Cleaning up $dir..."\n        Remove-Item -Recurse -Force $dir\n    }\n}\n\nWrite-Host "Build, test, and cleanup process completed."\n\n# ✅ Versiyon format doğrulama\n$versionFile = "VERSION.txt"\n$version = Get-Content $versionFile\nif ($version -notmatch '^\d+\.\d+\.\d+$') {\n    Write-Host "❌ VERSION.txt formatı geçersiz. x.y.z şeklinde olmalı."\n    exit 1\n}\n\n# 🔄 Versiyon artırma\n$versionParts = $version -split "\."\n$versionParts[2] = [int]$versionParts[2] + 1\n$newVersion = ($versionParts -join ".")\nSet-Content $versionFile $newVersion\n$versionCode = $versionParts[2]\n\n# 📱 AndroidManifest.xml güncelleme\n(Get-Content "Android/Properties/AndroidManifest.xml") -replace 'android:versionCode="\d+"', "android:versionCode=`"$versionCode`"" | Set-Content "Android/Properties/AndroidManifest.xml"\n(Get-Content "Android/Properties/AndroidManifest.xml") -replace 'android:versionName=".*"', "android:versionName=`"$newVersion`"" | Set-Content "Android/Properties/AndroidManifest.xml"\n\n# 🍎 iOS Info.plist güncelleme\n(Get-Content "iOS/Info.plist") -replace '<key>CFBundleShortVersionString</key>\s*<string>.*</string>', "<key>CFBundleShortVersionString</key><string>$newVersion</string>" | Set-Content "iOS/Info.plist"\n(Get-Content "iOS/Info.plist") -replace '<key>CFBundleVersion</key>\s*<string>.*</string>', "<key>CFBundleVersion</key><string>$versionCode</string>" | Set-Content "iOS/Info.plist"\n\n# 📝 Changelog üretimi\ngit log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md\n\n# 🧪 Test sonuçlarında hata kontrolü\ndotnet test --filter "Category=FeatureTest" --logger trx --results-directory TestResults >> pre-commit.log 2>&1\nif (Test-Path ".\TestResults") {\n    $testErrors = Get-ChildItem ".\TestResults" -Recurse | Select-String "Failed|Error"\n    if ($testErrors) {\n        Write-Host "❌ Test sonuçlarında hata bulundu. Build durduruldu."\n        exit 1\n    }\n}\n\n# 📦 Artefact boyut kontrolü\n$apkPath = "out/Android/app-release.apk"\nif (Test-Path $apkPath) {\n    $apkSizeMB = (Get-Item $apkPath).Length / 1MB\n    if ($apkSizeMB -gt 100) {\n        Write-Host "⚠️ APK boyutu $([math]::Round($apkSizeMB,2)) MB. Limit aşıldı!"\n    }\n    jarsigner -verify $apkPath\n}\n\n# 🧹 Log temizliği\nif (Test-Path ".\pre-commit.log") {\n    $cleanLog = Get-Content ".\pre-commit.log" | Where-Object { $_ -notmatch "warning|deprecated" }\n    $cleanLog | Set-Content ".\pre-commit-clean.log"\n    Write-Host "📄 Log temizlendi. pre-commit-clean.log dosyasına yazıldı."\n}\n\n# 🧬 Git işlemleri ve CI/CD tetikleme\ngit add .\ngit commit -m "v$newVersion: Yayın öncesi tüm işlemler tamamlandı"\ngit tag "v$newVersion"\ngit push origin main --tags\n\n# 🎉 Kutlama mesajı\nWrite-Host "✅ v$newVersion sürümü başarıyla oluşturuldu, testler geçti, CI/CD tetiklendi. Play Store yayınına hazırsın!"\n