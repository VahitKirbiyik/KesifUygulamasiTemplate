# ================================================================\n# TOPLU OLUŞTURMA + KONTROL + ÇALIŞTIRMA BLOĞU\n# - Bu blok: klasörleri oluşturur, üç dosyayı yazar (release-full-check.ps1, release-full.ps1, workflow)\n# - Sonra release-full-check.ps1'i çalıştırır (kontroller -> eğer geçerse release-full.ps1 çalıştırılır)\n# ================================================================\n\n# 1) Gerekli klasörleri oluştur\nNew-Item -ItemType Directory -Force -Path ".\tools" | Out-Null\nNew-Item -ItemType Directory -Force -Path ".\.github\workflows" | Out-Null\nNew-Item -ItemType Directory -Force -Path ".\Keys" | Out-Null\nNew-Item -ItemType Directory -Force -Path ".\certs" | Out-Null\n\n# 2) release-full.ps1 (güvenli, güncel sürüm) - yaz\n@'\n# =====================================\n# release-full.ps1\n# Tam otomatik + güvenli CI/CD / beta & release script\n# =====================================\n\n# Fail fast\n$ErrorActionPreference = 'Stop'\n\ntry {\n    # ------------ LOG / TRANSCRIPT ------------\n    $gitRoot = (& git rev-parse --show-toplevel 2>$null).Trim()\n    if (-not $gitRoot) {\n        # Git yoksa bulunduğumuz dizini kullan\n        $gitRoot = (Resolve-Path ".").Path\n        Write-Warning "Git repository bulunamadı. Bazı adımlar (changelog, git commit) atlanabilir."\n    }\n    Set-Location $gitRoot\n\n    $time = (Get-Date).ToString('yyyyMMdd-HHmmss')\n    $logFile = Join-Path $gitRoot ("release-full-$time.log")\n    Write-Host "[INFO] Transcript başlatılıyor: $logFile"\n    Start-Transcript -Path $logFile -Force\n\n    # ------------ PATH & FILES ------------\n    $versionFile = Join-Path $gitRoot "VERSION.txt"\n    $androidManifest = Join-Path $gitRoot "Android\Properties\AndroidManifest.xml"\n    $iosInfoPlist = Join-Path $gitRoot "iOS\Info.plist"\n    $outAndroid = Join-Path $gitRoot "out\Android"\n    $outiOS = Join-Path $gitRoot "out\iOS"\n    $keystorePath = Join-Path $gitRoot "Keys\release.keystore"\n    $appleCertPath = Join-Path $gitRoot "certs\apple_certificate.p12"\n    $googleKeyPath = Join-Path $gitRoot "certs\google_play_service_account.json"\n\n    # ------------ PRE-HOOKS ------------\n    Write-Host "[INFO] Hook kontrolleri (pre-commit, pre-push, commit-msg) başlatılıyor..."\n    if (Test-Path (Join-Path $gitRoot "pre-commit.ps1")) { & (Join-Path $gitRoot "pre-commit.ps1") }\n    if (Test-Path (Join-Path $gitRoot "pre-push.ps1")) { & (Join-Path $gitRoot "pre-push.ps1") }\n\n    # ------------ RESX CHECK ------------\n    Write-Host "[INFO] .resx anahtar doğrulaması (varsa) çalıştırılıyor..."\n    if (Test-Path (Join-Path $gitRoot "Tools\ResxKeyChecker")) {\n        try {\n            dotnet run --project (Join-Path $gitRoot "Tools\ResxKeyChecker") --verify-all >> (Join-Path $gitRoot "pre-commit.log") 2>&1\n        } catch {\n            Write-Warning "[WARN] Resx doğrulayıcı çalıştırılırken hata: $($_.Exception.Message). pre-commit.log'u kontrol edin."\n        }\n    } else {\n        Write-Host "[INFO] Resx checker aracı bulunamadı, bu adım atlandı."\n    }\n\n    # ------------ FEATURE TESTS ------------\n    Write-Host "[INFO] Tüm özellik testleri çalıştırılıyor..."\n    $testSucceeded = $true\n    try {\n        dotnet test --filter "Category=FeatureTest" --logger trx --results-directory (Join-Path $gitRoot "TestResults") >> (Join-Path $gitRoot "pre-commit.log") 2>&1\n        if ($LASTEXITCODE -ne 0) { $testSucceeded = $false }\n    } catch {\n        $testSucceeded = $false\n    }\n    if (-not $testSucceeded) {\n        Write-Error "[ERROR] Feature testleri başarısız. pre-commit.log'u inceleyin."\n        exit 1\n    }\n\n    # ------------ VERSION FILE & BUMP ------------\n    Write-Host "[INFO] Sürüm ve build numarası işleniyor..."\n    if (-not (Test-Path $versionFile)) {\n        Write-Warning "[WARN] VERSION.txt bulunamadı; oluşturuluyor (1.0.0)."\n        "1.0.0" | Out-File -FilePath $versionFile -Encoding UTF8\n    }\n    $versionRaw = (Get-Content $versionFile -Raw).Trim()\n    if (-not ($versionRaw -match '^\d+\.\d+\.\d+$')) {\n        Write-Warning "[WARN] VERSION.txt formatı beklenenden farklı. Varsayılan 1.0.0 kullanılıyor."\n        $versionRaw = "1.0.0"\n    }\n    $versionParts = $versionRaw.Split('.')\n    if ($versionParts.Length -lt 3) {\n        $versionParts = @($versionParts[0], ($versionParts[1] -as [int] -as [string]), "0")\n    }\n    $patch = [int]$versionParts[2] + 1\n    $newVersion = "$($versionParts[0]).$($versionParts[1]).$patch"\n    Set-Content -Path $versionFile -Value $newVersion -Encoding UTF8\n    Write-Host "[INFO] VERSION.txt güncellendi -> $newVersion"\n\n    # ------------ ANDROID / iOS VERSION UPDATE (güvenli) ------------\n    if (Test-Path $androidManifest) {\n        try {\n            $manifestRaw = Get-Content $androidManifest -Raw\n            $manifestRaw = $manifestRaw -replace 'android:versionCode="\d+"', ("android:versionCode=`"$patch`"")\n            $manifestRaw = $manifestRaw -replace 'android:versionName=".*?"', ("android:versionName=`"$newVersion`"")\n            $manifestRaw | Set-Content -Path $androidManifest -Encoding UTF8\n            Write-Host "[INFO] AndroidManifest.xml sürüm güncellendi."\n        } catch {\n            Write-Warning "[WARN] AndroidManifest güncellemesi sırasında hata: $($_.Exception.Message)"\n        }\n    } else {\n        Write-Warning "[WARN] AndroidManifest.xml bulunamadı; android versiyon güncellemesi atlandı."\n    }\n\n    if (-not $IsWindows) {\n        if (Test-Path $iosInfoPlist) {\n            try {\n                $plistRaw = Get-Content $iosInfoPlist -Raw\n                $plistRaw = $plistRaw -replace '<key>CFBundleShortVersionString</key>\s*<string>.*?</string>', "<key>CFBundleShortVersionString</key><string>$newVersion</string>"\n                $plistRaw = $plistRaw -replace '<key>CFBundleVersion</key>\s*<string>.*?</string>', "<key>CFBundleVersion</key><string>$patch</string>"\n                $plistRaw | Set-Content -Path $iosInfoPlist -Encoding UTF8\n                Write-Host "[INFO] Info.plist sürüm güncellendi."\n            } catch {\n                Write-Warning "[WARN] Info.plist güncellemesi sırasında hata: $($_.Exception.Message)"\n            }\n        } else {\n            Write-Warning "[WARN] Info.plist bulunamadı; iOS versiyon güncellemesi atlandı."\n        }\n    } else {\n        Write-Host "[INFO] iOS sürüm güncellemesi atlandı (Windows ortamında)."\n    }\n\n    # ------------ CHANGELOG ------------\n    Write-Host "[INFO] Changelog oluşturuluyor..."\n    try {\n        if (& git rev-parse --is-inside-work-tree 2>$null) {\n            $tag = (& git describe --tags --abbrev=0 2>$null).Trim()\n            if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrEmpty($tag)) {\n                & git log --pretty=format:"- %s" HEAD > (Join-Path $gitRoot "CHANGELOG.md")\n            } else {\n                & git log --pretty=format:"- %s" "$tag..HEAD" > (Join-Path $gitRoot "CHANGELOG.md")\n            }\n            Write-Host "[INFO] CHANGELOG.md oluşturuldu."\n        } else {\n            Write-Warning "[WARN] Git workspace değil; changelog oluşturulmadı."\n        }\n    } catch {\n        Write-Warning "[WARN] Changelog oluşturulurken hata: $($_.Exception.Message)"\n    }\n\n    # ------------ BUILD (Android) ------------\n    Write-Host "[INFO] Android build başlatılıyor..."\n    $androidPublishOk = $false\n    try {\n        & dotnet publish -c Release -f net8.0-android -o $outAndroid 2>&1 | Tee-Object -FilePath (Join-Path $gitRoot "pre-commit.log")\n        if ($LASTEXITCODE -eq 0) { $androidPublishOk = $true; Write-Host "[INFO] Android build başarılı." } else { throw "dotnet publish android exit code $LASTEXITCODE" }\n    } catch {\n        Write-Error "[ERROR] Android build başarısız: $($_.Exception.Message)"\n        exit 1\n    }\n\n    # ------------ BUILD (iOS) - only on non-Windows runners ------------\n    if (-not $IsWindows) {\n        Write-Host "[INFO] iOS build başlatılıyor..."\n        try {\n            & dotnet publish -c Release -f net8.0-ios -o $outiOS 2>&1 | Tee-Object -FilePath (Join-Path $gitRoot "pre-commit.log")\n            if ($LASTEXITCODE -ne 0) { throw "dotnet publish ios exit code $LASTEXITCODE" }\n            Write-Host "[INFO] iOS build başarılı."\n        } catch {\n            Write-Error "[ERROR] iOS build başarısız: $($_.Exception.Message)"\n            exit 1\n        }\n    } else {\n        Write-Host "[INFO] iOS build atlandı (Windows ortamı)."\n    }\n\n    # ------------ SIGNING (Android) - prefer apksigner ------------\n    if ($androidPublishOk) {\n        $apk = Get-ChildItem -Path $outAndroid -Filter *.apk -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1\n        if ($apk) {\n            $apksigner = $null\n            if ($env:ANDROID_SDK_ROOT) {\n                $buildTools = Get-ChildItem -Path (Join-Path $env:ANDROID_SDK_ROOT "build-tools") -ErrorAction SilentlyContinue | Sort-Object Name -Descending | Select-Object -First 1\n                if ($buildTools) { $apksigner = Join-Path $buildTools.FullName "apksigner.bat" }\n            }\n            if (-not $apksigner -and (Get-Command "apksigner" -ErrorAction SilentlyContinue)) {\n                $apksigner = (Get-Command "apksigner").Source\n            }\n\n            if ($apksigner -and (Test-Path $keystorePath)) {\n                Write-Host "[INFO] APK imzalama başlıyor..."\n                $ksPassArg = if ($env:KEYSTORE_PASS) { "--ks-pass pass:$env:KEYSTORE_PASS" } else { "" }\n                & $apksigner sign --ks $keystorePath $ksPassArg --ks-key-alias $env:KEYSTORE_ALIAS $apk.FullName\n                if ($LASTEXITCODE -ne 0) { Write-Error "[ERROR] APK imzalama başarısız"; exit 1 }\n                Write-Host "[INFO] APK imzalama tamamlandı."\n            } else {\n                Write-Warning "[WARN] apksigner bulunamadı veya keystore yok. APK imzalama atlandı."\n            }\n        } else {\n            Write-Warning "[WARN] out/Android dizininde APK bulunamadı; imzalama atlandı."\n        }\n    }\n\n    # ------------ FASTLANE / iOS DISTRIBUTION ------------\n    if (Get-Command "fastlane" -ErrorAction SilentlyContinue) {\n        if (-not $IsWindows) {\n            if (Test-Path (Join-Path $gitRoot "ios")) {\n                Push-Location (Join-Path $gitRoot "ios")\n                try {\n                    Write-Host "[INFO] fastlane match çalıştırılıyor..."\n                    & fastlane match appstore\n                    if ($LASTEXITCODE -ne 0) { throw "fastlane match failed" }\n                    Write-Host "[INFO] fastlane ios beta çalıştırılıyor..."\n                    & fastlane ios beta\n                    if ($LASTEXITCODE -ne 0) { throw "fastlane ios beta failed" }\n                } finally {\n                    Pop-Location\n                }\n            } else {\n                Write-Warning "[WARN] ios klasörü bulunamadı; fastlane atlandı."\n            }\n        } else {\n            Write-Host "[INFO] fastlane atlandı (Windows). iOS dağıtımını CI macOS runner'da çalıştırın."\n        }\n    } else {\n        Write-Warning "[WARN] fastlane yüklü değil; iOS dağıtımı atlandı."\n    }\n\n    # ------------ PRE-COMMIT LOG ANALİZİ ------------\n    $preCommitLog = Join-Path $gitRoot "pre-commit.log"\n    if (Test-Path $preCommitLog) {\n        $matches = Select-String -Path $preCommitLog -Pattern "error|fail|exception" -SimpleMatch -CaseSensitive:$false -Quiet\n        if ($matches) {\n            Write-Error "[ERROR] pre-commit.log içinde hata/uyarı bulundu. Lütfen $preCommitLog dosyasını inceleyin."\n            exit 1\n        } else {\n            Write-Host "[INFO] pre-commit.log temiz."\n        }\n    }\n\n    # ------------ GIT COMMIT (sadece değişiklik varsa) ------------\n    try {\n        if (& git rev-parse --is-inside-work-tree 2>$null) {\n            $porcelain = (& git status --porcelain).Trim()\n            if (-not [string]::IsNullOrEmpty($porcelain)) {\n                Write-Host "[INFO] Değişiklikler bulundu, commit atılıyor..."\n                & git add .\n                & git commit -m "All features tested, version updated to $newVersion, changelog generated, builds ready, beta prepared"\n                Write-Host "[INFO] Commit başarıyla tamamlandı."\n            } else {\n                Write-Host "[INFO] Commit için değişiklik yok. Atlanıyor."\n            }\n        } else {\n            Write-Warning "[WARN] Git repository değil; commit atlanıyor."\n        }\n    } catch {\n        Write-Warning "[WARN] Git commit sırasında hata: $($_.Exception.Message)"\n    }\n\n    # ------------ YARI-OTOMATİK BETA/RELEASE REHBERİ ------------\n    Write-Host ""\n    Write-Host "==============================="\n    Write-Host "YARI-OTOMATİK BETA/RELEASE ADIMLARI"\n    Write-Host "==============================="\n    if (-not (Test-Path $appleCertPath)) { Write-Warning "[WARN] Apple sertifikası bulunamadı: $appleCertPath" } else { Write-Host "[INFO] Apple sertifikası bulundu." }\n    if (-not (Test-Path $googleKeyPath)) { Write-Warning "[WARN] Google Play API key bulunamadı: $googleKeyPath" } else { Write-Host "[INFO] Google Play API key bulundu." }\n    Write-Host "[INFO] TestFlight beta yüklemek için Fastlane komutlarını CI macOS runner'da çalıştırın:"\n    Write-Host "       fastlane match appstore"\n    Write-Host "       fastlane ios beta"\n    Write-Host "[INFO] Play Store Beta için Google Play Console veya Fastlane supply kullanın (PLAYSTORE_JSON secret)."\n    Write-Host "[INFO] Android/iOS beta cihazlarında uygulamayı test edin."\n    Write-Host "[INFO] App Store / Play Store metadata, ikon, ekran görüntülerini kontrol edin."\n\n    Write-Host "[INFO] İşlem başarılı. Artefactler $outAndroid ve $outiOS içinde (varsa). Log: $logFile"\n}\ncatch {\n    Write-Error "[FATAL] İşlem sırasında hata: $($_.Exception.Message)"\n    exit 1\n}\nfinally {\n    try {\n        Stop-Transcript | Out-Null\n    } catch {}\n}\n'@ | Set-Content -Path ".\tools\release-full.ps1" -Encoding UTF8\n\n# 3) release-full-check.ps1 (kontrol + otomatik küçük düzeltmeler) - yaz\n@'\n# =================================================================================\n# release-full-check.ps1\n# release-full.ps1 çalıştırmadan önce eksik dosya, araç ve sertifika kontrollerini yapar.\n# =================================================================================\n\n$ErrorActionPreference = 'Stop'\n\n# Repo root tespiti (git varsa git kökünü kullan)\n$gitRoot = (& git rev-parse --show-toplevel 2>$null).Trim()\nif (-not $gitRoot) { $gitRoot = (Resolve-Path ".").Path }\n\nWrite-Host "[INFO] Workspace kökü: $gitRoot"\n\n$scriptPath = Join-Path $gitRoot "tools\release-full.ps1"\n$versionFile = Join-Path $gitRoot "VERSION.txt"\n$androidManifest = Join-Path $gitRoot "Android\Properties\AndroidManifest.xml"\n$iosInfoPlist = Join-Path $gitRoot "iOS\Info.plist"\n$gitFolder = Join-Path $gitRoot ".git"\n\n$errors = @()\n\nif (-not (Test-Path $scriptPath)) { $errors += "❌ release-full.ps1 dosyası bulunamadı: $scriptPath" }\nif (-not (Test-Path $versionFile)) {\n    $errors += "⚠ VERSION.txt bulunamadı, otomatik oluşturuluyor."\n    "1.0.0" | Out-File -FilePath $versionFile -Encoding UTF8\n}\nif (-not (Test-Path $androidManifest)) { $errors += "⚠ AndroidManifest.xml bulunamadı: $androidManifest" }\nif (-not (Test-Path $iosInfoPlist)) { $errors += "⚠ Info.plist bulunamadı: $iosInfoPlist" }\nif (-not (Test-Path $gitFolder)) { $errors += "⚠ .git klasörü bulunamadı; git ile çalışan adımlar atlanacaktır." }\n\n# Araç kontrolleri\nif (-not (Get-Command "apksigner" -ErrorAction SilentlyContinue) -and -not (Get-Command "jarsigner" -ErrorAction SilentlyContinue)) {\n    $errors += "⚠ apksigner/jarsigner bulunamadı. Android imzalama için Android SDK veya JDK gereklidir."\n}\nif (-not (Get-Command "fastlane" -ErrorAction SilentlyContinue)) { $errors += "⚠ fastlane bulunamadı. iOS dağıtımı için fastlane gereklidir (CI macOS runner)." }\n\n# Sertifika/anahtar kontrolü\n$appleCertPath = Join-Path $gitRoot "certs\apple_certificate.p12"\n$googleKeyPath = Join-Path $gitRoot "certs\google_play_service_account.json"\nif (-not (Test-Path $appleCertPath)) { $errors += "⚠ Apple sertifikası bulunamadı: $appleCertPath" }\nif (-not (Test-Path $googleKeyPath)) { $errors += "⚠ Google Play API key bulunamadı: $googleKeyPath" }\n\nif ($errors.Count -gt 0) {\n    Write-Host "======================= KONTROL RAPORU ======================="\n    $errors | ForEach-Object { Write-Host $_ }\n    Write-Host "Lütfen eksikleri tamamladıktan sonra scripti tekrar çalıştırın."\n    Write-Host "=============================================================="\n    exit 1\n}\n\nWrite-Host "[INFO] Tüm ön kontroller geçti. release-full.ps1 çalıştırılıyor..."\n# release-full.ps1 çalıştır\n& $scriptPath\n'@ | Set-Content -Path ".\tools\release-full-check.ps1" -Encoding UTF8\n\n# 4) GitHub Actions workflow - yaz\n@'\nname: Full Release Pipeline\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  build_windows_android:\n    name: Build & Release (Windows - Android)\n    runs-on: windows-latest\n    env:\n      KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}\n      KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n      PLAYSTORE_JSON: ${{ secrets.PLAYSTORE_JSON }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n\n      - name: Run release-full-check and release (Windows)\n        shell: pwsh\n        run: |\n          Set-ExecutionPolicy Bypass -Scope Process -Force\n          .\tools\release-full-check.ps1\n\n      - name: Upload Artifacts\n        if: success()\n        uses: actions/upload-artifact@v3\n        with:\n          name: BuildArtifacts\n          path: out/\n\n  build_macos_ios:\n    name: Build & Release (macOS - iOS)\n    runs-on: macos-latest\n    needs: build_windows_android\n    env:\n      APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}\n      FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n\n      - name: Run release-full-check and release (macOS)\n        shell: bash\n        run: |\n          sudo gem install fastlane -v 2.0 --no-document || true\n          pwsh -c './tools/release-full-check.ps1'\n'@ | Set-Content -Path ".\.github\workflows\release-full.yml" -Encoding UTF8\n\n# 5) İzinler (Linux/macOS runner'lar için) - Windows'ta gerekli değil\nif ($IsLinux -or $IsMacOS) {\n    chmod +x .\tools\release-full.ps1 2>$null\n    chmod +x .\tools\release-full-check.ps1 2>$null\n}\n\n# 6) Son adım: kontrol scriptini çalıştır\nWrite-Host "==============================="\nWrite-Host "ÖN KONTROL: release-full-check.ps1 çalıştırılıyor..."\nWrite-Host "Eğer eksik bir şey varsa script açıkça bildirecek."\nWrite-Host "==============================="\npowershell -NoProfile -ExecutionPolicy Bypass -File ".\tools\release-full-check.ps1"\n