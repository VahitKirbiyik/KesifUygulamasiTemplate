param()\n$ErrorActionPreference = 'Stop'\n\nfunction Write-Log {\n    param([string]$msg)\n    Add-Content -Path "tools/release-full-check.log" -Value ((Get-Date -Format o) + " $msg")\n}\n\nWrite-Log "release-full-check.ps1 başladı."\nWrite-Host "release-full-check.ps1 başladı."\n\n# Dotnet CLI kontrolü\nif (-not (Get-Command dotnet -ErrorAction SilentlyContinue)) {\n    Write-Log "dotnet CLI bulunamadı."\n    Write-Host "[HATA] dotnet CLI bulunamadı. Lütfen .NET 8 SDK yükleyin."\n    exit 1\n}\n\n# signtool kontrolü\nif (-not (Get-Command signtool -ErrorAction SilentlyContinue)) {\n    Write-Log "signtool bulunamadı."\n    Write-Host "[HATA] signtool bulunamadı. Lütfen Windows SDK yükleyin."\n    exit 1\n}\n\n# NuGet CLI kontrolü\nif (-not (Get-Command nuget -ErrorAction SilentlyContinue)) {\n    Write-Log "NuGet CLI bulunamadı."\n    Write-Host "[HATA] NuGet CLI bulunamadı. Lütfen nuget.exe ekleyin."\n    exit 1\n}\n\n# Sertifika dosyası kontrolü\n$certFiles = @("tools/codesign.pfx", "tools/codesign.cer", "tools/codesign.key")\n$certFound = $false\nforeach ($cert in $certFiles) {\n    if (Test-Path $cert) { $certFound = $true }\n}\nif (-not $certFound) {\n    Write-Log "Sertifika dosyası eksik."\n    Write-Host "[HATA] Sertifika dosyası eksik. tools klasörüne .pfx/.cer/.key ekleyin."\n    exit 1\n}\n\n# .resx encoding kontrolü (UTF-8)\n$resxFiles = Get-ChildItem -Path "Resources/Strings" -Filter *.resx -Recurse\nforeach ($file in $resxFiles) {\n    $bytes = [System.IO.File]::ReadAllBytes($file.FullName)\n    if ($bytes.Length -gt 3 -and $bytes[0] -eq 0xEF -and $bytes[1] -eq 0xBB -and $bytes[2] -eq 0xBF) {\n        Write-Log "$($file.Name) UTF-8 BOM ile kaydedilmiş."\n    } else {\n        Write-Log "$($file.Name) UTF-8 BOM'suz veya farklı encoding."\n        Write-Host "[UYARI] $($file.Name) dosyası UTF-8 BOM ile kaydedilmeli."\n    }\n}\n\nWrite-Log "release-full-check.ps1 tamamlandı."\nWrite-Host "release-full-check.ps1 tamamlandı."\nexit 0\n