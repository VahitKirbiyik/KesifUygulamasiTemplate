using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Storage;\nusing KesifUygulamasiTemplate.Models;\nusing SQLite;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class DatabaseService\n    {\n        readonly SQLiteAsyncConnection db;\n        private bool _isInitialized = false;\n\n        // Parametresiz yapıcı: DI container'dan doğrudan kullanılabilir\n        public DatabaseService()\n            : this(Path.Combine(FileSystem.AppDataDirectory, "locations.db3"))\n        {\n        }\n\n        // Asıl yapıcı: verilen dosya yolunu kullanır\n        public DatabaseService(string dbPath)\n        {\n            db = new SQLiteAsyncConnection(dbPath);\n            db.CreateTableAsync<MoonData>().Wait();\n        }\n\n        // Veritabanını başlatır\n        public async Task InitializeAsync()\n        {\n            if (_isInitialized)\n                return;\n\n            try\n            {\n                await db.CreateTableAsync<LocationModel>();\n                await db.CreateTableAsync<MapTile>();\n                await db.CreateTableAsync<SavedRoute>();\n                await db.CreateTableAsync<RoutePoint>();\n                _isInitialized = true;\n            }\n            catch (Exception ex)\n            {\n                throw new InvalidOperationException($"Veritabanı başlatılamadı: {ex.Message}", ex);\n            }\n        }\n\n        // Tüm kayıtları getirir\n        public async Task<List<LocationModel>> GetAllAsync()\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<LocationModel>().ToListAsync();\n        }\n\n        // Tüm konumları getirir (MapPage için)\n        public async Task<List<LocationModel>> GetAllLocationsAsync()\n        {\n            return await GetAllAsync();\n        }\n\n        // ID ile kayıt getirir\n        public async Task<LocationModel?> GetByIdAsync(int id)\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<LocationModel>().Where(l => l.Id == id).FirstOrDefaultAsync().ConfigureAwait(false);\n        }\n\n        // Yeni kayıt ekler veya var olanı günceller\n        public async Task<int> SaveLocationAsync(LocationModel location)\n        {\n            await EnsureInitializedAsync();\n\n            if (location == null)\n                throw new ArgumentNullException(nameof(location));\n\n            location.CreatedAt = location.CreatedAt == default ? DateTime.UtcNow : location.CreatedAt;\n\n            return location.Id != 0\n                ? await db.UpdateAsync(location)\n                : await db.InsertAsync(location);\n        }\n\n        // Kayıt siler\n        public async Task<int> DeleteLocationAsync(LocationModel location)\n        {\n            await EnsureInitializedAsync();\n\n            if (location == null)\n                throw new ArgumentNullException(nameof(location));\n\n            return await db.DeleteAsync(location);\n        }\n\n        // Offline senkronizasyon için eksik metodlar\n        public async Task<List<LocationModel>> GetAllOfflineLocationsAsync()\n        {\n            await EnsureInitializedAsync();\n            // Offline flag'i olan konumları getir (gelecekte offline flag eklenebilir)\n            return await db.Table<LocationModel>().ToListAsync();\n        }\n\n        public async Task<int> DeleteOfflineLocationAsync(LocationModel location)\n        {\n            await EnsureInitializedAsync();\n            return await DeleteLocationAsync(location);\n        }\n\n        // MoonData için CRUD işlemleri\n        public Task<int> InsertMoonDataAsync(MoonData data)\n            => db.InsertAsync(data);\n\n        public Task<int> UpdateMoonDataAsync(MoonData data)\n            => db.UpdateAsync(data);\n\n        public Task<MoonData> GetMoonDataAsync(double lat, double lon, DateTime date)\n            => db.Table<MoonData>()\n                .Where(x => x.Latitude == lat && x.Longitude == lon && x.Date == date.Date)\n                .FirstOrDefaultAsync();\n\n        public Task<List<MoonData>> GetAllMoonDataAsync()\n            => db.Table<MoonData>().ToListAsync();\n\n        public Task<int> DeleteOldDataAsync(DateTime cutoffDate)\n            => db.Table<MoonData>()\n                .Where(x => x.Date < cutoffDate)\n                .DeleteAsync();\n\n        // MapTile için CRUD işlemleri\n        public async Task<int> SaveMapTileAsync(MapTile tile)\n        {\n            await EnsureInitializedAsync();\n            if (tile == null)\n                throw new ArgumentNullException(nameof(tile));\n\n            tile.DownloadedDate = tile.DownloadedDate == default ? DateTime.Now : tile.DownloadedDate;\n            tile.LastAccessed = DateTime.Now;\n\n            return tile.Id != 0\n                ? await db.UpdateAsync(tile)\n                : await db.InsertAsync(tile);\n        }\n\n        public async Task<MapTile?> GetMapTileAsync(int x, int y, int zoom)\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<MapTile>()\n                .Where(t => t.X == x && t.Y == y && t.Zoom == zoom)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<int> UpdateMapTileAsync(MapTile tile)\n        {\n            await EnsureInitializedAsync();\n            if (tile == null)\n                throw new ArgumentNullException(nameof(tile));\n\n            tile.LastAccessed = DateTime.Now;\n            return await db.UpdateAsync(tile);\n        }\n\n        public async Task<int> DeleteOldMapTilesAsync(DateTime cutoffDate)\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<MapTile>()\n                .Where(t => t.LastAccessed < cutoffDate)\n                .DeleteAsync();\n        }\n\n        public async Task<int> GetMapTileCountAsync()\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<MapTile>().CountAsync();\n        }\n\n        public async Task<long> GetMapTilesTotalSizeAsync()\n        {\n            await EnsureInitializedAsync();\n            var tiles = await db.Table<MapTile>().ToListAsync();\n            long totalSize = 0;\n            foreach (var tile in tiles)\n            {\n                totalSize += tile.SizeInBytes;\n            }\n            return totalSize;\n        }\n\n        public async Task<MapTile?> GetOldestMapTileAsync()\n        {\n            await EnsureInitializedAsync();\n            return await db.Table<MapTile>()\n                .OrderBy(t => t.LastAccessed)\n                .FirstOrDefaultAsync();\n        }\n\n        // Veritabanının başlatıldığından emin olur\n        private async Task EnsureInitializedAsync()\n        {\n            if (!_isInitialized)\n                await InitializeAsync();\n        }\n    }\n}\n