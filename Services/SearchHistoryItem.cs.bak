using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using KesifUygulamasiTemplate.Models;
using KesifUygulamasiTemplate.Services.Interfaces;
using Microsoft.Maui.Networking;
using SQLite;
using Microsoft.Extensions.Configuration; // IConfiguration için gerekli

namespace KesifUygulamasiTemplate.Models
{
    [Table("SearchHistory")]
    public class SearchHistoryItem
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }

        public string Query { get; set; } = "";

        public int SearchCount { get; set; } = 1;

        public DateTime LastSearchedAt { get; set; } = DateTime.UtcNow;

        public double? Latitude { get; set; }

        public double? Longitude { get; set; }
    }

    public class SearchResult
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Category { get; set; } = "";
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string Address { get; set; }
        public double? DistanceKm { get; set; }
        public string Icon { get; set; }
    }
}

namespace KesifUygulamasiTemplate.Services
{
    public interface ISearchService
    {
        Task<IEnumerable<SearchResult>> SearchPlacesAsync(string query, double? latitude = null, double? longitude = null);
        Task<IEnumerable<SearchHistoryItem>> GetSearchHistoryAsync(int limit = 10);
        Task<IEnumerable<string>> GetSuggestionsAsync(string partialQuery, int limit = 5);
        Task AddToSearchHistoryAsync(string query, double? latitude = null, double? longitude = null);
        Task ClearSearchHistoryAsync();
    }

    public class SearchService : ISearchService
    {
        private readonly SQLiteAsyncConnection _database;
        private readonly IConnectivity _connectivity;
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);
        private readonly IFavoritePlacesService _favoritePlacesService;

        private const int MAX_HISTORY_ITEMS = 100;

        public SearchService(SQLiteAsyncConnection database, IConnectivity connectivity,
                            HttpClient httpClient, IConfiguration config,
                            IFavoritePlacesService favoritePlacesService, ConfigurationService configurationService)
        {
            _database = database;
            _connectivity = connectivity;
            _httpClient = httpClient;
            _apiKey = configurationService.GoogleMapsApiKey;
            _favoritePlacesService = favoritePlacesService;

            // Veritaban� tablosunu olu�tur
            _database.CreateTableAsync<SearchHistoryItem>().Wait();
        }

        public async Task<IEnumerable<SearchResult>> SearchPlacesAsync(string query, double? latitude = null, double? longitude = null)
        {
            if (string.IsNullOrWhiteSpace(query))
                return Enumerable.Empty<SearchResult>();

            var results = new List<SearchResult>();

            // �nce aramay� ge�mi�e ekle
            await AddToSearchHistoryAsync(query, latitude, longitude);

            // 1. Favori yerlerden ara
            try
            {
                var favoriteResults = await SearchInFavoritesAsync(query, latitude, longitude);
                results.AddRange(favoriteResults);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Favorilerde arama hatas�: {ex.Message}");
            }

            // 2. �evrimi�i API ile ara (internet varsa)
            if (_connectivity.NetworkAccess == NetworkAccess.Internet)
            {
                try
                {
                    var onlineResults = await SearchOnlineAsync(query, latitude, longitude);

                    // Favorilerde olmayan sonu�lar� ekle
                    foreach (var result in onlineResults)
                    {
                        if (!results.Any(r =>
                            r.Latitude == result.Latitude &&
                            r.Longitude == result.Longitude &&
                            r.Name == result.Name))
                        {
                            results.Add(result);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"�evrimi�i arama hatas�: {ex.Message}");
                }
            }
            else
            {
                // 3. �evrimd��� arama (internet yoksa)
                try
                {
                    var offlineResults = await SearchOfflineAsync(query, latitude, longitude);

                    foreach (var result in offlineResults)
                    {
                        if (!results.Any(r => r.Id == result.Id))
                        {
                            results.Add(result);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"�evrimd��� arama hatas�: {ex.Message}");
                }
            }

            // Sonu�lar� mesafeye g�re s�rala (konum bilgisi varsa)
            if (latitude.HasValue && longitude.HasValue)
            {
                results = results
                    .OrderBy(r => r.DistanceKm ?? double.MaxValue)
                    .ToList();
            }
            else
            {
                // Konum yoksa isme g�re s�rala
                results = results
                    .OrderBy(r => r.Name)
                    .ToList();
            }

            return results;
        }

        public async Task<IEnumerable<SearchHistoryItem>> GetSearchHistoryAsync(int limit = 10)
        {
            try
            {
                return await _database.Table<SearchHistoryItem>()
                    .OrderByDescending(h => h.LastSearchedAt)
                    .Take(limit)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Arama ge�mi�ini getirme hatas�: {ex.Message}");
                return Enumerable.Empty<SearchHistoryItem>();
            }
        }

        public async Task<IEnumerable<string>> GetSuggestionsAsync(string partialQuery, int limit = 5)
        {
            if (string.IsNullOrWhiteSpace(partialQuery) || partialQuery.Length < 2)
                return Enumerable.Empty<string>();

            try
            {
                var lowercaseQuery = partialQuery.ToLowerInvariant();

                // Ge�mi� aramalardan �neriler
                var historyItems = await _database.Table<SearchHistoryItem>()
                    .ToListAsync();

                var suggestions = historyItems
                    .Where(h => h.Query.ToLowerInvariant().Contains(lowercaseQuery))
                    .OrderByDescending(h => h.SearchCount)
                    .ThenByDescending(h => h.LastSearchedAt)
                    .Take(limit)
                    .Select(h => h.Query)
                    .ToList();

                // Yeteri kadar �neri yoksa, favori yerlerden tamamla
                if (suggestions.Count < limit)
                {
                    try
                    {
                        var favorites = await _favoritePlacesService.GetAllFavoritePlacesAsync();
                        var favoriteNames = favorites
                            .Where(f => f.Name.ToLowerInvariant().Contains(lowercaseQuery))
                            .OrderBy(f => f.Name)
                            .Take(limit - suggestions.Count)
                            .Select(f => f.Name);

                        suggestions.AddRange(favoriteNames.Where(n => !suggestions.Contains(n)));
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Favori yerlerden �neri getirme hatas�: {ex.Message}");
                    }
                }

                return suggestions.Take(limit);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"�neri getirme hatas�: {ex.Message}");
                return Enumerable.Empty<string>();
            }
        }

        public async Task AddToSearchHistoryAsync(string query, double? latitude = null, double? longitude = null)
        {
            if (string.IsNullOrWhiteSpace(query))
                return;

            await _semaphore.WaitAsync();
            try
            {
                // Ayn� sorgu varsa g�ncelle
                var existingItem = await _database.Table<SearchHistoryItem>()
                    .Where(h => h.Query.ToLower() == query.ToLower())
                    .FirstOrDefaultAsync();

                if (existingItem != null)
                {
                    existingItem.SearchCount++;
                    existingItem.LastSearchedAt = DateTime.UtcNow;

                    if (latitude.HasValue && longitude.HasValue)
                    {
                        existingItem.Latitude = latitude;
                        existingItem.Longitude = longitude;
                    }

                    await _database.UpdateAsync(existingItem);
                }
                else
                {
                    // Yeni arama kayd� ekle
                    await _database.InsertAsync(new SearchHistoryItem
                    {
                        Query = query,
                        SearchCount = 1,
                        LastSearchedAt = DateTime.UtcNow,
                        Latitude = latitude,
                        Longitude = longitude
                    });

                    // Maksimum kay�t say�s�n� a�m��sa, en eski kay�tlar� sil
                    var count = await _database.Table<SearchHistoryItem>().CountAsync();
                    if (count > MAX_HISTORY_ITEMS)
                    {
                        var oldestItems = await _database.Table<SearchHistoryItem>()
                            .OrderBy(h => h.LastSearchedAt)
                            .Take(count - MAX_HISTORY_ITEMS)
                            .ToListAsync();

                        foreach (var item in oldestItems)
                        {
                            await _database.DeleteAsync(item);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Arama ge�mi�ine ekleme hatas�: {ex.Message}");
            }
            finally
            {
                _semaphore.Release();
            }
        }

        public async Task ClearSearchHistoryAsync()
        {
            await _semaphore.WaitAsync();
            try
            {
                await _database.DeleteAllAsync<SearchHistoryItem>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Arama ge�mi�ini temizleme hatas�: {ex.Message}");
            }
            finally
            {
                _semaphore.Release();
            }
        }

        // Yard�mc� metotlar
        private async Task<IEnumerable<SearchResult>> SearchInFavoritesAsync(string query, double? latitude, double? longitude)
        {
            var favorites = await _favoritePlacesService.GetAllFavoritePlacesAsync();

            // �sim, a��klama veya adres i�inde arama
            var matchingFavorites = favorites
                .Where(f =>
                    f.Name.ToLowerInvariant().Contains(query.ToLowerInvariant()) ||
                    (f.Description != null && f.Description.ToLowerInvariant().Contains(query.ToLowerInvariant())) ||
                    (f.Address != null && f.Address.ToLowerInvariant().Contains(query.ToLowerInvariant())))
                .ToList();

            var results = new List<SearchResult>();

            foreach (var favorite in matchingFavorites)
            {
                var result = new SearchResult
                {
                    Id = $"favorite_{favorite.Id}",
                    Name = favorite.Name,
                    Description = favorite.Description,
                    Category = favorite.Category,
                    Latitude = favorite.Latitude,
                    Longitude = favorite.Longitude,
                    Address = favorite.Address,
                    Icon = favorite.IconName
                };

                // Mesafe hesapla (e�er konum bilgisi varsa)
                if (latitude.HasValue && longitude.HasValue)
                {
                    result.DistanceKm = CalculateDistance(
                        latitude.Value, longitude.Value,
                        favorite.Latitude, favorite.Longitude);
                }

                results.Add(result);
            }

            return results;
        }

        private async Task<IEnumerable<SearchResult>> SearchOnlineAsync(string query, double? latitude, double? longitude)
        {
            // Ger�ek uygulamada Google Places API, Bing Places API, vb. kullan�labilir
            // Burada Google Places API kullanan bir �rnek

            try
            {
                string url;
                if (latitude.HasValue && longitude.HasValue)
                {
                    // Konuma g�re arama
                    url = $"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={latitude},{longitude}&radius=5000&keyword={Uri.EscapeDataString(query)}&key={_apiKey}";
                }
                else
                {
                    // Metin aramas�
                    url = $"https://maps.googleapis.com/maps/api/place/textsearch/json?query={Uri.EscapeDataString(query)}&key={_apiKey}";
                }

                var response = await _httpClient.GetAsync(url);

                if (response.IsSuccessStatusCode)
                {
                    var placesResponse = await response.Content.ReadFromJsonAsync<GooglePlacesResponse>();

                    if (placesResponse?.Status == "OK" && placesResponse.Results != null)
                    {
                        var results = new List<SearchResult>();

                        foreach (var place in placesResponse.Results)
                        {
                            var result = new SearchResult
                            {
                                Id = $"google_{place.PlaceId}",
                                Name = place.Name,
                                Description = place.Vicinity,
                                Category = place.Types?.FirstOrDefault() ?? "place",
                                Latitude = place.Geometry.Location.Lat,
                                Longitude = place.Geometry.Location.Lng,
                                Address = place.Vicinity,
                                Icon = place.Icon
                            };

                            // Mesafe hesapla (e�er konum bilgisi varsa)
                            if (latitude.HasValue && longitude.HasValue)
                            {
                                result.DistanceKm = CalculateDistance(
                                    latitude.Value, longitude.Value,
                                    result.Latitude, result.Longitude);
                            }

                            results.Add(result);
                        }

                        return results;
                    }
                }

                return Enumerable.Empty<SearchResult>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Online arama hatas�: {ex.Message}");

                // API sim�lasyonu - ger�ek uygulamada kald�r�lmal�
                await Task.Delay(500);
                return SimulateSearchResults(query, latitude, longitude);
            }
        }

        private async Task<IEnumerable<SearchResult>> SearchOfflineAsync(string query, double? latitude, double? longitude)
        {
            // �evrimd��� oldu�umuzda sadece favori yerlerimiz ve daha �nce arad���m�z yerler var

            // Arama ge�mi�inden koordinatlar� olan sonu�lar� getir
            var historyResults = new List<SearchResult>();

            try
            {
                var historyItems = await _database.Table<SearchHistoryItem>()
                    .Where(h => h.Latitude != null && h.Longitude != null)
                    .ToListAsync();

                var matchingHistory = historyItems
                    .Where(h => h.Query.ToLowerInvariant().Contains(query.ToLowerInvariant()))
                    .OrderByDescending(h => h.LastSearchedAt)
                    .Take(10)
                    .ToList();

                foreach (var item in matchingHistory)
                {
                    var result = new SearchResult
                    {
                        Id = $"history_{item.Id}",
                        Name = item.Query,
                        Latitude = item.Latitude.Value,
                        Longitude = item.Longitude.Value,
                        Category = "history",
                        Icon = "history"
                    };

                    // Mesafe hesapla (e�er konum bilgisi varsa)
                    if (latitude.HasValue && longitude.HasValue)
                    {
                        result.DistanceKm = CalculateDistance(
                            latitude.Value, longitude.Value,
                            result.Latitude, result.Longitude);
                    }

                    historyResults.Add(result);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Arama ge�mi�inden arama hatas�: {ex.Message}");
            }

            // Favori yerlerden sonu�lar� ekle
            var favoriteResults = await SearchInFavoritesAsync(query, latitude, longitude);

            return historyResults.Concat(favoriteResults);
        }

        private List<SearchResult> SimulateSearchResults(string query, double? latitude, double? longitude)
        {
            // Ger�ek API olmad���nda test i�in sim�le edilmi� sonu�lar
            var rand = new Random();
            var results = new List<SearchResult>();

            if (!latitude.HasValue || !longitude.HasValue)
            {
                // Konum yoksa basit sonu�lar d�nd�r
                results.Add(new SearchResult
                {
                    Id = $"sim_1",
                    Name = $"{query} Cafe",
                    Description = "Sim�le edilmi� cafe",
                    Category = "cafe",
                    Latitude = 41.0082,
                    Longitude = 28.9784,
                    Address = "�rnek Caddesi No:1",
                    Icon = "coffee"
                });

                results.Add(new SearchResult
                {
                    Id = $"sim_2",
                    Name = $"{query} Restaurant",
                    Description = "Sim�le edilmi� restoran",
                    Category = "restaurant",
                    Latitude = 41.0082,
                    Longitude = 28.9784,
                    Address = "�rnek Sokak No:2",
                    Icon = "food"
                });

                return results;
            }

            // Konum varsa, o konumun etraf�nda rastgele noktalar olu�tur
            for (int i = 0; i < 3; i++)
            {
                // Rastgele noktalar olu�tur (5 km yar��ap i�inde)
                double offset = (rand.NextDouble() * 0.05) - 0.025; // ~2.5 km'ye kadar
                double lat = latitude.Value + offset;
                double lng = longitude.Value + offset;

                string[] categories = { "cafe", "restaurant", "shop", "hotel", "attraction" };
                string category = categories[rand.Next(categories.Length)];

                string[] icons = { "coffee", "food", "cart", "bed", "monument" };
                string icon = icons[rand.Next(icons.Length)];

                var distance = CalculateDistance(latitude.Value, longitude.Value, lat, lng);

                results.Add(new SearchResult
                {
                    Id = $"sim_{i}",
                    Name = $"{query} {category.ToUpperInvariant()} {i + 1}",
                    Description = $"Sim�le edilmi� {category}",
                    Category = category,
                    Latitude = lat,
                    Longitude = lng,
                    Address = $"�rnek Mahallesi, {rand.Next(1, 50)}. Sokak No:{rand.Next(1, 100)}",
                    DistanceKm = distance,
                    Icon = icon
                });
            }

            return results;
        }

        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
        {
            const double R = 6371; // D�nya yar��ap� (km)
            var dLat = ToRadians(lat2 - lat1);
            var dLon = ToRadians(lon2 - lon1);

            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                    Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
            return R * c;
        }

        private double ToRadians(double degrees)
        {
            return degrees * Math.PI / 180;
        }
    }

    // Google Places API yan�t modelleri
    public class GooglePlacesResponse
    {
        public string Status { get; set; } = "";
        public List<GooglePlace> Results { get; set; } = new();
    }

    public class GooglePlace
    {
        public string PlaceId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Vicinity { get; set; } = "";
        public string Icon { get; set; } = "";
        public List<string> Types { get; set; } = new();
        public GoogleGeometry Geometry { get; set; } = null!;
    }

    public class GoogleGeometry
    {
        public GoogleLocation Location { get; set; } = null!;
    }

    public class GoogleLocation
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }
}
