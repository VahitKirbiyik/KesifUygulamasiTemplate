using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Global routing servisi - CI/CD pipeline ile entegre fallback zinciri\n    /// </summary>\n    public class RoutingService : IRoutingService\n    {\n        private readonly ILogger<RoutingService> _logger;\n        private readonly IBadgeService _badgeService;\n        private readonly IMonitoringService _monitoringService;\n\n        // Provider priority list - CI/CD için environment variable desteği\n        private readonly List<string> _providerPriority = new()\n        {\n            Environment.GetEnvironmentVariable("PRIMARY_ROUTING_PROVIDER") ?? "HERE",\n            Environment.GetEnvironmentVariable("SECONDARY_ROUTING_PROVIDER") ?? "Mapbox",\n            Environment.GetEnvironmentVariable("TERTIARY_ROUTING_PROVIDER") ?? "Google",\n            "Offline"\n        };\n\n        // CI/CD için test modu\n        private readonly bool _isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                                  Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n        public RoutingService(\n            ILogger<RoutingService> logger,\n            IBadgeService badgeService,\n            IMonitoringService monitoringService)\n        {\n            _logger = logger;\n            _badgeService = badgeService;\n            _monitoringService = monitoringService;\n        }\n\n        /// <summary>\n        /// Global routing fallback zinciri ile rota hesaplar\n        /// </summary>\n        public async Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType = RouteOptimizationType.Fastest)\n        {\n            var providers = new List<IRoutingProvider>\n            {\n                new HereMapsProvider(_logger),\n                new MapboxProvider(_logger),\n                new GoogleMapsProvider(_logger),\n                new OfflineRoutingProvider(_logger)\n            };\n\n            Exception lastException = null;\n            RouteResult result = null;\n\n            foreach (var provider in providers)\n            {\n                try\n                {\n                    _logger.LogInformation("Routing provider deneniyor: {Provider}", provider.GetType().Name);\n\n                    result = await provider.GetRouteAsync(from, to, optimizationType);\n\n                    if (result != null && result.IsSuccessful)\n                    {\n                        _logger.LogInformation("✅ Rota başarıyla hesaplandı: {Provider}", provider.GetType().Name);\n\n                        // Monitoring ve badge güncellemeleri\n                        await _monitoringService.LogProviderUsageAsync(provider.GetType().Name);\n                        await _monitoringService.LogRouteTypeUsageAsync(optimizationType.ToString());\n\n                        // Badge tetikleme\n                        await _badgeService.AwardBadgeAsync("Routing-Fallback");\n\n                        return result;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogWarning(ex, "Routing provider başarısız: {Provider}", provider.GetType().Name);\n                    lastException = ex;\n\n                    // Fallback kullanımını logla\n                    await _monitoringService.LogFallbackUsageAsync(provider.GetType().Name, ex.Message);\n                }\n            }\n\n            // Tüm provider'lar başarısız olursa\n            _logger.LogError(lastException, "Tüm routing provider'ları başarısız oldu");\n\n            // Test ortamında mock sonuç döndür\n            if (_isTestEnvironment)\n            {\n                _logger.LogInformation("Test ortamı tespit edildi, mock rota sonucu döndürülüyor");\n                return await GetMockRouteResultAsync(from, to, optimizationType);\n            }\n\n            throw new RoutingException("Tüm routing provider'ları başarısız oldu", lastException);\n        }\n\n        /// <summary>\n        /// Tüm provider'ların durumunu kontrol eder\n        /// </summary>\n        public async Task<Dictionary<string, bool>> CheckProviderStatusAsync()\n        {\n            var status = new Dictionary<string, bool>();\n            var providers = new List<IRoutingProvider>\n            {\n                new HereMapsProvider(_logger),\n                new MapboxProvider(_logger),\n                new GoogleMapsProvider(_logger),\n                new OfflineRoutingProvider(_logger)\n            };\n\n            foreach (var provider in providers)\n            {\n                try\n                {\n                    var isAvailable = await provider.CheckAvailabilityAsync();\n                    status[provider.GetType().Name] = isAvailable;\n                    _logger.LogInformation("Provider durumu: {Provider} = {Status}", provider.GetType().Name, isAvailable);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, "Provider durumu kontrol edilemedi: {Provider}", provider.GetType().Name);\n                    status[provider.GetType().Name] = false;\n                }\n            }\n\n            return status;\n        }\n\n        /// <summary>\n        /// Test ortamı için mock rota sonucu oluşturur\n        /// </summary>\n        private async Task<RouteResult> GetMockRouteResultAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType)\n        {\n            // Mock rota hesaplaması\n            var distance = CalculateDistance(from, to);\n            var duration = TimeSpan.FromMinutes(distance * 2); // Yaklaşık 30km/saat hız\n\n            var mockResult = new RouteResult\n            {\n                IsSuccessful = true,\n                Distance = distance,\n                Duration = duration,\n                Provider = "MockProvider",\n                OptimizationType = optimizationType,\n                Steps = new List<RouteStep>\n                {\n                    new RouteStep\n                    {\n                        Instruction = "Test rotası başlatıldı",\n                        Distance = distance / 2,\n                        Duration = TimeSpan.FromMinutes(duration.TotalMinutes / 2)\n                    },\n                    new RouteStep\n                    {\n                        Instruction = "Test rotası tamamlandı",\n                        Distance = distance / 2,\n                        Duration = TimeSpan.FromMinutes(duration.TotalMinutes / 2)\n                    }\n                }\n            };\n\n            _logger.LogInformation("Mock rota sonucu oluşturuldu: {Distance}km, {Duration}", distance, duration);\n            return mockResult;\n        }\n\n        /// <summary>\n        /// İki koordinat arası mesafeyi hesaplar (km cinsinden)\n        /// </summary>\n        private double CalculateDistance(Coordinate from, Coordinate to)\n        {\n            const double EarthRadius = 6371; // km\n\n            var dLat = ToRadians(to.Latitude - from.Latitude);\n            var dLon = ToRadians(to.Longitude - from.Longitude);\n\n            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                    Math.Cos(ToRadians(from.Latitude)) * Math.Cos(ToRadians(to.Latitude)) *\n                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n            return EarthRadius * c;\n        }\n\n        private double ToRadians(double degrees) => degrees * Math.PI / 180;\n\n        // Eski interface metodları için backward compatibility\n        public Task<DirectionsRoute?> GetRouteAsync(LatLng from, LatLng to)\n        {\n            var coordinateFrom = new Coordinate { Latitude = from.Latitude, Longitude = from.Longitude };\n            var coordinateTo = new Coordinate { Latitude = to.Latitude, Longitude = to.Longitude };\n\n            return GetRouteAsync(coordinateFrom, coordinateTo).ContinueWith(t =>\n            {\n                if (t.Result?.IsSuccessful == true)\n                {\n                    return new DirectionsRoute\n                    {\n                        Points = new List<LatLng> { from, to },\n                        Distance = t.Result.Distance,\n                        Duration = t.Result.Duration\n                    };\n                }\n                return null;\n            });\n        }\n\n        public Task<Route> CalculateRouteAsync(Location start, Location end, TransportMode mode = TransportMode.Driving)\n        {\n            var coordinateFrom = new Coordinate { Latitude = start.Latitude, Longitude = start.Longitude };\n            var coordinateTo = new Coordinate { Latitude = end.Latitude, Longitude = end.Longitude };\n\n            return GetRouteAsync(coordinateFrom, coordinateTo).ContinueWith(t =>\n            {\n                return new Route\n                {\n                    Points = new List<Location> { start, end },\n                    Distance = t.Result?.Distance ?? 0,\n                    Duration = t.Result?.Duration ?? TimeSpan.Zero,\n                    Start = start,\n                    End = end,\n                    Steps = t.Result?.Steps ?? new List<RouteStep>()\n                };\n            });\n        }\n\n        public Task<List<Route>> GetAlternativeRoutesAsync(Location start, Location end, TransportMode mode = TransportMode.Driving)\n        {\n            return CalculateRouteAsync(start, end, mode).ContinueWith(t =>\n                new List<Route> { t.Result });\n        }\n\n        public Task<TimeSpan> EstimateTimeAsync(Route route, bool considerTraffic = true)\n        {\n            return Task.FromResult(route.Duration);\n        }\n    }\n\n    /// <summary>\n    /// Routing provider interface'i\n    /// </summary>\n    public interface IRoutingProvider\n    {\n        Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType);\n        Task<bool> CheckAvailabilityAsync();\n    }\n\n    /// <summary>\n    /// HERE Maps provider\n    /// </summary>\n    public class HereMapsProvider : IRoutingProvider\n    {\n        private readonly ILogger _logger;\n        private readonly string _apiKey = Environment.GetEnvironmentVariable("HERE_MAPS_API_KEY") ?? "YOUR_HERE_API_KEY";\n\n        public HereMapsProvider(ILogger logger) => _logger = logger;\n\n        public async Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType)\n        {\n            // HERE Maps API çağrısı simülasyonu\n            _logger.LogInformation("HERE Maps API çağrısı: {From} -> {To}", from, to);\n            await Task.Delay(100); // API çağrısı simülasyonu\n\n            if (_apiKey == "YOUR_HERE_API_KEY")\n            {\n                throw new Exception("HERE Maps API key not configured");\n            }\n\n            return new RouteResult\n            {\n                IsSuccessful = true,\n                Distance = 50.5,\n                Duration = TimeSpan.FromMinutes(45),\n                Provider = "HERE Maps",\n                OptimizationType = optimizationType\n            };\n        }\n\n        public async Task<bool> CheckAvailabilityAsync()\n        {\n            // API availability kontrolü\n            return !string.IsNullOrEmpty(_apiKey) && _apiKey != "YOUR_HERE_API_KEY";\n        }\n    }\n\n    /// <summary>\n    /// Mapbox provider\n    /// </summary>\n    public class MapboxProvider : IRoutingProvider\n    {\n        private readonly ILogger _logger;\n        private readonly string _apiKey = Environment.GetEnvironmentVariable("MAPBOX_API_KEY") ?? "YOUR_MAPBOX_API_KEY";\n\n        public MapboxProvider(ILogger logger) => _logger = logger;\n\n        public async Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType)\n        {\n            _logger.LogInformation("Mapbox API çağrısı: {From} -> {To}", from, to);\n            await Task.Delay(100);\n\n            if (_apiKey == "YOUR_MAPBOX_API_KEY")\n            {\n                throw new Exception("Mapbox API key not configured");\n            }\n\n            return new RouteResult\n            {\n                IsSuccessful = true,\n                Distance = 52.1,\n                Duration = TimeSpan.FromMinutes(42),\n                Provider = "Mapbox",\n                OptimizationType = optimizationType\n            };\n        }\n\n        public async Task<bool> CheckAvailabilityAsync()\n        {\n            return !string.IsNullOrEmpty(_apiKey) && _apiKey != "YOUR_MAPBOX_API_KEY";\n        }\n    }\n\n    /// <summary>\n    /// Google Maps provider\n    /// </summary>\n    public class GoogleMapsProvider : IRoutingProvider\n    {\n        private readonly ILogger _logger;\n        private readonly string _apiKey = Environment.GetEnvironmentVariable("GOOGLE_MAPS_API_KEY") ?? "YOUR_GOOGLE_API_KEY";\n\n        public GoogleMapsProvider(ILogger logger) => _logger = logger;\n\n        public async Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType)\n        {\n            _logger.LogInformation("Google Maps API çağrısı: {From} -> {To}", from, to);\n            await Task.Delay(100);\n\n            if (_apiKey == "YOUR_GOOGLE_API_KEY")\n            {\n                throw new Exception("Google Maps API key not configured");\n            }\n\n            return new RouteResult\n            {\n                IsSuccessful = true,\n                Distance = 48.7,\n                Duration = TimeSpan.FromMinutes(38),\n                Provider = "Google Maps",\n                OptimizationType = optimizationType\n            };\n        }\n\n        public async Task<bool> CheckAvailabilityAsync()\n        {\n            return !string.IsNullOrEmpty(_apiKey) && _apiKey != "YOUR_GOOGLE_API_KEY";\n        }\n    }\n\n    /// <summary>\n    /// Offline routing provider\n    /// </summary>\n    public class OfflineRoutingProvider : IRoutingProvider\n    {\n        private readonly ILogger _logger;\n\n        public OfflineRoutingProvider(ILogger logger) => _logger = logger;\n\n        public async Task<RouteResult> GetRouteAsync(Coordinate from, Coordinate to, RouteOptimizationType optimizationType)\n        {\n            _logger.LogInformation("Offline routing hesaplaması: {From} -> {To}", from, to);\n            await Task.Delay(50);\n\n            // Basit offline rota hesaplaması\n            var distance = Math.Sqrt(Math.Pow(to.Latitude - from.Latitude, 2) + Math.Pow(to.Longitude - from.Longitude, 2)) * 111; // Yaklaşık km\n\n            return new RouteResult\n            {\n                IsSuccessful = true,\n                Distance = distance,\n                Duration = TimeSpan.FromMinutes(distance * 3), // Yaklaşık 20km/saat\n                Provider = "Offline",\n                OptimizationType = optimizationType,\n                IsOffline = true\n            };\n        }\n\n        public async Task<bool> CheckAvailabilityAsync()\n        {\n            // Offline her zaman kullanılabilir\n            return true;\n        }\n    }\n\n    /// <summary>\n    /// Routing exception sınıfı\n    /// </summary>\n    public class RoutingException : Exception\n    {\n        public RoutingException(string message, Exception innerException)\n            : base(message, innerException) { }\n    }\n}\n