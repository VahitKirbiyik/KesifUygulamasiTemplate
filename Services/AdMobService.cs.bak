using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Google.MobileAds;
using KesifUygulamasiTemplate.Services.Interfaces;

namespace KesifUygulamasiTemplate.Services
{
    /// <summary>
    /// Google AdMob reklam servisi - CI/CD pipeline ile entegre
    /// </summary>
    public class AdMobService : IAdService
    {
        private readonly ILogger<AdMobService> _logger;
        private readonly IBadgeService _badgeService;
        private bool _isInitialized;

        // CI/CD için environment variable desteği
        private readonly string _adMobAppId = Environment.GetEnvironmentVariable("ADMOB_APP_ID") ?? "ca-app-pub-XXXXXXXXXXXXXXXX~XXXXXXXXXX";

        public AdMobService(ILogger<AdMobService> logger, IBadgeService badgeService)
        {
            _logger = logger;
            _badgeService = badgeService;
        }

        /// <summary>
        /// AdMob SDK'sını başlatır - CI/CD testlerinde mock kullanılır
        /// </summary>
        public async Task InitializeAsync()
        {
            try
            {
                _logger.LogInformation("AdMob servisi başlatılıyor...");

                // CI/CD ortamında test modunda çalıştır
                var isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||
                                       Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";

                if (isTestEnvironment)
                {
                    _logger.LogInformation("Test ortamı tespit edildi, AdMob test modunda başlatılıyor");
                    MobileAds.Initialize(initStatus =>
                    {
                        _logger.LogInformation("AdMob test modu başarıyla başlatıldı");
                        _isInitialized = true;
                        _badgeService?.AwardBadge("AdMob-Integrated");
                    });
                }
                else
                {
                    MobileAds.Initialize(initStatus =>
                    {
                        _logger.LogInformation("AdMob production modu başarıyla başlatıldı");
                        _isInitialized = true;
                        _badgeService?.AwardBadge("AdMob-Integrated");
                    });
                }

                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "AdMob başlatma hatası");
                throw;
            }
        }

        /// <summary>
        /// Reklam gösterimi için hazır mı kontrol eder
        /// </summary>
        public bool IsReady()
        {
            return _isInitialized;
        }

        /// <summary>
        /// Banner reklam yükler
        /// </summary>
        public async Task LoadBannerAdAsync(string adUnitId)
        {
            if (!_isInitialized)
            {
                await InitializeAsync();
            }

            try
            {
                // Banner reklam yükleme mantığı
                _logger.LogInformation($"Banner reklam yükleniyor: {adUnitId}");
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Banner reklam yükleme hatası: {adUnitId}");
                throw;
            }
        }

        /// <summary>
        /// İnterstitial reklam gösterir
        /// </summary>
        public async Task ShowInterstitialAdAsync(string adUnitId)
        {
            if (!_isInitialized)
            {
                await InitializeAsync();
            }

            try
            {
                _logger.LogInformation($"Interstitial reklam gösteriliyor: {adUnitId}");
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Interstitial reklam gösterme hatası: {adUnitId}");
                throw;
            }
        }

        /// <summary>
        /// Ödül reklamı yükler
        /// </summary>
        public async Task LoadRewardedAdAsync(string adUnitId)
        {
            if (!_isInitialized)
            {
                await InitializeAsync();
            }

            try
            {
                _logger.LogInformation($"Ödül reklamı yükleniyor: {adUnitId}");
                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Ödül reklamı yükleme hatası: {adUnitId}");
                throw;
            }
        }
    }
}
