using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Globalization;\nusing System.Text.Json;\nusing Microsoft.Maui.Storage;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public enum AppTheme\n    {\n        System,\n        Light,\n        Dark\n    }\n\n    public enum MapType\n    {\n        Standard,\n        Satellite,\n        Hybrid,\n        Terrain\n    }\n\n    public class MapPreferences\n    {\n        public MapType DefaultMapType { get; set; } = MapType.Standard;\n        public bool ShowTraffic { get; set; } = true;\n        public bool Show3DBuildings { get; set; } = true;\n        public bool RotateMapWithMovement { get; set; } = true;\n        public bool ShowPointsOfInterest { get; set; } = true;\n        public int DefaultZoomLevel { get; set; } = 15;\n        public bool FollowUserLocation { get; set; } = true;\n        public List<string> VisiblePOICategories { get; set; } = new List<string>\n        {\n            "restaurant", "cafe", "hospital", "pharmacy", "gas_station", "hotel"\n        };\n    }\n\n    public class NavigationPreferences\n    {\n        public bool AvoidTolls { get; set; } = false;\n        public bool AvoidHighways { get; set; } = false;\n        public bool AvoidFerries { get; set; } = false;\n        public bool EnableVoiceGuidance { get; set; } = true;\n        public string VoiceLanguage { get; set; } = "tr-TR";\n        public float VoiceVolume { get; set; } = 1.0f;\n        public bool ShowSpeedLimits { get; set; } = true;\n        public bool AlertForSpeedCameras { get; set; } = true;\n        public bool UseImperialUnits { get; set; } = false;\n    }\n\n    public class PreferencesService : KesifUygulamasiTemplate.Services.Interfaces.IPreferencesService\n    {\n        private readonly IPreferences _preferences;\n\n        // Anahtar sabitleri\n        private const string KEY_THEME = "app_theme";\n        private const string KEY_LANGUAGE = "app_language";\n        private const string KEY_MAP_PREFERENCES = "map_preferences";\n        private const string KEY_NAVIGATION_PREFERENCES = "navigation_preferences";\n        private const string KEY_ENERGY_SAVING_MODE = "energy_saving_mode";\n\n        public event EventHandler<string>? PreferenceChanged;\n\n        public PreferencesService(IPreferences preferences)\n        {\n            _preferences = preferences;\n        }\n\n        #region Tema Tercihleri\n\n        public Task<AppTheme> GetThemePreferenceAsync()\n        {\n            // Varsay�lan olarak sistem temas�n� kullan\n            var themeValue = _preferences.Get(KEY_THEME, (int)AppTheme.System);\n            return Task.FromResult((AppTheme)themeValue);\n        }\n\n        public Task SetThemePreferenceAsync(AppTheme theme)\n        {\n            _preferences.Set(KEY_THEME, (int)theme);\n            OnPreferenceChanged(KEY_THEME);\n            return Task.CompletedTask;\n        }\n\n        #endregion\n\n        #region Dil Tercihleri\n\n        public Task<string> GetLanguagePreferenceAsync()\n        {\n            // Varsay�lan olarak sistem dilini kullan\n            var defaultLanguage = CultureInfo.CurrentCulture.Name;\n            return Task.FromResult(_preferences.Get(KEY_LANGUAGE, defaultLanguage));\n        }\n\n        public Task SetLanguagePreferenceAsync(string languageCode)\n        {\n            if (string.IsNullOrEmpty(languageCode))\n                throw new ArgumentNullException(nameof(languageCode));\n\n            _preferences.Set(KEY_LANGUAGE, languageCode);\n            OnPreferenceChanged(KEY_LANGUAGE);\n            return Task.CompletedTask;\n        }\n\n        public Task<List<string>> GetAvailableLanguagesAsync()\n        {\n            // Uygulamada desteklenen dillerin listesi\n            var languages = new List<string>\n            {\n                "tr-TR", // T�rk�e\n                "en-US", // �ngilizce\n                "de-DE", // Almanca\n                "fr-FR", // Frans�zca\n                "es-ES", // �spanyolca\n                "it-IT", // �talyanca\n                "ru-RU", // Rus�a\n                "ar-SA", // Arap�a\n                "zh-CN", // �ince (Basitle�tirilmi�)\n                "ja-JP"  // Japonca\n            };\n\n            return Task.FromResult(languages);\n        }\n\n        #endregion\n\n        #region Harita Tercihleri\n\n        public Task<MapPreferences> GetMapPreferencesAsync()\n        {\n            var json = _preferences.Get(KEY_MAP_PREFERENCES, "");\n\n            if (string.IsNullOrEmpty(json))\n                return Task.FromResult(new MapPreferences());\n\n            try\n            {\n                var preferences = JsonSerializer.Deserialize<MapPreferences>(json);\n                return Task.FromResult(preferences ?? new MapPreferences());\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Harita tercihleri okuma hatas�: {ex.Message}");\n                return Task.FromResult(new MapPreferences());\n            }\n        }\n\n        public Task SetMapPreferencesAsync(MapPreferences preferences)\n        {\n            if (preferences == null)\n                throw new ArgumentNullException(nameof(preferences));\n\n            try\n            {\n                var json = JsonSerializer.Serialize(preferences);\n                _preferences.Set(KEY_MAP_PREFERENCES, json);\n                OnPreferenceChanged(KEY_MAP_PREFERENCES);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Harita tercihleri kaydetme hatas�: {ex.Message}");\n            }\n\n            return Task.CompletedTask;\n        }\n\n        #endregion\n\n        #region Navigasyon Tercihleri\n\n        public Task<NavigationPreferences> GetNavigationPreferencesAsync()\n        {\n            var json = _preferences.Get(KEY_NAVIGATION_PREFERENCES, "");\n\n            if (string.IsNullOrEmpty(json))\n                return Task.FromResult(new NavigationPreferences());\n\n            try\n            {\n                var preferences = JsonSerializer.Deserialize<NavigationPreferences>(json);\n                return Task.FromResult(preferences ?? new NavigationPreferences());\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Navigasyon tercihleri okuma hatas�: {ex.Message}");\n                return Task.FromResult(new NavigationPreferences());\n            }\n        }\n\n        public Task SetNavigationPreferencesAsync(NavigationPreferences preferences)\n        {\n            if (preferences == null)\n                throw new ArgumentNullException(nameof(preferences));\n\n            try\n            {\n                var json = JsonSerializer.Serialize(preferences);\n                _preferences.Set(KEY_NAVIGATION_PREFERENCES, json);\n                OnPreferenceChanged(KEY_NAVIGATION_PREFERENCES);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Navigasyon tercihleri kaydetme hatas�: {ex.Message}");\n            }\n\n            return Task.CompletedTask;\n        }\n\n        #endregion\n\n        #region Enerji Tasarrufu Modu\n\n        public Task<bool> GetEnergySavingModeAsync()\n        {\n            return Task.FromResult(_preferences.Get(KEY_ENERGY_SAVING_MODE, false));\n        }\n\n        public Task SetEnergySavingModeAsync(bool enabled)\n        {\n            _preferences.Set(KEY_ENERGY_SAVING_MODE, enabled);\n            OnPreferenceChanged(KEY_ENERGY_SAVING_MODE);\n            return Task.CompletedTask;\n        }\n\n        #endregion\n\n        #region T�m Tercihleri S�f�rlama\n\n        public Task ResetAllPreferencesAsync()\n        {\n            // T�m tercih anahtarlar�n� temizle\n            _preferences.Remove(KEY_THEME);\n            _preferences.Remove(KEY_LANGUAGE);\n            _preferences.Remove(KEY_MAP_PREFERENCES);\n            _preferences.Remove(KEY_NAVIGATION_PREFERENCES);\n            _preferences.Remove(KEY_ENERGY_SAVING_MODE);\n\n            // T�m tercihlerin s�f�rland���n� bildir\n            OnPreferenceChanged("all");\n\n            return Task.CompletedTask;\n        }\n\n        #endregion\n\n        #region Yard�mc� Metotlar\n\n        private void OnPreferenceChanged(string key)\n        {\n            PreferenceChanged?.Invoke(this, key);\n        }\n\n        #endregion\n\n        #region Sync Methods\n\n        public void Set(string key, string value)\n        {\n            _preferences.Set(key, value);\n            OnPreferenceChanged(key);\n        }\n\n        public string? Get(string key)\n        {\n            return _preferences.Get<string?>(key, default);\n        }\n\n        public void Set(string key, bool value)\n        {\n            _preferences.Set(key, value);\n            OnPreferenceChanged(key);\n        }\n\n        public bool Get(string key, bool defaultValue)\n        {\n            return _preferences.Get(key, defaultValue);\n        }\n\n        #endregion\n\n        #region Generic IPreferencesService Implementation\n\n        public void Set<T>(string key, T value)\n        {\n            if (value == null)\n            {\n                _preferences.Remove(key);\n            }\n            else if (value is string str)\n            {\n                _preferences.Set(key, str);\n            }\n            else if (value is bool b)\n            {\n                _preferences.Set(key, b);\n            }\n            else if (value is int i)\n            {\n                _preferences.Set(key, i);\n            }\n            else if (value is double d)\n            {\n                _preferences.Set(key, d);\n            }\n            else if (value is float f)\n            {\n                _preferences.Set(key, f.ToString());\n            }\n            else\n            {\n                _preferences.Set(key, value.ToString() ?? "");\n            }\n            OnPreferenceChanged(key);\n        }\n\n        public T Get<T>(string key, T defaultValue)\n        {\n            try\n            {\n                if (typeof(T) == typeof(string))\n                {\n                    return (T)(object)_preferences.Get(key, (string)(object)defaultValue!);\n                }\n                else if (typeof(T) == typeof(bool))\n                {\n                    return (T)(object)_preferences.Get(key, (bool)(object)defaultValue!);\n                }\n                else if (typeof(T) == typeof(int))\n                {\n                    return (T)(object)_preferences.Get(key, (int)(object)defaultValue!);\n                }\n                else if (typeof(T) == typeof(double))\n                {\n                    return (T)(object)_preferences.Get(key, (double)(object)defaultValue!);\n                }\n                else if (typeof(T) == typeof(float))\n                {\n                    var str = _preferences.Get(key, "");\n                    if (string.IsNullOrEmpty(str))\n                        return defaultValue;\n                    return (T)(object)float.Parse(str);\n                }\n                else\n                {\n                    var str = _preferences.Get(key, "");\n                    if (string.IsNullOrEmpty(str))\n                        return defaultValue;\n                    return (T)(object)str;\n                }\n            }\n            catch\n            {\n                return defaultValue;\n            }\n        }\n\n        public bool ContainsKey(string key)\n        {\n            return _preferences.ContainsKey(key);\n        }\n\n        public void Remove(string key)\n        {\n            _preferences.Remove(key);\n            OnPreferenceChanged(key);\n        }\n\n        public void Clear()\n        {\n            _preferences.Clear();\n            OnPreferenceChanged("all");\n        }\n\n        #endregion\n    }\n}\n