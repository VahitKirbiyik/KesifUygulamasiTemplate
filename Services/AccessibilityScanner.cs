using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Erişilebilirlik compliance scanner servisi\n    /// WCAG 2.1 ve accessibility standartlarına uygunluk kontrolü\n    /// </summary>\n    public class AccessibilityScanner\n    {\n        private readonly ILogger<AccessibilityScanner> _logger;\n        private readonly string _reportsPath;\n        private readonly bool _enableDetailedReporting;\n        private readonly int _maxIssuesPerFile;\n\n        public AccessibilityScanner(ILogger<AccessibilityScanner> logger)\n        {\n            _logger = logger;\n            _reportsPath = Environment.GetEnvironmentVariable("ACCESSIBILITY_REPORTS_PATH") ?? "reports/accessibility";\n            _enableDetailedReporting = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_DETAILED_ACCESSIBILITY_REPORTING") ?? "true");\n            _maxIssuesPerFile = int.Parse(Environment.GetEnvironmentVariable("MAX_ACCESSIBILITY_ISSUES_PER_FILE") ?? "50");\n\n            // Reports klasörünü oluştur\n            Directory.CreateDirectory(_reportsPath);\n        }\n\n        /// <summary>\n        /// HTML dosyasını accessibility açısından tara\n        /// </summary>\n        public async Task<AccessibilityResult> CheckCompliance(string htmlPath)\n        {\n            try\n            {\n                if (!File.Exists(htmlPath))\n                {\n                    throw new FileNotFoundException($"HTML file not found: {htmlPath}");\n                }\n\n                var htmlContent = await File.ReadAllTextAsync(htmlPath);\n                var result = new AccessibilityResult\n                {\n                    FilePath = htmlPath,\n                    FileName = Path.GetFileName(htmlPath),\n                    ScanTimestamp = DateTime.UtcNow,\n                    Issues = new List<AccessibilityIssue>()\n                };\n\n                // HTML içeriğini tara\n                await ScanHtmlContent(htmlContent, result);\n\n                // Sonuçları hesapla\n                result.TotalIssues = result.Issues.Count;\n                result.CriticalIssues = result.Issues.Count(i => i.Severity == IssueSeverity.Critical);\n                result.WarningIssues = result.Issues.Count(i => i.Severity == IssueSeverity.Warning);\n                result.InfoIssues = result.Issues.Count(i => i.Severity == IssueSeverity.Info);\n\n                result.ComplianceScore = CalculateComplianceScore(result);\n                result.IsCompliant = result.ComplianceScore >= 85; // %85 üzeri uyumlu kabul edilir\n\n                _logger.LogInformation($"Accessibility scan completed for {htmlPath}: {result.TotalIssues} issues found, score: {result.ComplianceScore}%");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Accessibility scan failed for {htmlPath}: {ex.Message}");\n                return new AccessibilityResult\n                {\n                    FilePath = htmlPath,\n                    FileName = Path.GetFileName(htmlPath),\n                    ScanTimestamp = DateTime.UtcNow,\n                    Issues = new List<AccessibilityIssue>(),\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Birden fazla HTML dosyasını tara\n        /// </summary>\n        public async Task<List<AccessibilityResult>> CheckMultipleFiles(IEnumerable<string> htmlPaths)\n        {\n            var results = new List<AccessibilityResult>();\n\n            foreach (var path in htmlPaths)\n            {\n                var result = await CheckCompliance(path);\n                results.Add(result);\n\n                // Kısa bir gecikme ekle (rate limiting için)\n                await Task.Delay(100);\n            }\n\n            return results;\n        }\n\n        /// <summary>\n        /// Proje içindeki tüm HTML dosyalarını tara\n        /// </summary>\n        public async Task<List<AccessibilityResult>> ScanProject(string projectPath)\n        {\n            var htmlFiles = Directory.GetFiles(projectPath, "*.html", SearchOption.AllDirectories)\n                .Where(f => !f.Contains("\\bin\\") && !f.Contains("\\obj\\") && !f.Contains("\\node_modules\\"))\n                .ToList();\n\n            _logger.LogInformation($"Found {htmlFiles.Count} HTML files to scan in project");\n\n            return await CheckMultipleFiles(htmlFiles);\n        }\n\n        /// <summary>\n        /// HTML içeriğini tara\n        /// </summary>\n        private async Task ScanHtmlContent(string htmlContent, AccessibilityResult result)\n        {\n            // 1. Resimler için alt text kontrolü\n            await CheckImageAltTexts(htmlContent, result);\n\n            // 2. Başlık hiyerarşisi kontrolü\n            await CheckHeadingHierarchy(htmlContent, result);\n\n            // 3. Form elemanları kontrolü\n            await CheckFormElements(htmlContent, result);\n\n            // 4. Linkler kontrolü\n            await CheckLinks(htmlContent, result);\n\n            // 5. Renk kontrast kontrolü (basit kontrol)\n            await CheckColorContrast(htmlContent, result);\n\n            // 6. Language attribute kontrolü\n            await CheckLanguageAttribute(htmlContent, result);\n\n            // 7. ARIA attributes kontrolü\n            await CheckAriaAttributes(htmlContent, result);\n\n            // 8. Tab order kontrolü\n            await CheckTabOrder(htmlContent, result);\n\n            // 9. Semantic HTML kontrolü\n            await CheckSemanticHtml(htmlContent, result);\n\n            // 10. Media elements kontrolü\n            await CheckMediaElements(htmlContent, result);\n        }\n\n        /// <summary>\n        /// Resimler için alt text kontrolü\n        /// </summary>\n        private async Task CheckImageAltTexts(string htmlContent, AccessibilityResult result)\n        {\n            var imgRegex = new Regex(@"<img[^>]*>", RegexOptions.IgnoreCase);\n            var altRegex = new Regex(@"alt\s*=\s*[""']([^""']*)[""']", RegexOptions.IgnoreCase);\n\n            var imgMatches = imgRegex.Matches(htmlContent);\n            var imagesWithoutAlt = 0;\n            var imagesWithEmptyAlt = 0;\n\n            foreach (Match imgMatch in imgMatches)\n            {\n                var imgTag = imgMatch.Value;\n                var altMatch = altRegex.Match(imgTag);\n\n                if (!altMatch.Success)\n                {\n                    imagesWithoutAlt++;\n                    AddIssue(result, IssueSeverity.Critical, "Missing alt attribute",\n                        $"Image tag missing alt attribute: {imgTag.Substring(0, Math.Min(50, imgTag.Length))}...");\n                }\n                else if (string.IsNullOrWhiteSpace(altMatch.Groups[1].Value))\n                {\n                    imagesWithEmptyAlt++;\n                    AddIssue(result, IssueSeverity.Warning, "Empty alt attribute",\n                        $"Image has empty alt attribute: {imgTag.Substring(0, Math.Min(50, imgTag.Length))}...");\n                }\n            }\n\n            if (imagesWithoutAlt == 0 && imagesWithEmptyAlt == 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "Images accessibility", "All images have proper alt attributes", true);\n            }\n        }\n\n        /// <summary>\n        /// Başlık hiyerarşisi kontrolü\n        /// </summary>\n        private async Task CheckHeadingHierarchy(string htmlContent, AccessibilityResult result)\n        {\n            var headingRegex = new Regex(@"<h([1-6])[^>]*>(.*?)</h\1>", RegexOptions.IgnoreCase);\n            var headings = headingRegex.Matches(htmlContent);\n\n            if (headings.Count == 0)\n            {\n                AddIssue(result, IssueSeverity.Warning, "Missing headings", "No heading elements found in the document");\n                return;\n            }\n\n            var headingLevels = new List<int>();\n            foreach (Match heading in headings)\n            {\n                if (int.TryParse(heading.Groups[1].Value, out int level))\n                {\n                    headingLevels.Add(level);\n                }\n            }\n\n            // H1 kontrolü\n            if (!headingLevels.Contains(1))\n            {\n                AddIssue(result, IssueSeverity.Warning, "Missing H1", "Document should have at least one H1 heading");\n            }\n\n            // Hiyerarşi kontrolü\n            var previousLevel = 0;\n            var hierarchyIssues = 0;\n\n            foreach (var level in headingLevels)\n            {\n                if (previousLevel > 0 && level > previousLevel + 1)\n                {\n                    hierarchyIssues++;\n                }\n                previousLevel = level;\n            }\n\n            if (hierarchyIssues > 0)\n            {\n                AddIssue(result, IssueSeverity.Warning, "Heading hierarchy",\n                    $"Heading hierarchy issues found: {hierarchyIssues} level skips detected");\n            }\n            else\n            {\n                AddIssue(result, IssueSeverity.Info, "Heading hierarchy", "Heading hierarchy is properly structured", true);\n            }\n        }\n\n        /// <summary>\n        /// Form elemanları kontrolü\n        /// </summary>\n        private async Task CheckFormElements(string htmlContent, AccessibilityResult result)\n        {\n            // Label kontrolü\n            var inputRegex = new Regex(@"<input[^>]*>", RegexOptions.IgnoreCase);\n            var labelRegex = new Regex(@"<label[^>]*>.*?</label>", RegexOptions.IgnoreCase);\n            var textareaRegex = new Regex(@"<textarea[^>]*>", RegexOptions.IgnoreCase);\n            var selectRegex = new Regex(@"<select[^>]*>", RegexOptions.IgnoreCase);\n\n            var inputs = inputRegex.Matches(htmlContent).Count;\n            var labels = labelRegex.Matches(htmlContent).Count;\n            var textareas = textareaRegex.Matches(htmlContent).Count;\n            var selects = selectRegex.Matches(htmlContent).Count;\n\n            var totalFormElements = inputs + textareas + selects;\n\n            if (totalFormElements > 0 && labels == 0)\n            {\n                AddIssue(result, IssueSeverity.Critical, "Missing form labels",\n                    $"Found {totalFormElements} form elements but no labels");\n            }\n            else if (totalFormElements > labels)\n            {\n                AddIssue(result, IssueSeverity.Warning, "Insufficient form labels",\n                    $"Found {totalFormElements} form elements but only {labels} labels");\n            }\n            else\n            {\n                AddIssue(result, IssueSeverity.Info, "Form accessibility", "Form elements have proper labels", true);\n            }\n\n            // Required field indicators kontrolü\n            var requiredRegex = new Regex(@"required[^>]*>|<[^>]*required", RegexOptions.IgnoreCase);\n            var requiredFields = requiredRegex.Matches(htmlContent).Count;\n\n            if (requiredFields > 0)\n            {\n                // Required alanlar için görsel gösterge kontrolü (basit kontrol)\n                var asteriskRegex = new Regex(@"\*", RegexOptions.IgnoreCase);\n                var asterisks = asteriskRegex.Matches(htmlContent).Count;\n\n                if (asterisks < requiredFields)\n                {\n                    AddIssue(result, IssueSeverity.Warning, "Required field indicators",\n                        "Required fields should have visual indicators (e.g., asterisks)");\n                }\n            }\n        }\n\n        /// <summary>\n        /// Linkler kontrolü\n        /// </summary>\n        private async Task CheckLinks(string htmlContent, AccessibilityResult result)\n        {\n            var linkRegex = new Regex(@"<a[^>]*>(.*?)</a>", RegexOptions.IgnoreCase);\n            var links = linkRegex.Matches(htmlContent);\n\n            var linksWithoutText = 0;\n            var genericLinks = 0;\n\n            foreach (Match link in links)\n            {\n                var linkText = link.Groups[1].Value.Trim();\n\n                if (string.IsNullOrWhiteSpace(linkText))\n                {\n                    linksWithoutText++;\n                }\n                else if (new[] { "click here", "read more", "here", "link", "more" }.Contains(linkText.ToLower()))\n                {\n                    genericLinks++;\n                }\n            }\n\n            if (linksWithoutText > 0)\n            {\n                AddIssue(result, IssueSeverity.Critical, "Links without text",\n                    $"Found {linksWithoutText} links without descriptive text");\n            }\n\n            if (genericLinks > 0)\n            {\n                AddIssue(result, IssueSeverity.Warning, "Generic link text",\n                    $"Found {genericLinks} links with generic text (e.g., 'click here')");\n            }\n\n            if (linksWithoutText == 0 && genericLinks == 0 && links.Count > 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "Link accessibility", "All links have descriptive text", true);\n            }\n        }\n\n        /// <summary>\n        /// Renk kontrast kontrolü (basit)\n        /// </summary>\n        private async Task CheckColorContrast(string htmlContent, AccessibilityResult result)\n        {\n            // Bu basit bir kontrol - gerçek kontrast hesaplaması için daha sofistike algoritma gerekir\n            var colorRegex = new Regex(@"color\s*:\s*#[0-9a-fA-F]{6}|background-color\s*:\s*#[0-9a-fA-F]{6}", RegexOptions.IgnoreCase);\n            var colorMatches = colorRegex.Matches(htmlContent);\n\n            if (colorMatches.Count > 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "Color usage detected",\n                    $"Found {colorMatches.Count} color definitions. Manual contrast review recommended.");\n            }\n        }\n\n        /// <summary>\n        /// Language attribute kontrolü\n        /// </summary>\n        private async Task CheckLanguageAttribute(string htmlContent, AccessibilityResult result)\n        {\n            var htmlTagRegex = new Regex(@"<html[^>]*>", RegexOptions.IgnoreCase);\n            var langRegex = new Regex(@"lang\s*=\s*[""']([^""']*)[""']", RegexOptions.IgnoreCase);\n\n            var htmlTag = htmlTagRegex.Match(htmlContent);\n            if (htmlTag.Success)\n            {\n                var langMatch = langRegex.Match(htmlTag.Value);\n                if (!langMatch.Success)\n                {\n                    AddIssue(result, IssueSeverity.Warning, "Missing language attribute",\n                        "HTML element should have a lang attribute to specify the document language");\n                }\n                else\n                {\n                    AddIssue(result, IssueSeverity.Info, "Language attribute",\n                        $"Document language set to: {langMatch.Groups[1].Value}", true);\n                }\n            }\n        }\n\n        /// <summary>\n        /// ARIA attributes kontrolü\n        /// </summary>\n        private async Task CheckAriaAttributes(string htmlContent, AccessibilityResult result)\n        {\n            var ariaRegex = new Regex(@"aria-[a-zA-Z]+", RegexOptions.IgnoreCase);\n            var ariaMatches = ariaRegex.Matches(htmlContent);\n\n            if (ariaMatches.Count > 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "ARIA attributes",\n                    $"Found {ariaMatches.Count} ARIA attributes. Ensure they are used correctly.", true);\n            }\n        }\n\n        /// <summary>\n        /// Tab order kontrolü\n        /// </summary>\n        private async Task CheckTabOrder(string htmlContent, AccessibilityResult result)\n        {\n            var tabindexRegex = new Regex(@"tabindex\s*=\s*[""']?(-?\d+)[""']?", RegexOptions.IgnoreCase);\n            var tabindexMatches = tabindexRegex.Matches(htmlContent);\n\n            var negativeTabindex = 0;\n            foreach (Match match in tabindexMatches)\n            {\n                if (int.TryParse(match.Groups[1].Value, out int tabindex) && tabindex < 0)\n                {\n                    negativeTabindex++;\n                }\n            }\n\n            if (negativeTabindex > 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "Tab order",\n                    $"Found {negativeTabindex} elements with negative tabindex (removed from tab order)");\n            }\n        }\n\n        /// <summary>\n        /// Semantic HTML kontrolü\n        /// </summary>\n        private async Task CheckSemanticHtml(string htmlContent, AccessibilityResult result)\n        {\n            var semanticElements = new[] { "header", "nav", "main", "section", "article", "aside", "footer" };\n            var foundSemanticElements = 0;\n\n            foreach (var element in semanticElements)\n            {\n                var regex = new Regex($@"<{element}[^>]*>", RegexOptions.IgnoreCase);\n                if (regex.IsMatch(htmlContent))\n                {\n                    foundSemanticElements++;\n                }\n            }\n\n            if (foundSemanticElements == 0)\n            {\n                AddIssue(result, IssueSeverity.Info, "Semantic HTML",\n                    "Consider using semantic HTML elements (header, nav, main, section, etc.)");\n            }\n            else\n            {\n                AddIssue(result, IssueSeverity.Info, "Semantic HTML",\n                    $"Found {foundSemanticElements} semantic HTML elements", true);\n            }\n        }\n\n        /// <summary>\n        /// Media elements kontrolü\n        /// </summary>\n        private async Task CheckMediaElements(string htmlContent, AccessibilityResult result)\n        {\n            // Video kontrolü\n            var videoRegex = new Regex(@"<video[^>]*>", RegexOptions.IgnoreCase);\n            var videos = videoRegex.Matches(htmlContent);\n\n            foreach (Match video in videos)\n            {\n                if (!video.Value.Contains("track") && !video.Value.Contains("transcript"))\n                {\n                    AddIssue(result, IssueSeverity.Warning, "Video accessibility",\n                        "Video elements should have captions or transcripts");\n                }\n            }\n\n            // Audio kontrolü\n            var audioRegex = new Regex(@"<audio[^>]*>", RegexOptions.IgnoreCase);\n            var audios = audioRegex.Matches(htmlContent);\n\n            foreach (Match audio in audios)\n            {\n                if (!audio.Value.Contains("transcript"))\n                {\n                    AddIssue(result, IssueSeverity.Warning, "Audio accessibility",\n                        "Audio elements should have transcripts");\n                }\n            }\n        }\n\n        /// <summary>\n        /// Issue ekleme yardımcı metodu\n        /// </summary>\n        private void AddIssue(AccessibilityResult result, IssueSeverity severity, string category, string description, bool isPositive = false)\n        {\n            if (result.Issues.Count >= _maxIssuesPerFile)\n            {\n                return; // Maximum issue limitine ulaşıldı\n            }\n\n            result.Issues.Add(new AccessibilityIssue\n            {\n                Severity = severity,\n                Category = category,\n                Description = description,\n                IsPositive = isPositive,\n                Timestamp = DateTime.UtcNow\n            });\n        }\n\n        /// <summary>\n        /// Compliance score hesapla\n        /// </summary>\n        private double CalculateComplianceScore(AccessibilityResult result)\n        {\n            if (result.TotalIssues == 0)\n                return 100.0;\n\n            // Puanlama sistemi\n            var criticalPenalty = result.CriticalIssues * 10; // Her critical issue %10 puan kaybı\n            var warningPenalty = result.WarningIssues * 2;   // Her warning issue %2 puan kaybı\n\n            var score = 100.0 - criticalPenalty - warningPenalty;\n\n            // Pozitif issues için bonus\n            var positiveIssues = result.Issues.Count(i => i.IsPositive);\n            score += positiveIssues * 2;\n\n            return Math.Max(0, Math.Min(100, score));\n        }\n\n        /// <summary>\n        /// Rapor oluştur\n        /// </summary>\n        public async Task<string> GenerateReport(List<AccessibilityResult> results)\n        {\n            var reportPath = Path.Combine(_reportsPath, $"accessibility-report-{DateTime.UtcNow:yyyy-MM-dd-HH-mm-ss}.json");\n\n            var report = new\n            {\n                ReportGenerated = DateTime.UtcNow,\n                TotalFiles = results.Count,\n                CompliantFiles = results.Count(r => r.IsCompliant),\n                NonCompliantFiles = results.Count(r => !r.IsCompliant),\n                TotalIssues = results.Sum(r => r.TotalIssues),\n                CriticalIssues = results.Sum(r => r.CriticalIssues),\n                WarningIssues = results.Sum(r => r.WarningIssues),\n                AverageComplianceScore = results.Average(r => r.ComplianceScore),\n                Results = results\n            };\n\n            var json = System.Text.Json.JsonSerializer.Serialize(report, new System.Text.Json.JsonSerializerOptions\n            {\n                WriteIndented = true,\n                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase\n            });\n\n            await File.WriteAllTextAsync(reportPath, json);\n\n            return reportPath;\n        }\n    }\n\n    public class AccessibilityResult\n    {\n        public string FilePath { get; set; }\n        public string FileName { get; set; }\n        public DateTime ScanTimestamp { get; set; }\n        public List<AccessibilityIssue> Issues { get; set; }\n        public int TotalIssues { get; set; }\n        public int CriticalIssues { get; set; }\n        public int WarningIssues { get; set; }\n        public int InfoIssues { get; set; }\n        public double ComplianceScore { get; set; }\n        public bool IsCompliant { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n\n    public class AccessibilityIssue\n    {\n        public IssueSeverity Severity { get; set; }\n        public string Category { get; set; }\n        public string Description { get; set; }\n        public bool IsPositive { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n\n    public enum IssueSeverity\n    {\n        Info,\n        Warning,\n        Critical\n    }\n}\n