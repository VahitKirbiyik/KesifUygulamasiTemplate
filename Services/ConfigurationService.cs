using System;\nusing System.IO;\nusing System.Text.Json;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class ConfigurationService\n    {\n        private readonly string _configFilePath = "appsettings.json";\n\n        // Google Maps API\n        public string GoogleMapsApiKey => GetApiKey("GOOGLE_MAPS_API_KEY");\n        public string GoogleMapsDirectionsUrl => "https://maps.googleapis.com/maps/api/directions/json";\n        public string GoogleMapsPlacesUrl => "https://maps.googleapis.com/maps/api/place";\n\n        // Mapbox API\n        public string MapboxApiKey => GetApiKey("MAPBOX_API_KEY");\n        public string MapboxDirectionsUrl => "https://api.mapbox.com/directions/v5/mapbox";\n        public string MapboxGeocodingUrl => "https://api.mapbox.com/geocoding/v5/mapbox.places";\n\n        // HERE Maps API\n        public string HereApiKey => GetApiKey("HERE_API_KEY");\n        public string HereAppId => GetApiKey("HERE_APP_ID");\n        public string HereRoutingUrl => "https://router.hereapi.com/v8/routes";\n        public string HereGeocodingUrl => "https://geocode.search.hereapi.com/v1/geocode";\n        public string HereMatrixUrl => "https://matrix.router.hereapi.com/v8/matrix";\n\n        // OpenWeatherMap API\n        public string OpenWeatherMapApiKey => GetApiKey("OPENWEATHERMAP_API_KEY");\n        public string OpenWeatherMapBaseUrl => "https://api.openweathermap.org/data";\n\n        // App Center\n        public string AppCenterAndroidSecret => GetApiKey("APPCENTER_ANDROID_SECRET");\n        public string AppCenterIOSSecret => GetApiKey("APPCENTER_IOS_SECRET");\n        public bool AppCenterAnalyticsEnabled => true;\n        public bool AppCenterCrashesEnabled => true;\n\n        // Map Settings\n        public int DefaultZoomLevel => 15;\n        public int MaxZoomLevel => 20;\n        public int MinZoomLevel => 3;\n        public string TileServerUrl => "https://tile.openstreetmap.org";\n        public int CacheSizeMB => 500;\n        public int CacheExpiryDays => 30;\n\n        // Notification Settings\n        public bool NavigationNotificationsEnabled => true;\n        public bool WeatherAlertsEnabled => true;\n        public bool EmergencyPointsEnabled => true;\n        public bool FavoritePlacesEnabled => true;\n        public bool MoonCompassEnabled => true;\n\n        // Privacy Settings\n        public bool LocationTrackingEnabled => true;\n        public bool AnalyticsEnabled => true;\n        public bool CrashReportingEnabled => true;\n        public bool DataSharingEnabled => false;\n\n        // Donation Settings\n        public string PayPalButtonId => GetApiKey("PAYPAL_BUTTON_ID");\n        public string PayPalCurrency => "USD";\n        public string PayPalLanguage => "en_US";\n\n        public string StripePublishableKey => GetApiKey("STRIPE_PUBLISHABLE_KEY");\n        public string StripePriceId => GetApiKey("STRIPE_PRICE_ID");\n        public string StripeCurrency => "USD";\n\n        private string GetApiKey(string keyName)\n        {\n            try\n            {\n                // Environment variable'dan oku\n                var envValue = Environment.GetEnvironmentVariable(keyName);\n                if (!string.IsNullOrEmpty(envValue))\n                    return envValue;\n\n#if ANDROID\n                // Android için keystore.properties dosyasından oku\n                try\n                {\n                    var keystorePath = Path.Combine(AppContext.BaseDirectory, "..", "..", "..", "keystore.properties");\n                    if (File.Exists(keystorePath))\n                    {\n                        var lines = File.ReadAllLines(keystorePath);\n                        foreach (var line in lines)\n                        {\n                            if (line.Contains("=") && !line.TrimStart().StartsWith("#"))\n                            {\n                                var parts = line.Split('=', 2);\n                                if (parts.Length == 2 && parts[0].Trim() == keyName)\n                                {\n                                    return parts[1].Trim();\n                                }\n                            }\n                        }\n                    }\n                }\n                catch\n                {\n                    // Keystore okumada hata olursa devam et\n                }\n#endif\n\n                // appsettings.json'dan oku\n                if (File.Exists(_configFilePath))\n                {\n                    var json = File.ReadAllText(_configFilePath);\n                    var config = JsonSerializer.Deserialize<JsonElement>(json);\n\n                    if (config.TryGetProperty("ApiKeys", out var apiKeys))\n                    {\n                        // Basitleştirilmiş anahtar eşleme\n                        var simpleKey = keyName.Replace("_", "").Replace("APIKEY", "").Replace("SECRET", "").ToLower();\n                        if (apiKeys.TryGetProperty(simpleKey, out var value))\n                        {\n                            return value.GetString() ?? string.Empty;\n                        }\n                    }\n                }\n\n                return string.Empty;\n            }\n            catch\n            {\n                return string.Empty;\n            }\n        }\n\n        public bool IsApiKeyConfigured(string key)\n        {\n            var value = GetApiKey(key);\n            return !string.IsNullOrEmpty(value) && !value.Contains("YOUR_");\n        }\n    }\n}\n