using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing KesifUygulamasiTemplate.Services;\nusing System.Text.Json;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// İnternet bağlantısı olmadığında kullanıcı geri bildirimlerini saklar ve bağlantı geri geldiğinde gönderir\n    /// </summary>\n    public class OfflineFeedbackService\n    {\n        private readonly ILogger<OfflineFeedbackService> _logger;\n        private readonly ConnectivityService _connectivityService;\n        private readonly HttpClient _httpClient;\n        private const string FEEDBACK_STORAGE_KEY = "offline_feedbacks";\n        private const string FEEDBACK_API_URL = "https://api.example.com/feedback"; // Gerçek API URL'i buraya koyun\n\n        public OfflineFeedbackService(\n            ILogger<OfflineFeedbackService> logger,\n            ConnectivityService connectivityService,\n            HttpClient httpClient)\n        {\n            _logger = logger;\n            _connectivityService = connectivityService;\n            _httpClient = httpClient;\n        }\n\n        /// <summary>\n        /// Kullanıcı geri bildirimini gönderir veya offline ise saklar\n        /// </summary>\n        public async Task<bool> SubmitFeedbackAsync(string userId, string feedback, string category = "general")\n        {\n            var feedbackData = new\n            {\n                UserId = userId,\n                Feedback = feedback,\n                Category = category,\n                Timestamp = DateTime.UtcNow,\n                IsOffline = !_connectivityService.IsConnected\n            };\n\n            if (_connectivityService.IsConnected)\n            {\n                // İnternet varsa doğrudan gönder\n                return await SendFeedbackToServerAsync(feedbackData);\n            }\n            else\n            {\n                // Offline ise sakla\n                await StoreFeedbackLocallyAsync(feedbackData);\n                _logger.LogInformation("Geri bildirim offline modda saklandı. Bağlantı sağlandığında gönderilecek.");\n                return true; // Kullanıcıya başarılı gibi göster\n            }\n        }\n\n        /// <summary>\n        /// Saklanan geri bildirimleri sunucuya gönderir\n        /// </summary>\n        public async Task<int> SyncOfflineFeedbacksAsync()\n        {\n            if (!_connectivityService.IsConnected)\n            {\n                _logger.LogWarning("İnternet bağlantısı yok, senkronizasyon yapılamıyor.");\n                return 0;\n            }\n\n            var feedbacks = await GetStoredFeedbacksAsync();\n            int sentCount = 0;\n\n            foreach (var feedback in feedbacks)\n            {\n                if (await SendFeedbackToServerAsync(feedback))\n                {\n                    await RemoveFeedbackFromStorageAsync(feedback);\n                    sentCount++;\n                }\n            }\n\n            if (sentCount > 0)\n            {\n                _logger.LogInformation($"{sentCount} adet offline geri bildirim başarıyla gönderildi.");\n            }\n\n            return sentCount;\n        }\n\n        /// <summary>\n        /// Geri bildirimi sunucuya gönderir\n        /// </summary>\n        private async Task<bool> SendFeedbackToServerAsync(object feedbackData)\n        {\n            try\n            {\n                var json = JsonSerializer.Serialize(feedbackData);\n                var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");\n\n                var response = await _httpClient.PostAsync(FEEDBACK_API_URL, content);\n\n                if (response.IsSuccessStatusCode)\n                {\n                    _logger.LogInformation("Geri bildirim başarıyla gönderildi.");\n                    return true;\n                }\n                else\n                {\n                    _logger.LogError($"Geri bildirim gönderme hatası: {response.StatusCode}");\n                    return false;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Geri bildirim gönderme hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Geri bildirimi yerel olarak saklar\n        /// </summary>\n        private async Task StoreFeedbackLocallyAsync(object feedbackData)\n        {\n            try\n            {\n                var existingFeedbacks = await GetStoredFeedbacksAsync();\n                existingFeedbacks.Add(feedbackData);\n\n                var json = JsonSerializer.Serialize(existingFeedbacks);\n                await SecureStorage.SetAsync(FEEDBACK_STORAGE_KEY, json);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Geri bildirim saklama hatası: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Saklanan geri bildirimleri alır\n        /// </summary>\n        private async Task<List<object>> GetStoredFeedbacksAsync()\n        {\n            try\n            {\n                var json = await SecureStorage.GetAsync(FEEDBACK_STORAGE_KEY);\n                if (string.IsNullOrEmpty(json))\n                    return new List<object>();\n\n                return JsonSerializer.Deserialize<List<object>>(json) ?? new List<object>();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Saklanan geri bildirimleri alma hatası: {ex.Message}");\n                return new List<object>();\n            }\n        }\n\n        /// <summary>\n        /// Gönderilen geri bildirimi depodan kaldırır\n        /// </summary>\n        private async Task RemoveFeedbackFromStorageAsync(object feedbackData)\n        {\n            try\n            {\n                var feedbacks = await GetStoredFeedbacksAsync();\n                feedbacks.Remove(feedbackData);\n\n                var json = JsonSerializer.Serialize(feedbacks);\n                await SecureStorage.SetAsync(FEEDBACK_STORAGE_KEY, json);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Geri bildirim silme hatası: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Saklanan geri bildirim sayısını döndürür\n        /// </summary>\n        public async Task<int> GetPendingFeedbackCountAsync()\n        {\n            var feedbacks = await GetStoredFeedbacksAsync();\n            return feedbacks.Count;\n        }\n    }\n}\n