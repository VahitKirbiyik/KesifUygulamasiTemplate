using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Uygulama monitoring ve analytics servisi\n    /// </summary>\n    public class MonitoringService\n    {\n        private readonly ILogger<MonitoringService> _logger;\n        private readonly Dictionary<string, int> _providerUsageStats = new();\n        private readonly Dictionary<string, int> _routeTypeStats = new();\n        private readonly string _logFilePath;\n\n        public MonitoringService(ILogger<MonitoringService> logger)\n        {\n            _logger = logger;\n            _logFilePath = Path.Combine(FileSystem.AppDataDirectory, "monitoring_logs.json");\n        }\n\n        /// <summary>\n        /// Provider kullanımını loglar\n        /// </summary>\n        public void LogProviderUsage(string provider)\n        {\n            if (!_providerUsageStats.ContainsKey(provider))\n                _providerUsageStats[provider] = 0;\n\n            _providerUsageStats[provider]++;\n\n            _logger.LogInformation($"ProviderUsed: {provider}, TotalUsage: {_providerUsageStats[provider]}");\n        }\n\n        /// <summary>\n        /// Rota türünü loglar\n        /// </summary>\n        public void LogRouteTypeUsage(string routeType)\n        {\n            if (!_routeTypeStats.ContainsKey(routeType))\n                _routeTypeStats[routeType] = 0;\n\n            _routeTypeStats[routeType]++;\n\n            _logger.LogInformation($"RouteTypeUsed: {routeType}, TotalUsage: {_routeTypeStats[routeType]}");\n        }\n\n        /// <summary>\n        /// Günlük rapor oluşturur\n        /// </summary>\n        public async Task GenerateDailyReportAsync()\n        {\n            var report = new\n            {\n                Date = DateTime.Now.ToString("yyyy-MM-dd"),\n                ProviderStats = _providerUsageStats,\n                RouteTypeStats = _routeTypeStats,\n                TotalRequests = _providerUsageStats.Values.Sum() + _routeTypeStats.Values.Sum()\n            };\n\n            try\n            {\n                var json = JsonSerializer.Serialize(report, new JsonSerializerOptions\n                {\n                    WriteIndented = true\n                });\n\n                await File.WriteAllTextAsync(_logFilePath, json);\n                _logger.LogInformation("Daily monitoring report generated");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to generate monitoring report: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Mevcut istatistikleri döndürür\n        /// </summary>\n        public (Dictionary<string, int> ProviderStats, Dictionary<string, int> RouteStats) GetCurrentStats()\n        {\n            return (_providerUsageStats.ToDictionary(kvp => kvp.Key, kvp => kvp.Value),\n                   _routeTypeStats.ToDictionary(kvp => kvp.Key, kvp => kvp.Value));\n        }\n\n        /// <summary>\n        /// İstatistikleri sıfırlar\n        /// </summary>\n        public void ResetStats()\n        {\n            _providerUsageStats.Clear();\n            _routeTypeStats.Clear();\n            _logger.LogInformation("Monitoring statistics reset");\n        }\n    }\n}\n