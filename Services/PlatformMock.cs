using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Platform servislerinin mock implementasyonu - CI/CD testleri için\n    /// </summary>\n    public class PlatformMock : IARPlatformService, IMapDataService, IOfflineDataService\n    {\n        private readonly ILogger<PlatformMock> _logger;\n        private readonly IBadgeService _badgeService;\n\n        // Mock veriler\n        private readonly List<LocationModel> _mockLocations = new()\n        {\n            new LocationModel { Latitude = 41.0082, Longitude = 28.9784, Name = "İstanbul", Address = "İstanbul, Türkiye" },\n            new LocationModel { Latitude = 39.9334, Longitude = 32.8597, Name = "Ankara", Address = "Ankara, Türkiye" },\n            new LocationModel { Latitude = 40.1885, Longitude = 29.0610, Name = "Bursa", Address = "Bursa, Türkiye" }\n        };\n\n        private readonly List<RouteModel> _mockRoutes = new()\n        {\n            new RouteModel\n            {\n                Distance = 500000, // 500km\n                Duration = TimeSpan.FromHours(6),\n                Steps = new List<RouteStep>\n                {\n                    new RouteStep { Instruction = "İstanbul'dan çıkın", Distance = 100000 },\n                    new RouteStep { Instruction = "Ankara yönüne devam edin", Distance = 400000 }\n                }\n            }\n        };\n\n        public PlatformMock(ILogger<PlatformMock> logger, IBadgeService badgeService)\n        {\n            _logger = logger;\n            _badgeService = badgeService;\n            _logger.LogInformation("PlatformMock servisi başlatıldı - Test modu aktif");\n        }\n\n        #region IARPlatformService Implementation\n\n        public Task<bool> IsARSupportedAsync()\n        {\n            _logger.LogInformation("Mock: AR desteği kontrol edildi - true döndürüldü");\n            return Task.FromResult(true);\n        }\n\n        public Task StartARSessionAsync()\n        {\n            _logger.LogInformation("Mock: AR oturumu başlatıldı");\n            _badgeService?.AwardBadge("AR-Explorer");\n            return Task.CompletedTask;\n        }\n\n        public Task StopARSessionAsync()\n        {\n            _logger.LogInformation("Mock: AR oturumu durduruldu");\n            return Task.CompletedTask;\n        }\n\n        public Task<ARAnchor> CreateAnchorAsync(double latitude, double longitude, double altitude)\n        {\n            var anchor = new ARAnchor\n            {\n                Latitude = latitude,\n                Longitude = longitude,\n                Altitude = altitude,\n                Id = Guid.NewGuid().ToString(),\n                IsActive = true\n            };\n\n            _logger.LogInformation($"Mock: AR anchor oluşturuldu - {anchor.Id}");\n            return Task.FromResult(anchor);\n        }\n\n        public Task<List<ARAnchor>> GetNearbyAnchorsAsync(double latitude, double longitude, double radius)\n        {\n            var nearbyAnchors = new List<ARAnchor>\n            {\n                new ARAnchor\n                {\n                    Latitude = latitude + 0.001,\n                    Longitude = longitude + 0.001,\n                    Altitude = 0,\n                    Id = "mock-anchor-1",\n                    IsActive = true\n                }\n            };\n\n            _logger.LogInformation($"Mock: {nearbyAnchors.Count} yakındaki anchor bulundu");\n            return Task.FromResult(nearbyAnchors);\n        }\n\n        #endregion\n\n        #region IMapDataService Implementation\n\n        public Task<List<LocationModel>> SearchLocationsAsync(string query)\n        {\n            _logger.LogInformation($"Mock: '{query}' için konum arama yapıldı");\n\n            var results = _mockLocations.Where(l =>\n                l.Name.Contains(query, StringComparison.OrdinalIgnoreCase) ||\n                l.Address.Contains(query, StringComparison.OrdinalIgnoreCase))\n                .ToList();\n\n            _logger.LogInformation($"Mock: {results.Count} sonuç bulundu");\n            return Task.FromResult(results);\n        }\n\n        public Task<LocationModel> GetCurrentLocationAsync()\n        {\n            var currentLocation = _mockLocations[0]; // İstanbul\n            _logger.LogInformation($"Mock: Geçerli konum döndürüldü - {currentLocation.Name}");\n            return Task.FromResult(currentLocation);\n        }\n\n        public Task<List<RouteModel>> GetRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType)\n        {\n            _logger.LogInformation($"Mock: {start.Name} -> {end.Name} rotası hesaplandı ({optimizationType})");\n\n            var route = _mockRoutes[0];\n            route.OptimizationType = optimizationType;\n\n            // Optimizasyon tipine göre süre/distance ayarla\n            switch (optimizationType)\n            {\n                case RouteOptimizationType.Fastest:\n                    route.Duration = TimeSpan.FromHours(5);\n                    break;\n                case RouteOptimizationType.Shortest:\n                    route.Distance = 450000;\n                    break;\n                case RouteOptimizationType.Eco:\n                    route.Duration = TimeSpan.FromHours(6.5);\n                    break;\n                case RouteOptimizationType.Safe:\n                    route.Duration = TimeSpan.FromHours(7);\n                    break;\n            }\n\n            return Task.FromResult(new List<RouteModel> { route });\n        }\n\n        public Task<MapRegion> GetVisibleRegionAsync()\n        {\n            var region = new MapRegion\n            {\n                TopLeft = new LocationModel { Latitude = 42.0, Longitude = 26.0 },\n                BottomRight = new LocationModel { Latitude = 36.0, Longitude = 45.0 },\n                Name = "Türkiye"\n            };\n\n            _logger.LogInformation("Mock: Görünür bölge döndürüldü");\n            return Task.FromResult(region);\n        }\n\n        #endregion\n\n        #region IOfflineDataService Implementation\n\n        public Task<bool> IsOfflineDataAvailableAsync(double latitude, double longitude, int zoomLevel)\n        {\n            _logger.LogInformation($"Mock: Offline veri kontrolü - {latitude},{longitude} (zoom: {zoomLevel})");\n            return Task.FromResult(true); // Mock olarak her zaman mevcut\n        }\n\n        public Task DownloadOfflineDataAsync(MapRegion region, int zoomLevel, Action<double> progressCallback)\n        {\n            _logger.LogInformation($"Mock: Offline veri indirme başlatıldı - {region.Name}");\n\n            // Simülasyon için progress callback'leri\n            for (int i = 0; i <= 100; i += 10)\n            {\n                progressCallback?.Invoke(i / 100.0);\n                Task.Delay(50).Wait(); // Kısa bekleme\n            }\n\n            _badgeService?.AwardBadge("Offline-Ready");\n            _logger.LogInformation("Mock: Offline veri indirme tamamlandı");\n            return Task.CompletedTask;\n        }\n\n        public Task DeleteOfflineDataAsync(MapRegion region)\n        {\n            _logger.LogInformation($"Mock: Offline veri silindi - {region.Name}");\n            return Task.CompletedTask;\n        }\n\n        public Task<List<MapRegion>> GetDownloadedRegionsAsync()\n        {\n            var regions = new List<MapRegion>\n            {\n                new MapRegion\n                {\n                    TopLeft = new LocationModel { Latitude = 42.0, Longitude = 26.0 },\n                    BottomRight = new LocationModel { Latitude = 36.0, Longitude = 45.0 },\n                    Name = "Türkiye"\n                }\n            };\n\n            _logger.LogInformation($"Mock: {regions.Count} indirilmiş bölge bulundu");\n            return Task.FromResult(regions);\n        }\n\n        public Task<long> GetOfflineDataSizeAsync()\n        {\n            var size = 524288000L; // 500MB mock\n            _logger.LogInformation($"Mock: Offline veri boyutu - {size} bytes");\n            return Task.FromResult(size);\n        }\n\n        #endregion\n\n        /// <summary>\n        /// Test için mock verileri sıfırlar\n        /// </summary>\n        public void ResetMockData()\n        {\n            _logger.LogInformation("Mock veriler sıfırlandı");\n        }\n\n        /// <summary>\n        /// Test için özel mock verisi ekler\n        /// </summary>\n        public void AddMockLocation(LocationModel location)\n        {\n            _mockLocations.Add(location);\n            _logger.LogInformation($"Mock konum eklendi: {location.Name}");\n        }\n    }\n\n    /// <summary>\n    /// AR Anchor sınıfı\n    /// </summary>\n    public class ARAnchor\n    {\n        public string Id { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n        public double Altitude { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n