// SimulateNavigation.cs - Offline navigation sim√ºlasyon sistemi\n// Bu sƒ±nƒ±f offline navigation senaryolarƒ±nƒ± sim√ºle eder ve CI/CD pipeline ile entegre √ßalƒ±≈üƒ±r\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Navigation sim√ºlasyon koordinat sƒ±nƒ±fƒ±\n    /// </summary>\n    public class Coordinate\n    {\n        public double Lat { get; set; }\n        public double Lng { get; set; }\n        public double? Altitude { get; set; }\n        public double? Speed { get; set; }\n        public DateTime Timestamp { get; set; }\n\n        public Coordinate(double lat, double lng)\n        {\n            Lat = lat;\n            Lng = lng;\n            Timestamp = DateTime.UtcNow;\n        }\n\n        public override string ToString() => $"{Lat:F6}, {Lng:F6}";\n    }\n\n    /// <summary>\n    /// Navigation sim√ºlasyon sonucu\n    /// </summary>\n    public class SimulationResult\n    {\n        public bool Success { get; set; }\n        public TimeSpan Duration { get; set; }\n        public double DistanceCovered { get; set; }\n        public int WaypointsProcessed { get; set; }\n        public List<string> Events { get; set; } = new List<string>();\n        public Dictionary<string, object> Metrics { get; set; } = new Dictionary<string, object>();\n    }\n\n    /// <summary>\n    /// Navigation sim√ºlasyon servisi\n    /// </summary>\n    public class NavigationSimulator\n    {\n        private readonly ILogger<NavigationSimulator> _logger;\n        private readonly string _simulationDataPath;\n        private readonly bool _isTestEnvironment;\n\n        // CI/CD i√ßin environment variable desteƒüi\n        private readonly int _simulationSpeed = int.Parse(Environment.GetEnvironmentVariable("SIMULATION_SPEED") ?? "1000");\n        private readonly bool _enableDetailedLogging = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_SIMULATION_LOGGING") ?? "true");\n        private readonly string _simulationMode = Environment.GetEnvironmentVariable("SIMULATION_MODE") ?? "normal";\n\n        public event EventHandler<Coordinate> LocationUpdated;\n        public event EventHandler<SimulationResult> SimulationCompleted;\n\n        public NavigationSimulator(ILogger<NavigationSimulator> logger)\n        {\n            _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n\n            // Test ortamƒ± kontrol√º\n            _isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n            // Sim√ºlasyon veri yolu\n            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n            _simulationDataPath = Path.Combine(appDataPath, "KesifUygulamasi", "SimulationData");\n            Directory.CreateDirectory(_simulationDataPath);\n\n            _logger.LogInformation("NavigationSimulator initialized with mode: {Mode}, speed: {Speed}ms",\n                _simulationMode, _simulationSpeed);\n        }\n\n        /// <summary>\n        /// Rota sim√ºlasyonunu ba≈ülatƒ±r\n        /// </summary>\n        public async Task<SimulationResult> SimulateRouteAsync(Coordinate[] route, CancellationToken cancellationToken = default)\n        {\n            if (route == null || route.Length == 0)\n                throw new ArgumentException("Route cannot be null or empty", nameof(route));\n\n            var result = new SimulationResult\n            {\n                Success = false,\n                WaypointsProcessed = route.Length\n            };\n\n            var startTime = DateTime.UtcNow;\n            var lastPosition = route.First();\n            double totalDistance = 0;\n\n            _logger.LogInformation("Starting route simulation with {Count} waypoints", route.Length);\n\n            try\n            {\n                // GPS mock ba≈ülatma\n                await InitializeGpsMockAsync();\n\n                for (int i = 0; i < route.Length; i++)\n                {\n                    if (cancellationToken.IsCancellationRequested)\n                    {\n                        result.Events.Add("Simulation cancelled by user");\n                        break;\n                    }\n\n                    var currentPoint = route[i];\n\n                    // Konum g√ºncelleme sim√ºlasyonu\n                    await SimulateLocationUpdateAsync(currentPoint, i + 1, route.Length);\n\n                    // Mesafe hesaplama\n                    if (i > 0)\n                    {\n                        var distance = CalculateDistance(lastPosition, currentPoint);\n                        totalDistance += distance;\n                        result.Metrics["distance_increment"] = distance;\n                    }\n\n                    lastPosition = currentPoint;\n\n                    // Rota sapmasƒ± sim√ºlasyonu (test i√ßin)\n                    if (_isTestEnvironment && i > 0 && i % 5 == 0)\n                    {\n                        await SimulateRouteDeviationAsync(currentPoint);\n                    }\n\n                    // Yeniden hesaplama sim√ºlasyonu\n                    if (_simulationMode == "deviation_test" && i == route.Length / 2)\n                    {\n                        await SimulateRecalculationAsync(currentPoint);\n                    }\n\n                    // Sim√ºlasyon hƒ±zƒ±\n                    await Task.Delay(_simulationSpeed, cancellationToken);\n                }\n\n                result.Success = true;\n                result.DistanceCovered = totalDistance;\n                result.Events.Add($"Simulation completed successfully. Distance: {totalDistance:F2} km");\n\n                _logger.LogInformation("Route simulation completed: Distance={Distance:F2}km, Duration={Duration}",\n                    totalDistance, result.Duration);\n\n            }\n            catch (Exception ex)\n            {\n                result.Events.Add($"Simulation failed: {ex.Message}");\n                _logger.LogError(ex, "Route simulation failed");\n            }\n            finally\n            {\n                result.Duration = DateTime.UtcNow - startTime;\n                SimulationCompleted?.Invoke(this, result);\n\n                // Sim√ºlasyon verilerini kaydet\n                await SaveSimulationDataAsync(result);\n            }\n\n            return result;\n        }\n\n        /// <summary>\n        /// Senkron rota sim√ºlasyonu (legacy support)\n        /// </summary>\n        public void SimulateRoute(Coordinate[] route)\n        {\n            Task.Run(() => SimulateRouteAsync(route)).Wait();\n        }\n\n        /// <summary>\n        /// GPS mock sistemini ba≈ülatƒ±r\n        /// </summary>\n        private async Task InitializeGpsMockAsync()\n        {\n            if (_enableDetailedLogging)\n            {\n                _logger.LogInformation("Initializing GPS mock system");\n            }\n\n            // GPS mock konfig√ºrasyonu\n            var gpsConfig = new\n            {\n                accuracy = 5.0, // 5 metre accuracy\n                update_interval = _simulationSpeed,\n                mock_provider = "NavigationSimulator"\n            };\n\n            var configPath = Path.Combine(_simulationDataPath, "gps_config.json");\n            await File.WriteAllTextAsync(configPath, JsonSerializer.Serialize(gpsConfig, new JsonSerializerOptions { WriteIndented = true }));\n        }\n\n        /// <summary>\n        /// Konum g√ºncelleme sim√ºlasyonu\n        /// </summary>\n        private async Task SimulateLocationUpdateAsync(Coordinate point, int currentStep, int totalSteps)\n        {\n            // GPS verisi sim√ºlasyonu\n            point.Altitude = point.Altitude ?? new Random().Next(0, 100);\n            point.Speed = point.Speed ?? new Random().Next(20, 80);\n\n            if (_enableDetailedLogging)\n            {\n                _logger.LogInformation("üìç Simulated location: {Lat:F6}, {Lng:F6} (Step {Current}/{Total})",\n                    point.Lat, point.Lng, currentStep, totalSteps);\n            }\n\n            // Event tetikleme\n            LocationUpdated?.Invoke(this, point);\n\n            // Konsol √ßƒ±ktƒ±sƒ± (CI/CD i√ßin)\n            if (_isTestEnvironment)\n            {\n                Console.WriteLine($"üìç Simulated location: {point.Lat:F6}, {point.Lng:F6} (Step {currentStep}/{totalSteps})");\n            }\n        }\n\n        /// <summary>\n        /// Rota sapmasƒ± sim√ºlasyonu\n        /// </summary>\n        private async Task SimulateRouteDeviationAsync(Coordinate currentPoint)\n        {\n            var deviation = new Random().NextDouble() * 0.001; // ~100 metre sapma\n            var deviatedPoint = new Coordinate(\n                currentPoint.Lat + deviation,\n                currentPoint.Lng + deviation\n            );\n\n            _logger.LogWarning("üö® Route deviation detected at {Lat:F6}, {Lng:F6}", currentPoint.Lat, currentPoint.Lng);\n\n            // Sapma d√ºzeltme sim√ºlasyonu\n            await Task.Delay(_simulationSpeed / 2);\n\n            if (_enableDetailedLogging)\n            {\n                _logger.LogInformation("‚úÖ Route deviation corrected");\n            }\n        }\n\n        /// <summary>\n        /// Rota yeniden hesaplama sim√ºlasyonu\n        /// </summary>\n        private async Task SimulateRecalculationAsync(Coordinate currentPoint)\n        {\n            _logger.LogInformation("üîÑ Recalculating route from {Lat:F6}, {Lng:F6}", currentPoint.Lat, currentPoint.Lng);\n\n            // Yeniden hesaplama sim√ºlasyonu\n            await Task.Delay(_simulationSpeed * 2);\n\n            if (_enableDetailedLogging)\n            {\n                _logger.LogInformation("‚úÖ Route recalculated successfully");\n            }\n        }\n\n        /// <summary>\n        /// ƒ∞ki koordinat arasƒ±ndaki mesafeyi hesaplar (Haversine formula)\n        /// </summary>\n        private double CalculateDistance(Coordinate point1, Coordinate point2)\n        {\n            const double EarthRadius = 6371; // km\n\n            var lat1 = point1.Lat * Math.PI / 180;\n            var lat2 = point2.Lat * Math.PI / 180;\n            var deltaLat = (point2.Lat - point1.Lat) * Math.PI / 180;\n            var deltaLng = (point2.Lng - point1.Lng) * Math.PI / 180;\n\n            var a = Math.Sin(deltaLat / 2) * Math.Sin(deltaLat / 2) +\n                    Math.Cos(lat1) * Math.Cos(lat2) *\n                    Math.Sin(deltaLng / 2) * Math.Sin(deltaLng / 2);\n\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n\n            return EarthRadius * c;\n        }\n\n        /// <summary>\n        /// Sim√ºlasyon verilerini kaydeder\n        /// </summary>\n        private async Task SaveSimulationDataAsync(SimulationResult result)\n        {\n            try\n            {\n                var simulationData = new\n                {\n                    timestamp = DateTime.UtcNow,\n                    result = result,\n                    environment = new\n                    {\n                        is_test = _isTestEnvironment,\n                        mode = _simulationMode,\n                        speed = _simulationSpeed\n                    }\n                };\n\n                var fileName = $"simulation_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json";\n                var filePath = Path.Combine(_simulationDataPath, fileName);\n\n                await File.WriteAllTextAsync(filePath, JsonSerializer.Serialize(simulationData,\n                    new JsonSerializerOptions { WriteIndented = true }));\n\n                _logger.LogInformation("Simulation data saved to {FilePath}", filePath);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to save simulation data");\n            }\n        }\n\n        /// <summary>\n        /// √ñrnek rota olu≈üturur (test i√ßin)\n        /// </summary>\n        public static Coordinate[] CreateSampleRoute()\n        {\n            return new[]\n            {\n                new Coordinate(41.0082, 28.9784), // ƒ∞stanbul\n                new Coordinate(41.0151, 28.9795), // ≈ûi≈üli\n                new Coordinate(41.0222, 28.9855), // Mecidiyek√∂y\n                new Coordinate(41.0292, 28.9915), // Levent\n                new Coordinate(41.0362, 28.9975), // 4. Levent\n                new Coordinate(41.0432, 29.0035)  // Maslak\n            };\n        }\n\n        /// <summary>\n        /// Sim√ºlasyon istatistiklerini d√∂nd√ºr√ºr\n        /// </summary>\n        public async Task<Dictionary<string, object>> GetSimulationStatsAsync()\n        {\n            var stats = new Dictionary<string, object>();\n\n            try\n            {\n                var simulationFiles = Directory.GetFiles(_simulationDataPath, "simulation_*.json");\n                stats["total_simulations"] = simulationFiles.Length;\n\n                if (simulationFiles.Length > 0)\n                {\n                    var latestFile = simulationFiles.OrderByDescending(f => f).First();\n                    var latestData = JsonSerializer.Deserialize<dynamic>(await File.ReadAllTextAsync(latestFile));\n                    stats["latest_simulation"] = latestData;\n                }\n\n                stats["simulation_mode"] = _simulationMode;\n                stats["simulation_speed"] = _simulationSpeed;\n                stats["is_test_environment"] = _isTestEnvironment;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to get simulation stats");\n                stats["error"] = ex.Message;\n            }\n\n            return stats;\n        }\n    }\n}\n