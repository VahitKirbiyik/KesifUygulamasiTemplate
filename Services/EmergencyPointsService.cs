using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Networking;\nusing SQLite;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class EmergencyPointsService : IEmergencyPointsService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly SQLiteConnection _database;\n        private readonly IConnectivity _connectivity;\n\n        public EmergencyPointsService(HttpClient httpClient, SQLiteConnection database, IConnectivity connectivity)\n        {\n            _httpClient = httpClient;\n            _database = database;\n            _connectivity = connectivity;\n            _database.CreateTable<EmergencyPoint>();\n        }\n\n        public Task<IEnumerable<EmergencyPoint>> GetAllEmergencyPointsAsync(int limit = 100)\n        {\n            var items = _database.Table<EmergencyPoint>().Take(limit).ToList();\n            return Task.FromResult<IEnumerable<EmergencyPoint>>(items);\n        }\n\n        public async Task<EmergencyPoint?> GetEmergencyPointByIdAsync(int id)\n        {\n            var item = _database.Table<EmergencyPoint>().FirstOrDefault(x => x.Id == id);\n            return await Task.FromResult(item);\n        }\n\n        public async Task<IEnumerable<EmergencyPoint>> GetNearbyEmergencyPointsAsync(double latitude, double longitude, double radiusKm = 5, EmergencyPointType type = EmergencyPointType.All)\n        {\n            var localPoints = _database.Table<EmergencyPoint>()\n                .Where(p =>\n                    (type == EmergencyPointType.All || p.Type == type) &&\n                    CalculateDistance(latitude, longitude, p.Latitude, p.Longitude) <= radiusKm)\n                .ToList();\n\n            if (_connectivity.NetworkAccess == NetworkAccess.Internet && (localPoints.Count < 10 || (DateTime.UtcNow - (localPoints.FirstOrDefault()?.LastUpdated ?? DateTime.MinValue)).TotalDays > 7))\n            {\n                try\n                {\n                    var url = $"https://api.mapservice.com/pois?lat={latitude}&lng={longitude}&radius={radiusKm}&type={type.ToString().ToLowerInvariant()}";\n                    var response = await _httpClient.GetAsync(url);\n                    if (response.IsSuccessStatusCode)\n                    {\n                        var onlinePoints = await response.Content.ReadFromJsonAsync<List<EmergencyPoint>>();\n                        if (onlinePoints != null)\n                        {\n                            foreach (var point in onlinePoints)\n                            {\n                                point.LastUpdated = DateTime.UtcNow;\n                                var existing = _database.Table<EmergencyPoint>().FirstOrDefault(p => p.ExternalId == point.ExternalId && point.ExternalId != null);\n                                if (existing != null)\n                                {\n                                    point.Id = existing.Id;\n                                    _database.Update(point);\n                                }\n                                else\n                                {\n                                    _database.Insert(point);\n                                }\n                            }\n\n                            return onlinePoints;\n                        }\n                    }\n                }\n                catch\n                {\n                    // ignore and fallback to local\n                }\n            }\n\n            return localPoints;\n        }\n\n        public Task<int> AddEmergencyPointAsync(EmergencyPoint point)\n        {\n            _database.Insert(point);\n            return Task.FromResult(point.Id);\n        }\n\n        public Task<bool> UpdateEmergencyPointAsync(EmergencyPoint point)\n        {\n            var updated = _database.Update(point) > 0;\n            return Task.FromResult(updated);\n        }\n\n        public Task<bool> RemoveEmergencyPointAsync(int id)\n        {\n            var removed = _database.Delete<EmergencyPoint>(id) > 0;\n            return Task.FromResult(removed);\n        }\n\n        public Task<bool> ClearAllEmergencyPointsAsync()\n        {\n            _database.DeleteAll<EmergencyPoint>();\n            return Task.FromResult(true);\n        }\n\n        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)\n        {\n            // Haversine formula\n            const double R = 6371; // km\n            double dLat = ToRadians(lat2 - lat1);\n            double dLon = ToRadians(lon2 - lon1);\n            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n            return R * c;\n        }\n\n        private double ToRadians(double deg) => deg * (Math.PI / 180);\n    }\n}\n