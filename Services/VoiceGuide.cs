using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Voice guidance service with TTS integration and offline voice navigation\n    /// Provides turn-by-turn voice instructions and offline voice synthesis\n    /// </summary>\n    public class VoiceGuide\n    {\n        private readonly ILogger<VoiceGuide> _logger;\n        private readonly string _voiceCachePath;\n        private readonly string _logsPath;\n        private readonly bool _enableVoiceGuidance;\n        private readonly bool _enableOfflineVoice;\n        private readonly string _defaultVoiceLanguage;\n        private readonly double _voiceSpeed;\n        private readonly int _maxCacheSizeMB;\n\n        public VoiceGuide(ILogger<VoiceGuide> logger)\n        {\n            _logger = logger;\n            _voiceCachePath = Environment.GetEnvironmentVariable("VOICE_CACHE_PATH") ?? "cache/voice";\n            _logsPath = Environment.GetEnvironmentVariable("VOICE_LOGS_PATH") ?? "logs/voice";\n            _enableVoiceGuidance = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_VOICE_GUIDANCE") ?? "true");\n            _enableOfflineVoice = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_OFFLINE_VOICE") ?? "true");\n            _defaultVoiceLanguage = Environment.GetEnvironmentVariable("DEFAULT_VOICE_LANGUAGE") ?? "en-US";\n            _voiceSpeed = double.Parse(Environment.GetEnvironmentVariable("VOICE_SPEED") ?? "1.0");\n            _maxCacheSizeMB = int.Parse(Environment.GetEnvironmentVariable("MAX_VOICE_CACHE_SIZE_MB") ?? "100");\n\n            // Gerekli klasörleri oluştur\n            Directory.CreateDirectory(_voiceCachePath);\n            Directory.CreateDirectory(_logsPath);\n        }\n\n        /// <summary>\n        /// Sesli yönlendirme başlat\n        /// </summary>\n        public async Task<VoiceResult> StartVoiceGuidance(List<NavigationInstruction> instructions, string? language = null)\n        {\n            try\n            {\n                if (!_enableVoiceGuidance)\n                {\n                    return new VoiceResult\n                    {\n                        Success = false,\n                        Message = "Voice guidance is disabled"\n                    };\n                }\n\n                var voiceLanguage = language ?? _defaultVoiceLanguage;\n                var sessionId = Guid.NewGuid().ToString();\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    SessionId = sessionId,\n                    Language = voiceLanguage,\n                    TotalInstructions = instructions.Count,\n                    Message = $"Voice guidance started with {instructions.Count} instructions"\n                };\n\n                // İlk yönlendirmeyi oynat\n                if (instructions.Count > 0)\n                {\n                    var firstInstruction = instructions[0];\n                    var playResult = await PlayVoiceInstruction(firstInstruction, voiceLanguage, sessionId);\n\n                    if (!playResult.Success)\n                    {\n                        result.Success = false;\n                        result.Message = $"Failed to play first instruction: {playResult.ErrorMessage}";\n                    }\n                }\n\n                await LogVoiceSession(result);\n                _logger.LogInformation($"Voice guidance started: {sessionId} with {instructions.Count} instructions");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice guidance start failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Sesli yönlendirme durdur\n        /// </summary>\n        public async Task<VoiceResult> StopVoiceGuidance(string sessionId)\n        {\n            try\n            {\n                // Mevcut ses oynatmayı durdur (platform specific implementation)\n                await StopCurrentPlayback();\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    SessionId = sessionId,\n                    Message = "Voice guidance stopped"\n                };\n\n                await LogVoiceSession(result);\n                _logger.LogInformation($"Voice guidance stopped: {sessionId}");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice guidance stop failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    SessionId = sessionId,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Tek bir sesli yönlendirme oynat\n        /// </summary>\n        public async Task<VoiceResult> PlayVoiceInstruction(NavigationInstruction instruction, string? language = null, string? sessionId = null)\n        {\n            try\n            {\n                var voiceLanguage = language ?? _defaultVoiceLanguage;\n                var currentSessionId = sessionId ?? Guid.NewGuid().ToString();\n\n                // Cache'de bu yönerge için ses dosyası var mı kontrol et\n                var cacheKey = GenerateCacheKey(instruction.Text, voiceLanguage);\n                var cachedFile = Path.Combine(_voiceCachePath, $"{cacheKey}.wav");\n\n                if (_enableOfflineVoice && File.Exists(cachedFile))\n                {\n                    // Cache'den oynat\n                    return await PlayCachedVoiceFile(cachedFile, instruction, currentSessionId);\n                }\n                else\n                {\n                    // TTS ile oluştur ve oynat\n                    return await GenerateAndPlayVoice(instruction, voiceLanguage, currentSessionId);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice instruction play failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Ses hızını ayarla\n        /// </summary>\n        public async Task<VoiceResult> SetVoiceSpeed(double speed)\n        {\n            try\n            {\n                if (speed < 0.5 || speed > 2.0)\n                {\n                    return new VoiceResult\n                    {\n                        Success = false,\n                        Message = "Voice speed must be between 0.5 and 2.0"\n                    };\n                }\n\n                // Platform specific voice speed implementation\n                await SetPlatformVoiceSpeed(speed);\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    Message = $"Voice speed set to {speed}x"\n                };\n\n                await LogVoiceSession(result);\n                _logger.LogInformation($"Voice speed changed to {speed}x");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice speed change failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Ses dilini değiştir\n        /// </summary>\n        public async Task<VoiceResult> ChangeVoiceLanguage(string language)\n        {\n            try\n            {\n                // Desteklenen dilleri kontrol et\n                var supportedLanguages = new[] { "en-US", "en-GB", "tr-TR", "de-DE", "fr-FR", "es-ES" };\n\n                if (!supportedLanguages.Contains(language))\n                {\n                    return new VoiceResult\n                    {\n                        Success = false,\n                        Message = $"Unsupported language: {language}"\n                    };\n                }\n\n                // Platform specific language change implementation\n                await SetPlatformVoiceLanguage(language);\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    Language = language,\n                    Message = $"Voice language changed to {language}"\n                };\n\n                await LogVoiceSession(result);\n                _logger.LogInformation($"Voice language changed to {language}");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice language change failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Ses önbelleğini temizle\n        /// </summary>\n        public async Task<VoiceResult> ClearVoiceCache()\n        {\n            try\n            {\n                var cacheFiles = Directory.GetFiles(_voiceCachePath, "*.wav");\n                var totalSize = cacheFiles.Sum(f => new FileInfo(f).Length);\n\n                foreach (var file in cacheFiles)\n                {\n                    File.Delete(file);\n                }\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    Message = $"Voice cache cleared: {cacheFiles.Length} files, {totalSize / 1024 / 1024:F1} MB"\n                };\n\n                await LogVoiceSession(result);\n                _logger.LogInformation($"Voice cache cleared: {cacheFiles.Length} files");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice cache clear failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Ses önbellek istatistiklerini al\n        /// </summary>\n        public async Task<VoiceCacheStats> GetVoiceCacheStats()\n        {\n            try\n            {\n                var cacheFiles = Directory.GetFiles(_voiceCachePath, "*.wav");\n                var totalSize = cacheFiles.Sum(f => new FileInfo(f).Length);\n                var totalFiles = cacheFiles.Length;\n\n                return new VoiceCacheStats\n                {\n                    TotalFiles = totalFiles,\n                    TotalSizeBytes = totalSize,\n                    TotalSizeMB = totalSize / 1024.0 / 1024.0,\n                    CachePath = _voiceCachePath,\n                    MaxCacheSizeMB = _maxCacheSizeMB,\n                    CacheUtilizationPercent = _maxCacheSizeMB > 0 ? (totalSize / 1024.0 / 1024.0 / _maxCacheSizeMB) * 100 : 0\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Voice cache stats failed: {ex.Message}");\n                return new VoiceCacheStats\n                {\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Ses geçmişini al\n        /// </summary>\n        public async Task<List<VoiceLog>> GetVoiceHistory(string? sessionId = null, DateTime? startDate = null, DateTime? endDate = null)\n        {\n            try\n            {\n                var logFiles = Directory.GetFiles(_logsPath, "voice-*.json")\n                    .Where(f => !startDate.HasValue || File.GetCreationTime(f) >= startDate.Value)\n                    .Where(f => !endDate.HasValue || File.GetCreationTime(f) <= endDate.Value)\n                    .OrderByDescending(f => File.GetCreationTime(f))\n                    .Take(100);\n\n                var history = new List<VoiceLog>();\n\n                foreach (var logFile in logFiles)\n                {\n                    try\n                    {\n                        var content = await File.ReadAllTextAsync(logFile);\n                        var logs = JsonSerializer.Deserialize<List<VoiceLog>>(content);\n\n                        if (logs != null)\n                        {\n                            var filteredLogs = logs.Where(l => sessionId == null || l.SessionId == sessionId).ToList();\n                            history.AddRange(filteredLogs);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning($"Failed to read voice log {logFile}: {ex.Message}");\n                    }\n                }\n\n                return history.OrderByDescending(l => l.Timestamp).Take(1000).ToList();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to get voice history: {ex.Message}");\n                return new List<VoiceLog>();\n            }\n        }\n\n        /// <summary>\n        /// Cache anahtarı oluştur\n        /// </summary>\n        private string GenerateCacheKey(string text, string language)\n        {\n            using var sha256 = System.Security.Cryptography.SHA256.Create();\n            var hash = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes($"{text}|{language}|{_voiceSpeed}"));\n            return BitConverter.ToString(hash).Replace("-", "").ToLower();\n        }\n\n        /// <summary>\n        /// Cache'den ses dosyasını oynat\n        /// </summary>\n        private async Task<VoiceResult> PlayCachedVoiceFile(string filePath, NavigationInstruction instruction, string sessionId)\n        {\n            try\n            {\n                // Platform specific audio playback implementation\n                await PlayAudioFile(filePath);\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    SessionId = sessionId,\n                    Instruction = instruction,\n                    Message = "Voice instruction played from cache",\n                    FromCache = true\n                };\n\n                await LogVoiceInstruction(result);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning($"Cached voice playback failed, falling back to TTS: {ex.Message}");\n                return await GenerateAndPlayVoice(instruction, _defaultVoiceLanguage, sessionId);\n            }\n        }\n\n        /// <summary>\n        /// TTS ile ses oluştur ve oynat\n        /// </summary>\n        private async Task<VoiceResult> GenerateAndPlayVoice(NavigationInstruction instruction, string language, string sessionId)\n        {\n            try\n            {\n                // Platform specific TTS implementation\n                var audioData = await GenerateTTS(instruction.Text, language, _voiceSpeed);\n\n                if (audioData == null || audioData.Length == 0)\n                {\n                    return new VoiceResult\n                    {\n                        Success = false,\n                        SessionId = sessionId,\n                        Instruction = instruction,\n                        ErrorMessage = "TTS generation failed"\n                    };\n                }\n\n                // Cache'e kaydet\n                if (_enableOfflineVoice)\n                {\n                    var cacheKey = GenerateCacheKey(instruction.Text, language);\n                    var cacheFile = Path.Combine(_voiceCachePath, $"{cacheKey}.wav");\n\n                    await File.WriteAllBytesAsync(cacheFile, audioData);\n\n                    // Cache boyutu kontrolü\n                    await ManageCacheSize();\n                }\n\n                // Oynat\n                await PlayAudioData(audioData);\n\n                var result = new VoiceResult\n                {\n                    Success = true,\n                    SessionId = sessionId,\n                    Instruction = instruction,\n                    Language = language,\n                    Message = "Voice instruction generated and played",\n                    FromCache = false\n                };\n\n                await LogVoiceInstruction(result);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"TTS generation failed: {ex.Message}");\n                return new VoiceResult\n                {\n                    Success = false,\n                    SessionId = sessionId,\n                    Instruction = instruction,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n        /// <summary>\n        /// Cache boyutunu yönet\n        /// </summary>\n        private async Task ManageCacheSize()\n        {\n            try\n            {\n                var cacheFiles = Directory.GetFiles(_voiceCachePath, "*.wav")\n                    .Select(f => new FileInfo(f))\n                    .OrderBy(f => f.LastAccessTime)\n                    .ToList();\n\n                var totalSize = cacheFiles.Sum(f => f.Length);\n                var maxSizeBytes = _maxCacheSizeMB * 1024 * 1024;\n\n                if (totalSize > maxSizeBytes)\n                {\n                    foreach (var file in cacheFiles)\n                    {\n                        if (totalSize <= maxSizeBytes)\n                            break;\n\n                        totalSize -= file.Length;\n                        file.Delete();\n                    }\n\n                    _logger.LogInformation($"Voice cache cleaned: {cacheFiles.Count - Directory.GetFiles(_voiceCachePath, "*.wav").Length} files removed");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning($"Cache size management failed: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Platform specific implementations (mock)\n        /// </summary>\n        private async Task<byte[]> GenerateTTS(string text, string language, double speed)\n        {\n            await Task.Delay(500); // Simüle edilmiş TTS süresi\n            // Mock audio data - gerçek implementasyonda TTS API çağrısı yapılacak\n            return new byte[1024]; // Mock data\n        }\n\n        private async Task PlayAudioFile(string filePath)\n        {\n            await Task.Delay(200); // Simüle edilmiş oynatma süresi\n            // Platform specific audio playback implementation\n        }\n\n        private async Task PlayAudioData(byte[] audioData)\n        {\n            await Task.Delay(200); // Simüle edilmiş oynatma süresi\n            // Platform specific audio playback implementation\n        }\n\n        private async Task StopCurrentPlayback()\n        {\n            await Task.Delay(100); // Simüle edilmiş durdurma süresi\n            // Platform specific audio stop implementation\n        }\n\n        private async Task SetPlatformVoiceSpeed(double speed)\n        {\n            await Task.Delay(100); // Simüle edilmiş ayar süresi\n            // Platform specific voice speed implementation\n        }\n\n        private async Task SetPlatformVoiceLanguage(string language)\n        {\n            await Task.Delay(100); // Simüle edilmiş ayar süresi\n            // Platform specific voice language implementation\n        }\n\n        /// <summary>\n        /// Ses oturumunu logla\n        /// </summary>\n        private async Task LogVoiceSession(VoiceResult result)\n        {\n            try\n            {\n                var logEntry = new VoiceLog\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    SessionId = result.SessionId,\n                    Type = VoiceLogType.Session,\n                    Language = result.Language,\n                    Success = result.Success,\n                    Message = result.Message,\n                    ErrorMessage = result.ErrorMessage,\n                    Timestamp = DateTime.UtcNow\n                };\n\n                await WriteVoiceLog(logEntry);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to log voice session: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Ses yönergesini logla\n        /// </summary>\n        private async Task LogVoiceInstruction(VoiceResult result)\n        {\n            try\n            {\n                var logEntry = new VoiceLog\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    SessionId = result.SessionId,\n                    Type = VoiceLogType.Instruction,\n                    Language = result.Language,\n                    InstructionText = result.Instruction?.Text,\n                    Success = result.Success,\n                    FromCache = result.FromCache,\n                    Message = result.Message,\n                    ErrorMessage = result.ErrorMessage,\n                    Timestamp = DateTime.UtcNow\n                };\n\n                await WriteVoiceLog(logEntry);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to log voice instruction: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Ses logunu yaz\n        /// </summary>\n        private async Task WriteVoiceLog(VoiceLog logEntry)\n        {\n            var logFile = Path.Combine(_logsPath, $"voice-{DateTime.UtcNow:yyyy-MM-dd}.json");\n\n            List<VoiceLog> existingLogs = new List<VoiceLog>();\n\n            if (File.Exists(logFile))\n            {\n                try\n                {\n                    var content = await File.ReadAllTextAsync(logFile);\n                    existingLogs = JsonSerializer.Deserialize<List<VoiceLog>>(content) ?? new List<VoiceLog>();\n                }\n                catch\n                {\n                    // Log dosyası bozuk ise yeni liste oluştur\n                }\n            }\n\n            existingLogs.Add(logEntry);\n\n            var json = JsonSerializer.Serialize(existingLogs, new JsonSerializerOptions\n            {\n                WriteIndented = true,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            await File.WriteAllTextAsync(logFile, json);\n        }\n    }\n\n    public class NavigationInstruction\n    {\n        public string? Text { get; set; }\n        public InstructionType Type { get; set; }\n        public double? Distance { get; set; }\n        public TimeSpan? TimeToDestination { get; set; }\n        public string? StreetName { get; set; }\n        public TurnDirection? TurnDirection { get; set; }\n    }\n\n    public class VoiceResult\n    {\n        public bool Success { get; set; }\n        public string? SessionId { get; set; }\n        public string? Language { get; set; }\n        public NavigationInstruction? Instruction { get; set; }\n        public int TotalInstructions { get; set; }\n        public bool FromCache { get; set; }\n        public DateTime Timestamp { get; set; } = DateTime.UtcNow;\n        public string? Message { get; set; }\n        public string? ErrorMessage { get; set; }\n    }\n\n    public class VoiceCacheStats\n    {\n        public int TotalFiles { get; set; }\n        public long TotalSizeBytes { get; set; }\n        public double TotalSizeMB { get; set; }\n        public string? CachePath { get; set; }\n        public int MaxCacheSizeMB { get; set; }\n        public double CacheUtilizationPercent { get; set; }\n        public string? ErrorMessage { get; set; }\n    }\n\n    public class VoiceLog\n    {\n        public string? Id { get; set; }\n        public string? SessionId { get; set; }\n        public VoiceLogType Type { get; set; }\n        public string? Language { get; set; }\n        public string? InstructionText { get; set; }\n        public bool Success { get; set; }\n        public bool FromCache { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string? Message { get; set; }\n        public string? ErrorMessage { get; set; }\n    }\n\n    public enum InstructionType\n    {\n        Start,\n        Turn,\n        Continue,\n        Arrive,\n        Recalculate,\n        OffRoute\n    }\n\n    public enum TurnDirection\n    {\n        Left,\n        Right,\n        Straight,\n        UTurn,\n        Roundabout\n    }\n\n    public enum VoiceLogType\n    {\n        Session,\n        Instruction,\n        Error\n    }\n}\n