using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Realtime incident logging servisi\n    /// CI/CD pipeline ile entegre edilmiş olay loglama sistemi\n    /// </summary>\n    public class IncidentLogger\n    {\n        private readonly ILogger<IncidentLogger> _logger;\n        private readonly string _logPath;\n        private readonly string _environment;\n        private readonly bool _enableRealtimeLogging;\n        private readonly int _maxLogFileSize;\n        private readonly int _retentionDays;\n\n        public IncidentLogger(ILogger<IncidentLogger> logger)\n        {\n            _logger = logger;\n            _logPath = Environment.GetEnvironmentVariable("INCIDENT_LOG_PATH") ?? "logs/incidents";\n            _environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production";\n            _enableRealtimeLogging = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_REALTIME_LOGGING") ?? "true");\n            _maxLogFileSize = int.Parse(Environment.GetEnvironmentVariable("MAX_LOG_FILE_SIZE_MB") ?? "100");\n            _retentionDays = int.Parse(Environment.GetEnvironmentVariable("LOG_RETENTION_DAYS") ?? "30");\n\n            // Log klasörünü oluştur\n            Directory.CreateDirectory(_logPath);\n        }\n\n        /// <summary>\n        /// Kritik olay loglama\n        /// </summary>\n        public async Task LogCritical(string message, string category = "General", Dictionary<string, object> metadata = null)\n        {\n            await Log("Critical", message, category, metadata);\n        }\n\n        /// <summary>\n        /// Hata olay loglama\n        /// </summary>\n        public async Task LogError(string message, string category = "General", Dictionary<string, object> metadata = null)\n        {\n            await Log("Error", message, category, metadata);\n        }\n\n        /// <summary>\n        /// Uyarı olay loglama\n        /// </summary>\n        public async Task LogWarning(string message, string category = "General", Dictionary<string, object> metadata = null)\n        {\n            await Log("Warning", message, category, metadata);\n        }\n\n        /// <summary>\n        /// Bilgi olay loglama\n        /// </summary>\n        public async Task LogInfo(string message, string category = "General", Dictionary<string, object> metadata = null)\n        {\n            await Log("Info", message, category, metadata);\n        }\n\n        /// <summary>\n        /// Genel olay loglama\n        /// </summary>\n        public async Task Log(string level, string message, string category = "General", Dictionary<string, object> metadata = null)\n        {\n            try\n            {\n                var incident = new IncidentLog\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    Level = level,\n                    Message = message,\n                    Category = category,\n                    Timestamp = DateTime.UtcNow,\n                    Environment = _environment,\n                    Metadata = metadata ?? new Dictionary<string, object>(),\n                    Source = "KesifUygulamasiTemplate"\n                };\n\n                // JSON formatında log yaz\n                string logEntry = JsonSerializer.Serialize(incident, new JsonSerializerOptions\n                {\n                    WriteIndented = true,\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                });\n\n                string fileName = GetLogFileName();\n                string filePath = Path.Combine(_logPath, fileName);\n\n                // Dosya boyutu kontrolü\n                if (File.Exists(filePath) && new FileInfo(filePath).Length > _maxLogFileSize * 1024 * 1024)\n                {\n                    // Yeni dosya oluştur\n                    fileName = GetLogFileName(true);\n                    filePath = Path.Combine(_logPath, fileName);\n                }\n\n                await File.AppendAllTextAsync(filePath, logEntry + Environment.NewLine);\n\n                // Realtime logging aktifse console'a da yaz\n                if (_enableRealtimeLogging)\n                {\n                    string consoleMessage = $"[{incident.Timestamp:yyyy-MM-dd HH:mm:ss}] {level.ToUpper()}: {message}";\n                    switch (level.ToLower())\n                    {\n                        case "critical":\n                        case "error":\n                            _logger.LogError(consoleMessage);\n                            break;\n                        case "warning":\n                            _logger.LogWarning(consoleMessage);\n                            break;\n                        default:\n                            _logger.LogInformation(consoleMessage);\n                            break;\n                    }\n                }\n\n                // Eski log dosyalarını temizle\n                await CleanupOldLogs();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Incident logging failed: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Log dosyalarını getir\n        /// </summary>\n        public async Task<List<IncidentLog>> GetLogs(DateTime? startDate = null, DateTime? endDate = null, string level = null)\n        {\n            var logs = new List<IncidentLog>();\n\n            try\n            {\n                var logFiles = Directory.GetFiles(_logPath, "incident-*.json")\n                    .OrderByDescending(f => f)\n                    .Take(10); // Son 10 dosyayı al\n\n                foreach (var file in logFiles)\n                {\n                    var content = await File.ReadAllTextAsync(file);\n                    var lines = content.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);\n\n                    foreach (var line in lines)\n                    {\n                        try\n                        {\n                            var log = JsonSerializer.Deserialize<IncidentLog>(line);\n                            if (log != null)\n                            {\n                                bool includeLog = true;\n\n                                if (startDate.HasValue && log.Timestamp < startDate.Value)\n                                    includeLog = false;\n                                if (endDate.HasValue && log.Timestamp > endDate.Value)\n                                    includeLog = false;\n                                if (!string.IsNullOrEmpty(level) && !log.Level.Equals(level, StringComparison.OrdinalIgnoreCase))\n                                    includeLog = false;\n\n                                if (includeLog)\n                                    logs.Add(log);\n                            }\n                        }\n                        catch\n                        {\n                            // Geçersiz JSON satırını atla\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to read incident logs: {ex.Message}");\n            }\n\n            return logs.OrderByDescending(l => l.Timestamp).ToList();\n        }\n\n        /// <summary>\n        /// Log istatistiklerini getir\n        /// </summary>\n        public async Task<IncidentStats> GetStats(DateTime? startDate = null, DateTime? endDate = null)\n        {\n            var logs = await GetLogs(startDate, endDate);\n\n            return new IncidentStats\n            {\n                TotalIncidents = logs.Count,\n                CriticalCount = logs.Count(l => l.Level.Equals("Critical", StringComparison.OrdinalIgnoreCase)),\n                ErrorCount = logs.Count(l => l.Level.Equals("Error", StringComparison.OrdinalIgnoreCase)),\n                WarningCount = logs.Count(l => l.Level.Equals("Warning", StringComparison.OrdinalIgnoreCase)),\n                InfoCount = logs.Count(l => l.Level.Equals("Info", StringComparison.OrdinalIgnoreCase)),\n                Categories = logs.GroupBy(l => l.Category)\n                    .ToDictionary(g => g.Key, g => g.Count()),\n                TimeRange = new TimeRange\n                {\n                    Start = logs.LastOrDefault()?.Timestamp ?? DateTime.MinValue,\n                    End = logs.FirstOrDefault()?.Timestamp ?? DateTime.MaxValue\n                }\n            };\n        }\n\n        private string GetLogFileName(bool forceNew = false)\n        {\n            string dateStr = DateTime.UtcNow.ToString("yyyy-MM-dd");\n            string baseName = $"incident-{dateStr}";\n\n            if (!forceNew)\n            {\n                // Mevcut dosyayı kontrol et\n                string existingFile = Directory.GetFiles(_logPath, $"{baseName}*.json")\n                    .OrderByDescending(f => f)\n                    .FirstOrDefault();\n\n                if (existingFile != null)\n                {\n                    return Path.GetFileName(existingFile);\n                }\n            }\n\n            // Yeni dosya oluştur\n            return $"{baseName}-{DateTime.UtcNow.ToString("HH-mm-ss")}.json";\n        }\n\n        private async Task CleanupOldLogs()\n        {\n            try\n            {\n                var cutoffDate = DateTime.UtcNow.AddDays(-_retentionDays);\n                var oldFiles = Directory.GetFiles(_logPath, "incident-*.json")\n                    .Where(f => File.GetCreationTimeUtc(f) < cutoffDate);\n\n                foreach (var file in oldFiles)\n                {\n                    File.Delete(file);\n                    _logger.LogInformation($"Deleted old incident log: {Path.GetFileName(file)}");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to cleanup old logs: {ex.Message}");\n            }\n        }\n    }\n\n    public class IncidentLog\n    {\n        public string Id { get; set; }\n        public string Level { get; set; }\n        public string Message { get; set; }\n        public string Category { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Environment { get; set; }\n        public Dictionary<string, object> Metadata { get; set; }\n        public string Source { get; set; }\n    }\n\n    public class IncidentStats\n    {\n        public int TotalIncidents { get; set; }\n        public int CriticalCount { get; set; }\n        public int ErrorCount { get; set; }\n        public int WarningCount { get; set; }\n        public int InfoCount { get; set; }\n        public Dictionary<string, int> Categories { get; set; }\n        public TimeRange TimeRange { get; set; }\n    }\n\n    public class TimeRange\n    {\n        public DateTime Start { get; set; }\n        public DateTime End { get; set; }\n    }\n}\n