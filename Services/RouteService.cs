using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Text.Json;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// İki konum arası rota bilgisini sağlayan servis implementasyonu\n    /// Google Maps Directions API, Mapbox Directions API ve HERE Maps desteği\n    /// </summary>\n    public class RouteService : IRouteService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly ConnectivityService _connectivityService;\n        private readonly ILogger<RouteService> _logger;\n        private readonly LocalizationService _localizationService;\n        private readonly MonitoringService _monitoringService;\n        private readonly string _googleMapsApiKey;\n        private readonly string _mapboxApiKey;\n        private readonly string? _hereApiKey;\n        private readonly string? _hereAppId;\n        private const string GOOGLE_MAPS_API_URL = "https://maps.googleapis.com/maps/api/directions/json";\n        private const string MAPBOX_API_URL = "https://api.mapbox.com/directions/v5/mapbox/driving";\n        private const string HERE_API_URL = "https://router.hereapi.com/v8/routes";\n\n        // Current provider tracking\n        public string CurrentProvider { get; private set; } = "Offline";\n\n        public RouteService(HttpClient httpClient, ConnectivityService connectivityService, ILogger<RouteService> logger, LocalizationService localizationService, MonitoringService monitoringService)\n        {\n            _httpClient = httpClient;\n            _connectivityService = connectivityService;\n            _logger = logger;\n            _localizationService = localizationService;\n            _monitoringService = monitoringService;\n\n            // API anahtarları - gerçek uygulamada secure storage'dan alınmalı\n            _googleMapsApiKey = Environment.GetEnvironmentVariable("GOOGLE_MAPS_API_KEY") ?? "YOUR_GOOGLE_MAPS_API_KEY";\n            _mapboxApiKey = Environment.GetEnvironmentVariable("MAPBOX_API_KEY") ?? "YOUR_MAPBOX_API_KEY";\n            _hereApiKey = Environment.GetEnvironmentVariable("HERE_API_KEY") ?? "YOUR_HERE_API_KEY";\n            _hereAppId = Environment.GetEnvironmentVariable("HERE_APP_ID") ?? "YOUR_HERE_APP_ID";\n        }\n\n        /// <summary>\n        /// Gerçek rota API'leri kullanarak rota hesaplar\n        /// </summary>\n        public async Task<System.Collections.Generic.List<LocationModel>> GetRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType = RouteOptimizationType.Fastest)\n        {\n            // Offline kontrolü\n            if (!_connectivityService.IsConnected)\n            {\n                return await GetOfflineRouteAsync(start, end, optimizationType);\n            }\n\n            try\n            {\n                // Provider seçimi ve loglama\n                var provider = await GetBestProviderAsync(optimizationType);\n                CurrentProvider = provider; // Track current provider\n                _logger.LogInformation($"Routing provider: {provider}, Optimization: {optimizationType}");\n\n                // Monitoring loglama\n                _monitoringService.LogProviderUsage(provider);\n                _monitoringService.LogRouteTypeUsage(optimizationType.ToString());\n\n                List<LocationModel>? route = null;\n\n                // Provider'a göre rota hesapla\n                switch (provider)\n                {\n                    case "Google":\n                        route = await GetGoogleMapsRouteAsync(start, end, optimizationType);\n                        break;\n                    case "Mapbox":\n                        route = await GetMapboxRouteAsync(start, end, optimizationType);\n                        break;\n                    case "HERE":\n                        route = await GetHereMapsRouteAsync(start, end, optimizationType);\n                        break;\n                }\n\n                if (route != null && route.Count > 0)\n                {\n                    return route;\n                }\n\n                // Tüm API'ler başarısız olursa basit rota döndür\n                _logger.LogInformation("Routing provider: Offline/Simple Route");\n                return await GetSimpleRouteAsync(start, end);\n            }\n            catch (Exception ex)\n            {\n                // Hata durumunda basit rota\n                System.Diagnostics.Debug.WriteLine($"Rota hesaplanırken hata: {ex.Message}");\n                return await GetSimpleRouteAsync(start, end);\n            }\n        }\n\n        /// <summary>\n        /// En iyi provider'ı seçer\n        /// </summary>\n        private Task<string> GetBestProviderAsync(RouteOptimizationType optimizationType)\n        {\n            // Basit fallback mantığı - gerçek uygulamada daha sofistike olabilir\n            if (!string.IsNullOrEmpty(_googleMapsApiKey) && !_googleMapsApiKey.Contains("YOUR_"))\n                return Task.FromResult("Google");\n            if (!string.IsNullOrEmpty(_mapboxApiKey) && !_mapboxApiKey.Contains("YOUR_"))\n                return Task.FromResult("Mapbox");\n            if (!string.IsNullOrEmpty(_hereApiKey) && !_hereApiKey.Contains("YOUR_"))\n                return Task.FromResult("HERE");\n            return Task.FromResult("Offline");\n        }\n\n        /// <summary>\n        /// Google Maps Directions API ile rota hesaplar\n        /// </summary>\n        private async Task<List<LocationModel>> GetGoogleMapsRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType)\n        {\n            if (string.IsNullOrEmpty(_googleMapsApiKey) || _googleMapsApiKey.Contains("YOUR_"))\n                return new List<LocationModel>();\n\n            // Optimizasyon türüne göre mode belirle\n            string mode = optimizationType switch\n            {\n                RouteOptimizationType.Fastest => "driving",\n                RouteOptimizationType.Shortest => "driving",\n                RouteOptimizationType.Eco => "driving",\n                RouteOptimizationType.Safe => "walking", // Güvenli rota için yürüyüş\n                _ => "driving"\n            };\n\n            var url = $"{GOOGLE_MAPS_API_URL}?origin={start.Latitude},{start.Longitude}&destination={end.Latitude},{end.Longitude}&key={_googleMapsApiKey}&mode={mode}&avoid=tolls";\n\n            var response = await _httpClient.GetAsync(url);\n            if (!response.IsSuccessStatusCode)\n                return new List<LocationModel>();\n\n            var content = await response.Content.ReadAsStringAsync();\n            var googleResponse = JsonSerializer.Deserialize<GoogleMapsResponse>(content);\n\n            if (googleResponse?.Status != "OK" || googleResponse.Routes == null || googleResponse.Routes.Length == 0)\n                return new List<LocationModel>();\n\n            var route = new List<LocationModel>();\n            var overviewPath = googleResponse.Routes[0]?.OverviewPolyline?.Points;\n\n            if (string.IsNullOrEmpty(overviewPath))\n            {\n                route.Add(start);\n                route.Add(end);\n                return route;\n            }\n\n            return route;\n        }\n\n        /// <summary>\n        /// Mapbox Directions API ile rota hesaplar\n        /// </summary>\n        private async Task<List<LocationModel>> GetMapboxRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType)\n        {\n            if (string.IsNullOrEmpty(_mapboxApiKey) || _mapboxApiKey.Contains("YOUR_"))\n                return new List<LocationModel>();\n\n            // Optimizasyon türüne göre profile belirle\n            string profile = optimizationType switch\n            {\n                RouteOptimizationType.Fastest => "driving",\n                RouteOptimizationType.Shortest => "driving",\n                RouteOptimizationType.Eco => "driving",\n                RouteOptimizationType.Safe => "walking",\n                _ => "driving"\n            };\n\n            var url = $"{MAPBOX_API_URL}/{start.Longitude},{start.Latitude};{end.Longitude},{end.Latitude}?access_token={_mapboxApiKey}&geometries=geojson&profile=mapbox/{profile}";\n\n            var response = await _httpClient.GetAsync(url);\n            if (!response.IsSuccessStatusCode)\n                return new List<LocationModel>();\n\n            var content = await response.Content.ReadAsStringAsync();\n            var mapboxResponse = JsonSerializer.Deserialize<MapboxResponse>(content);\n\n            if (mapboxResponse?.Routes == null || mapboxResponse.Routes.Length == 0)\n                return new List<LocationModel>();\n\n            var route = new List<LocationModel>();\n            var geometry = mapboxResponse.Routes[0]?.Geometry;\n            var coordinates = geometry?.Coordinates;\n\n            if (coordinates == null)\n                return new List<LocationModel>();\n\n            foreach (var coord in coordinates)\n            {\n                route.Add(new LocationModel\n                {\n                    Latitude = coord[1],\n                    Longitude = coord[0]\n                });\n            }\n\n            return route;\n        }\n\n        /// <summary>\n        /// Offline durumda basit rota hesaplar\n        /// </summary>\n        private async Task<List<LocationModel>> GetOfflineRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType)\n        {\n            // Offline önbellekten rota kontrolü\n            // Gerçek implementasyonda veritabanından rota çekilmeli\n\n            // Mesafe hesapla (basit Haversine formülü)\n            double distanceKm = CalculateDistance(start.Latitude, start.Longitude, end.Latitude, end.Longitude);\n\n            // Offline ETA hesaplama\n            var eta = OfflineRouteSimulator.EstimateDuration(distanceKm);\n            var etaMessage = _localizationService.GetString("OfflineETA", eta.TotalMinutes);\n            _logger.LogInformation(etaMessage);\n\n            return await GetSimpleRouteAsync(start, end);\n        }\n\n        /// <summary>\n        /// Basit doğrusal rota hesaplar (fallback)\n        /// </summary>\n        private async Task<List<LocationModel>> GetSimpleRouteAsync(LocationModel start, LocationModel end)\n        {\n            await Task.Delay(100); // Simüle edilmiş ağ gecikmesi\n\n            var route = new List<LocationModel>();\n\n            // Başlangıç noktasını ekleyin\n            route.Add(start);\n\n            // İki nokta arasında birkaç ara nokta oluşturun\n            int steps = 10;\n            for (int i = 1; i < steps; i++)\n            {\n                double factor = (double)i / steps;\n                double latitude = start.Latitude + (end.Latitude - start.Latitude) * factor;\n                double longitude = start.Longitude + (end.Longitude - start.Longitude) * factor;\n                route.Add(new LocationModel { Latitude = latitude, Longitude = longitude });\n            }\n\n            return route;\n        }\n\n        /// <summary>\n        /// İki konum arası mesafeyi hesaplar (Haversine formülü)\n        /// </summary>\n        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)\n        {\n            const double R = 6371; // Dünya yarıçapı km\n            double dLat = (lat2 - lat1) * Math.PI / 180;\n            double dLon = (lon2 - lon1) * Math.PI / 180;\n            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                      Math.Cos(lat1 * Math.PI / 180) * Math.Cos(lat2 * Math.PI / 180) *\n                      Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n            return R * c;\n        }\n\n        /// <summary>\n        /// HERE Maps Directions API ile rota hesaplar\n        /// </summary>\n        private async Task<List<LocationModel>> GetHereMapsRouteAsync(LocationModel start, LocationModel end, RouteOptimizationType optimizationType)\n        {\n            if (string.IsNullOrEmpty(_hereApiKey) || string.IsNullOrEmpty(_hereAppId))\n                return new List<LocationModel>();\n\n            try\n            {\n                // Optimizasyon türüne göre transport mode belirle\n                string transportMode = optimizationType switch\n                {\n                    RouteOptimizationType.Fastest => "car",\n                    RouteOptimizationType.Shortest => "car",\n                    RouteOptimizationType.Eco => "car",\n                    RouteOptimizationType.Safe => "pedestrian",\n                    _ => "car"\n                };\n\n                var url = $"{HERE_API_URL}?transportMode={transportMode}&origin={start.Latitude},{start.Longitude}&destination={end.Latitude},{end.Longitude}&return=polyline&apiKey={_hereApiKey}";\n\n                var response = await _httpClient.GetAsync(url);\n                if (!response.IsSuccessStatusCode)\n                    return new List<LocationModel>();\n\n                var content = await response.Content.ReadAsStringAsync();\n                var hereResponse = JsonSerializer.Deserialize<HereMapsResponse>(content, new JsonSerializerOptions\n                {\n                    PropertyNameCaseInsensitive = true\n                });\n\n                if (hereResponse?.Routes == null || hereResponse.Routes.Length == 0)\n                    return new List<LocationModel>();\n\n                var route = new List<LocationModel>();\n                var sections = hereResponse.Routes[0]?.Sections;\n                if (sections == null || sections.Length == 0)\n                    return new List<LocationModel>();\n\n                var polyline = sections[0]?.Polyline;\n\n                if (string.IsNullOrEmpty(polyline))\n                    return new List<LocationModel>();\n\n                // HERE Maps polyline'ı decode et\n                var decodedCoords = PolylineDecoder.Decode(polyline);\n                foreach (var coord in decodedCoords)\n                {\n                    route.Add(new LocationModel { Latitude = coord.Lat, Longitude = coord.Lng });\n                }\n\n                return route;\n            }\n            catch\n            {\n                return new List<LocationModel>();\n            }\n        }\n    }\n\n    // API Response modelleri\n    public class GoogleMapsResponse\n    {\n        public string? Status { get; set; }\n        public GoogleRoute[]? Routes { get; set; }\n    }\n\n    public class GoogleRoute\n    {\n        public GooglePolyline? OverviewPolyline { get; set; }\n    }\n\n    public class GooglePolyline\n    {\n        public string? Points { get; set; }\n    }\n\n    public class MapboxResponse\n    {\n        public MapboxRoute[]? Routes { get; set; }\n    }\n\n    public class MapboxRoute\n    {\n        public MapboxGeometry? Geometry { get; set; }\n    }\n\n    public class MapboxGeometry\n    {\n        public double[][]? Coordinates { get; set; }\n    }\n\n    // HERE Maps API Response modelleri\n    public class HereMapsResponse\n    {\n        public HereRoute[]? Routes { get; set; }\n    }\n\n    public class HereRoute\n    {\n        public HereSection[]? Sections { get; set; }\n    }\n\n    public class HereSection\n    {\n        public string? Polyline { get; set; }\n    }\n}\n