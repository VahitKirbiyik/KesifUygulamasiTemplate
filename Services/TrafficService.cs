using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing Microsoft.Maui.Devices.Sensors;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class TrafficService : ITrafficService\n    {\n        private readonly HttpClient _httpClient;\n\n        public TrafficService(HttpClient httpClient)\n        {\n            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));\n        }\n\n        public async Task<TrafficInfo> GetTrafficInfoAsync(double latitude, double longitude, double radius = 5.0)\n        {\n            return await Task.FromResult(new TrafficInfo\n            {\n                Location = new LocationModel { Latitude = latitude, Longitude = longitude },\n                TrafficLevel = TrafficLevel.Normal,\n                TravelTimeMinutes = 10,\n                NormalTimeMinutes = 8,\n                IsDataAvailable = true,\n                Message = "Trafik normal",\n                Timestamp = DateTime.Now\n            });\n        }\n\n        public async Task<List<TrafficIncident>> GetTrafficIncidentsAsync(double north, double south, double east, double west)\n        {\n            return await Task.FromResult(new List<TrafficIncident>());\n        }\n\n        public async Task<bool> IsTrafficAvailableAsync()\n        {\n            return await Task.FromResult(true);\n        }\n\n                public async Task<Route> GetOptimizedRouteWithTrafficAsync(Location start, Location end, TransportMode mode, RouteOptimizationPreference preference)\n        {\n            return await Task.FromResult(new Route\n            {\n                Start = start,\n                End = end,\n                Points = new List<Location> { start, end },\n                DistanceKm = 5.0,\n                Duration = TimeSpan.FromMinutes(10),\n                DurationInTraffic = TimeSpan.FromMinutes(12),\n                TrafficLevel = TrafficLevel.Moderate,\n                Warnings = new List<TrafficWarning>(),\n                TransportMode = mode\n            });\n        }\n\n        public async Task<TrafficDelayInfo> CalculateRouteDelaysAsync(List<LocationModel> routePoints)\n        {\n            if (routePoints == null || routePoints.Count < 2)\n            {\n                return await Task.FromResult(new TrafficDelayInfo\n                {\n                    TotalDelayMinutes = 0,\n                    DelaySegments = new List<TrafficDelaySegment>(),\n                    AverageTrafficDensity = 0\n                });\n            }\n\n            var segments = new List<TrafficDelaySegment>();\n            double totalDelay = 0;\n\n            for (int i = 0; i < routePoints.Count - 1; i++)\n            {\n                var from = routePoints[i];\n                var to = routePoints[i + 1];\n\n                // Basit gecikme hesaplama\n                var delay = 2.0; // 2 dakika gecikme varsayalım\n                totalDelay += delay;\n\n                segments.Add(new TrafficDelaySegment\n                {\n                    FromPoint = from,\n                    ToPoint = to,\n                    DelayMinutes = delay,\n                    DistanceKm = 1.0 // Basit mesafe\n                });\n            }\n\n            return await Task.FromResult(new TrafficDelayInfo\n            {\n                TotalDelayMinutes = totalDelay,\n                DelaySegments = segments,\n                AverageTrafficDensity = segments.Any() ? totalDelay / segments.Count : 0\n            });\n        }\n\n        public async Task<List<TrafficWarning>> GetTrafficWarningsAsync(List<LocationModel> routePoints)\n        {\n            var warnings = new List<TrafficWarning>();\n\n            if (routePoints == null || routePoints.Count < 2)\n                return await Task.FromResult(warnings);\n\n            // Basit uyarı oluşturma\n            warnings.Add(new TrafficWarning\n            {\n                Type = TrafficWarningType.ModerateTraffic,\n                Message = "Yol üzerinde orta trafik yoğunluğu",\n                Severity = TrafficWarningSeverity.Medium\n            });\n\n            return await Task.FromResult(warnings);\n        }\n    }\n\n    // Google Distance Matrix API Response Models\n    public class GoogleDistanceMatrixResponse\n    {\n        public string? Status { get; set; }\n        public List<DistanceMatrixRow>? Rows { get; set; }\n    }\n\n    public class DistanceMatrixRow\n    {\n        public List<DistanceMatrixElement>? Elements { get; set; }\n    }\n\n    public class DistanceMatrixElement\n    {\n        public string? Status { get; set; }\n        public DistanceMatrixValue? Duration { get; set; }\n        public DistanceMatrixValue? DurationInTraffic { get; set; }\n        public DistanceMatrixValue? Distance { get; set; }\n    }\n\n    public class DistanceMatrixValue\n    {\n        public string? Text { get; set; }\n        public long Value { get; set; }\n    }\n}\n