using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;
using KesifUygulamasiTemplate.Models;
using KesifUygulamasiTemplate.Services.Interfaces;
using Microsoft.Maui.Devices.Sensors;

namespace KesifUygulamasiTemplate.Services
{
    public class TrafficService : ITrafficService
    {
        private readonly HttpClient _httpClient;

        public TrafficService(HttpClient httpClient)
        {
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
        }

        public async Task<TrafficInfo> GetTrafficInfoAsync(double latitude, double longitude, double radius = 5.0)
        {
            return await Task.FromResult(new TrafficInfo
            {
                Location = new LocationModel { Latitude = latitude, Longitude = longitude },
                TrafficLevel = TrafficLevel.Normal,
                TravelTimeMinutes = 10,
                NormalTimeMinutes = 8,
                IsDataAvailable = true,
                Message = "Trafik normal",
                Timestamp = DateTime.Now
            });
        }

        public async Task<List<TrafficIncident>> GetTrafficIncidentsAsync(double north, double south, double east, double west)
        {
            return await Task.FromResult(new List<TrafficIncident>());
        }

        public async Task<bool> IsTrafficAvailableAsync()
        {
            return await Task.FromResult(true);
        }

                public async Task<Route> GetOptimizedRouteWithTrafficAsync(Location start, Location end, TransportMode mode, RouteOptimizationPreference preference)
        {
            return await Task.FromResult(new Route
            {
                Start = start,
                End = end,
                Points = new List<Location> { start, end },
                DistanceKm = 5.0,
                Duration = TimeSpan.FromMinutes(10),
                DurationInTraffic = TimeSpan.FromMinutes(12),
                TrafficLevel = TrafficLevel.Moderate,
                Warnings = new List<TrafficWarning>(),
                TransportMode = mode
            });
        }

        public async Task<TrafficDelayInfo> CalculateRouteDelaysAsync(List<LocationModel> routePoints)
        {
            if (routePoints == null || routePoints.Count < 2)
            {
                return await Task.FromResult(new TrafficDelayInfo
                {
                    TotalDelayMinutes = 0,
                    DelaySegments = new List<TrafficDelaySegment>(),
                    AverageTrafficDensity = 0
                });
            }

            var segments = new List<TrafficDelaySegment>();
            double totalDelay = 0;

            for (int i = 0; i < routePoints.Count - 1; i++)
            {
                var from = routePoints[i];
                var to = routePoints[i + 1];

                // Basit gecikme hesaplama
                var delay = 2.0; // 2 dakika gecikme varsayalım
                totalDelay += delay;

                segments.Add(new TrafficDelaySegment
                {
                    FromPoint = from,
                    ToPoint = to,
                    DelayMinutes = delay,
                    DistanceKm = 1.0 // Basit mesafe
                });
            }

            return await Task.FromResult(new TrafficDelayInfo
            {
                TotalDelayMinutes = totalDelay,
                DelaySegments = segments,
                AverageTrafficDensity = segments.Any() ? totalDelay / segments.Count : 0
            });
        }

        public async Task<List<TrafficWarning>> GetTrafficWarningsAsync(List<LocationModel> routePoints)
        {
            var warnings = new List<TrafficWarning>();

            if (routePoints == null || routePoints.Count < 2)
                return await Task.FromResult(warnings);

            // Basit uyarı oluşturma
            warnings.Add(new TrafficWarning
            {
                Type = TrafficWarningType.ModerateTraffic,
                Message = "Yol üzerinde orta trafik yoğunluğu",
                Severity = TrafficWarningSeverity.Medium
            });

            return await Task.FromResult(warnings);
        }
    }

    // Google Distance Matrix API Response Models
    public class GoogleDistanceMatrixResponse
    {
        public string? Status { get; set; }
        public List<DistanceMatrixRow>? Rows { get; set; }
    }

    public class DistanceMatrixRow
    {
        public List<DistanceMatrixElement>? Elements { get; set; }
    }

    public class DistanceMatrixElement
    {
        public string? Status { get; set; }
        public DistanceMatrixValue? Duration { get; set; }
        public DistanceMatrixValue? DurationInTraffic { get; set; }
        public DistanceMatrixValue? Distance { get; set; }
    }

    public class DistanceMatrixValue
    {
        public string? Text { get; set; }
        public long Value { get; set; }
    }
}
