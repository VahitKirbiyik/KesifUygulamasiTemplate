using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Offline harita tile yönetim servisi - CI/CD pipeline ile entegre\n    /// </summary>\n    public class OfflineTileManager : IOfflineTileManager\n    {\n        private readonly ILogger<OfflineTileManager> _logger;\n        private readonly IBadgeService _badgeService;\n        private readonly HttpClient _httpClient;\n        private readonly string _tileCachePath;\n\n        // CI/CD için environment variable desteği\n        private readonly string _mapApiKey = Environment.GetEnvironmentVariable("MAP_API_KEY") ?? "YOUR_MAP_API_KEY";\n        private readonly long _maxCacheSize = long.Parse(Environment.GetEnvironmentVariable("MAX_TILE_CACHE_SIZE") ?? "1073741824"); // 1GB default\n\n        public event EventHandler<TileDownloadProgress> DownloadProgressChanged;\n        public event EventHandler<string> TileDownloaded;\n\n        public OfflineTileManager(ILogger<OfflineTileManager> logger, IBadgeService badgeService)\n        {\n            _logger = logger;\n            _badgeService = badgeService;\n            _httpClient = new HttpClient();\n            _tileCachePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "TileCache");\n\n            // Cache klasörünü oluştur\n            Directory.CreateDirectory(_tileCachePath);\n        }\n\n        /// <summary>\n        /// Belirtilen bölge için tile'ları indirir - CI/CD testlerinde mock kullanılır\n        /// </summary>\n        public async Task DownloadTilesForRegionAsync(MapRegion region, int zoomLevel, Action<TileDownloadProgress> progressCallback = null)\n        {\n            try\n            {\n                _logger.LogInformation($"Bölge için tile indirme başlatıldı: {region.Name}, Zoom: {zoomLevel}");\n\n                // CI/CD ortamında test modunda çalıştır\n                var isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                       Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n                if (isTestEnvironment)\n                {\n                    _logger.LogInformation("Test ortamı tespit edildi, mock tile indirme simülasyonu");\n                    await SimulateTileDownloadAsync(region, zoomLevel, progressCallback);\n                    _badgeService?.AwardBadge("Offline-Ready");\n                    return;\n                }\n\n                var tiles = GenerateTileList(region, zoomLevel);\n                var totalTiles = tiles.Count;\n                var downloadedTiles = 0;\n\n                foreach (var tile in tiles)\n                {\n                    if (await DownloadTileAsync(tile))\n                    {\n                        downloadedTiles++;\n                        var progress = new TileDownloadProgress\n                        {\n                            DownloadedTiles = downloadedTiles,\n                            TotalTiles = totalTiles,\n                            CurrentTile = tile,\n                            Percentage = (double)downloadedTiles / totalTiles * 100\n                        };\n\n                        progressCallback?.Invoke(progress);\n                        DownloadProgressChanged?.Invoke(this, progress);\n                    }\n\n                    // Rate limiting\n                    await Task.Delay(100);\n                }\n\n                _logger.LogInformation($"{downloadedTiles}/{totalTiles} tile başarıyla indirildi");\n                _badgeService?.AwardBadge("Offline-Ready");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Tile indirme hatası");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Tek bir tile'ı indirir\n        /// </summary>\n        private async Task<bool> DownloadTileAsync(TileInfo tile)\n        {\n            try\n            {\n                var tilePath = GetTilePath(tile);\n                if (File.Exists(tilePath))\n                {\n                    return true; // Zaten var\n                }\n\n                var tileUrl = BuildTileUrl(tile);\n                var response = await _httpClient.GetAsync(tileUrl);\n\n                if (response.IsSuccessStatusCode)\n                {\n                    var tileData = await response.Content.ReadAsByteArrayAsync();\n                    await File.WriteAllBytesAsync(tilePath, tileData);\n\n                    TileDownloaded?.Invoke(this, tilePath);\n                    return true;\n                }\n                else\n                {\n                    _logger.LogWarning($"Tile indirme başarısız: {tileUrl}, Status: {response.StatusCode}");\n                    return false;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Tile indirme hatası: {tile.X},{tile.Y},{tile.Z}");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Cache boyutunu kontrol eder ve gerekirse temizler\n        /// </summary>\n        public async Task CleanCacheAsync()\n        {\n            try\n            {\n                _logger.LogInformation("Cache temizleme başlatıldı");\n\n                var cacheSize = await GetCacheSizeAsync();\n                if (cacheSize > _maxCacheSize)\n                {\n                    var files = Directory.GetFiles(_tileCachePath, "*", SearchOption.AllDirectories)\n                        .OrderBy(f => File.GetLastAccessTime(f))\n                        .ToList();\n\n                    long freedSpace = 0;\n                    foreach (var file in files)\n                    {\n                        if (cacheSize - freedSpace <= _maxCacheSize * 0.8) // %80'e kadar temizle\n                            break;\n\n                        var fileSize = new FileInfo(file).Length;\n                        File.Delete(file);\n                        freedSpace += fileSize;\n\n                        _logger.LogInformation($"Eski tile silindi: {file}");\n                    }\n\n                    _logger.LogInformation($"{freedSpace} byte cache temizlendi");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Cache temizleme hatası");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Cache boyutunu hesaplar\n        /// </summary>\n        private async Task<long> GetCacheSizeAsync()\n        {\n            try\n            {\n                var files = Directory.GetFiles(_tileCachePath, "*", SearchOption.AllDirectories);\n                long totalSize = 0;\n\n                foreach (var file in files)\n                {\n                    totalSize += new FileInfo(file).Length;\n                }\n\n                return totalSize;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Cache boyutu hesaplama hatası");\n                return 0;\n            }\n        }\n\n        /// <summary>\n        /// Belirtilen tile'ın önbellekte olup olmadığını kontrol eder\n        /// </summary>\n        public bool IsTileCached(int x, int y, int z)\n        {\n            var tilePath = GetTilePath(new TileInfo { X = x, Y = y, Z = z });\n            return File.Exists(tilePath);\n        }\n\n        /// <summary>\n        /// Önbellekten tile verisini alır\n        /// </summary>\n        public async Task<byte[]> GetCachedTileAsync(int x, int y, int z)\n        {\n            try\n            {\n                var tilePath = GetTilePath(new TileInfo { X = x, Y = y, Z = z });\n                if (File.Exists(tilePath))\n                {\n                    return await File.ReadAllBytesAsync(tilePath);\n                }\n                return null;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Cache'den tile okuma hatası: {x},{y},{z}");\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Bölge için tile listesi oluşturur\n        /// </summary>\n        private List<TileInfo> GenerateTileList(MapRegion region, int zoomLevel)\n        {\n            var tiles = new List<TileInfo>();\n\n            // Bölge sınırlarını tile koordinatlarına çevir\n            var topLeft = LatLngToTile(region.TopLeft.Latitude, region.TopLeft.Longitude, zoomLevel);\n            var bottomRight = LatLngToTile(region.BottomRight.Latitude, region.BottomRight.Longitude, zoomLevel);\n\n            for (int x = topLeft.X; x <= bottomRight.X; x++)\n            {\n                for (int y = topLeft.Y; y <= bottomRight.Y; y++)\n                {\n                    tiles.Add(new TileInfo { X = x, Y = y, Z = zoomLevel });\n                }\n            }\n\n            return tiles;\n        }\n\n        /// <summary>\n        /// Tile URL'sini oluşturur\n        /// </summary>\n        private string BuildTileUrl(TileInfo tile)\n        {\n            // Google Maps tile URL formatı\n            return $"https://mt0.google.com/vt/lyrs=m&x={tile.X}&y={tile.Y}&z={tile.Z}&key={_mapApiKey}";\n        }\n\n        /// <summary>\n        /// Tile dosya yolunu oluşturur\n        /// </summary>\n        private string GetTilePath(TileInfo tile)\n        {\n            var zoomDir = Path.Combine(_tileCachePath, tile.Z.ToString());\n            var xDir = Path.Combine(zoomDir, tile.X.ToString());\n            Directory.CreateDirectory(xDir);\n            return Path.Combine(xDir, $"{tile.Y}.png");\n        }\n\n        /// <summary>\n        /// Enlem/boylam'ı tile koordinatlarına çevirir\n        /// </summary>\n        private TileInfo LatLngToTile(double lat, double lng, int zoom)\n        {\n            var x = (int)Math.Floor((lng + 180.0) / 360.0 * (1 << zoom));\n            var y = (int)Math.Floor((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) + 1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom));\n            return new TileInfo { X = x, Y = y, Z = zoom };\n        }\n\n        /// <summary>\n        /// Test ortamı için tile indirme simülasyonu\n        /// </summary>\n        private async Task SimulateTileDownloadAsync(MapRegion region, int zoomLevel, Action<TileDownloadProgress> progressCallback)\n        {\n            var tiles = GenerateTileList(region, zoomLevel);\n            var totalTiles = tiles.Count;\n            var downloadedTiles = 0;\n\n            foreach (var tile in tiles)\n            {\n                downloadedTiles++;\n                var progress = new TileDownloadProgress\n                {\n                    DownloadedTiles = downloadedTiles,\n                    TotalTiles = totalTiles,\n                    CurrentTile = tile,\n                    Percentage = (double)downloadedTiles / totalTiles * 100\n                };\n\n                progressCallback?.Invoke(progress);\n                DownloadProgressChanged?.Invoke(this, progress);\n\n                // Simülasyon için kısa bekleme\n                await Task.Delay(10);\n            }\n        }\n    }\n\n    /// <summary>\n    /// Tile bilgi sınıfı\n    /// </summary>\n    public class TileInfo\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n        public int Z { get; set; }\n    }\n\n    /// <summary>\n    /// Tile indirme ilerleme sınıfı\n    /// </summary>\n    public class TileDownloadProgress\n    {\n        public int DownloadedTiles { get; set; }\n        public int TotalTiles { get; set; }\n        public TileInfo CurrentTile { get; set; }\n        public double Percentage { get; set; }\n    }\n}\n