using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Controls;\nusing KesifUygulamasiTemplate.Helpers;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class NavigationService\n    {\n        private readonly IGlobalExceptionHandler _exceptionHandler;\n        private INavigation Navigation => Application.Current?.MainPage?.Navigation;\n\n        public NavigationService(IGlobalExceptionHandler exceptionHandler)\n        {\n            _exceptionHandler = exceptionHandler ?? throw new ArgumentNullException(nameof(exceptionHandler));\n        }\n\n        public async Task PushAsync(Page page, bool animated = true)\n        {\n            if (Navigation != null && page != null)\n            {\n                try\n                {\n                    await Navigation.PushAsync(page, animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError("Sayfa açılırken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task PopAsync(bool animated = true)\n        {\n            if (Navigation != null && Navigation.NavigationStack.Count > 1)\n            {\n                try\n                {\n                    await Navigation.PopAsync(animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError("Sayfadan çıkılırken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task PushModalAsync(Page page, bool animated = true)\n        {\n            if (Navigation != null && page != null)\n            {\n                try\n                {\n                    await Navigation.PushModalAsync(page, animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError("Modal sayfa açılırken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task PopModalAsync(bool animated = true)\n        {\n            if (Navigation != null && Navigation.ModalStack.Count > 0)\n            {\n                try\n                {\n                    await Navigation.PopModalAsync(animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError("Modal sayfadan çıkılırken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task PopToRootAsync(bool animated = true)\n        {\n            if (Navigation != null && Navigation.NavigationStack.Count > 1)\n            {\n                try\n                {\n                    await Navigation.PopToRootAsync(animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError("Ana sayfaya dönülürken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task GoToAsync(string route, bool animated = true)\n        {\n            if (!string.IsNullOrWhiteSpace(route))\n            {\n                try\n                {\n                    await Shell.Current.GoToAsync(route, animated);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError($"'{route}' rotasına gidilirken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public async Task GoToAsync(string route, IDictionary<string, object> parameters, bool animated = true)\n        {\n            if (!string.IsNullOrWhiteSpace(route))\n            {\n                try\n                {\n                    await Shell.Current.GoToAsync(route, animated, parameters);\n                }\n                catch (Exception ex)\n                {\n                    _exceptionHandler.HandleException(ex);\n                    _exceptionHandler.LogUserFriendlyError($"'{route}' rotasına parametrelerle gidilirken bir hata oluştu", ex);\n                }\n            }\n        }\n\n        public int NavigationStackCount => Navigation?.NavigationStack?.Count ?? 0;\n        public int ModalStackCount => Navigation?.ModalStack?.Count ?? 0;\n        public bool CanGoBack => NavigationStackCount > 1;\n    }\n}\n