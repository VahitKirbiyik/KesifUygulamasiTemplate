using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing Microsoft.Maui.Networking;\nusing SQLite;\nusing Microsoft.Extensions.Configuration; // IConfiguration için gerekli\n\nnamespace KesifUygulamasiTemplate.Models\n{\n    [Table("SearchHistory")]\n    public class SearchHistoryItem\n    {\n        [PrimaryKey, AutoIncrement]\n        public int Id { get; set; }\n\n        public string Query { get; set; } = "";\n\n        public int SearchCount { get; set; } = 1;\n\n        public DateTime LastSearchedAt { get; set; } = DateTime.UtcNow;\n\n        public double? Latitude { get; set; }\n\n        public double? Longitude { get; set; }\n    }\n\n    public class SearchResult\n    {\n        public string Id { get; set; } = "";\n        public string Name { get; set; } = "";\n        public string Description { get; set; } = "";\n        public string Category { get; set; } = "";\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n        public string Address { get; set; }\n        public double? DistanceKm { get; set; }\n        public string Icon { get; set; }\n    }\n}\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public interface ISearchService\n    {\n        Task<IEnumerable<SearchResult>> SearchPlacesAsync(string query, double? latitude = null, double? longitude = null);\n        Task<IEnumerable<SearchHistoryItem>> GetSearchHistoryAsync(int limit = 10);\n        Task<IEnumerable<string>> GetSuggestionsAsync(string partialQuery, int limit = 5);\n        Task AddToSearchHistoryAsync(string query, double? latitude = null, double? longitude = null);\n        Task ClearSearchHistoryAsync();\n    }\n\n    public class SearchService : ISearchService\n    {\n        private readonly SQLiteAsyncConnection _database;\n        private readonly IConnectivity _connectivity;\n        private readonly HttpClient _httpClient;\n        private readonly string _apiKey;\n        private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);\n        private readonly IFavoritePlacesService _favoritePlacesService;\n\n        private const int MAX_HISTORY_ITEMS = 100;\n\n        public SearchService(SQLiteAsyncConnection database, IConnectivity connectivity,\n                            HttpClient httpClient, IConfiguration config,\n                            IFavoritePlacesService favoritePlacesService, ConfigurationService configurationService)\n        {\n            _database = database;\n            _connectivity = connectivity;\n            _httpClient = httpClient;\n            _apiKey = configurationService.GoogleMapsApiKey;\n            _favoritePlacesService = favoritePlacesService;\n\n            // Veritaban� tablosunu olu�tur\n            _database.CreateTableAsync<SearchHistoryItem>().Wait();\n        }\n\n        public async Task<IEnumerable<SearchResult>> SearchPlacesAsync(string query, double? latitude = null, double? longitude = null)\n        {\n            if (string.IsNullOrWhiteSpace(query))\n                return Enumerable.Empty<SearchResult>();\n\n            var results = new List<SearchResult>();\n\n            // �nce aramay� ge�mi�e ekle\n            await AddToSearchHistoryAsync(query, latitude, longitude);\n\n            // 1. Favori yerlerden ara\n            try\n            {\n                var favoriteResults = await SearchInFavoritesAsync(query, latitude, longitude);\n                results.AddRange(favoriteResults);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Favorilerde arama hatas�: {ex.Message}");\n            }\n\n            // 2. �evrimi�i API ile ara (internet varsa)\n            if (_connectivity.NetworkAccess == NetworkAccess.Internet)\n            {\n                try\n                {\n                    var onlineResults = await SearchOnlineAsync(query, latitude, longitude);\n\n                    // Favorilerde olmayan sonu�lar� ekle\n                    foreach (var result in onlineResults)\n                    {\n                        if (!results.Any(r =>\n                            r.Latitude == result.Latitude &&\n                            r.Longitude == result.Longitude &&\n                            r.Name == result.Name))\n                        {\n                            results.Add(result);\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($"�evrimi�i arama hatas�: {ex.Message}");\n                }\n            }\n            else\n            {\n                // 3. �evrimd��� arama (internet yoksa)\n                try\n                {\n                    var offlineResults = await SearchOfflineAsync(query, latitude, longitude);\n\n                    foreach (var result in offlineResults)\n                    {\n                        if (!results.Any(r => r.Id == result.Id))\n                        {\n                            results.Add(result);\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($"�evrimd��� arama hatas�: {ex.Message}");\n                }\n            }\n\n            // Sonu�lar� mesafeye g�re s�rala (konum bilgisi varsa)\n            if (latitude.HasValue && longitude.HasValue)\n            {\n                results = results\n                    .OrderBy(r => r.DistanceKm ?? double.MaxValue)\n                    .ToList();\n            }\n            else\n            {\n                // Konum yoksa isme g�re s�rala\n                results = results\n                    .OrderBy(r => r.Name)\n                    .ToList();\n            }\n\n            return results;\n        }\n\n        public async Task<IEnumerable<SearchHistoryItem>> GetSearchHistoryAsync(int limit = 10)\n        {\n            try\n            {\n                return await _database.Table<SearchHistoryItem>()\n                    .OrderByDescending(h => h.LastSearchedAt)\n                    .Take(limit)\n                    .ToListAsync();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Arama ge�mi�ini getirme hatas�: {ex.Message}");\n                return Enumerable.Empty<SearchHistoryItem>();\n            }\n        }\n\n        public async Task<IEnumerable<string>> GetSuggestionsAsync(string partialQuery, int limit = 5)\n        {\n            if (string.IsNullOrWhiteSpace(partialQuery) || partialQuery.Length < 2)\n                return Enumerable.Empty<string>();\n\n            try\n            {\n                var lowercaseQuery = partialQuery.ToLowerInvariant();\n\n                // Ge�mi� aramalardan �neriler\n                var historyItems = await _database.Table<SearchHistoryItem>()\n                    .ToListAsync();\n\n                var suggestions = historyItems\n                    .Where(h => h.Query.ToLowerInvariant().Contains(lowercaseQuery))\n                    .OrderByDescending(h => h.SearchCount)\n                    .ThenByDescending(h => h.LastSearchedAt)\n                    .Take(limit)\n                    .Select(h => h.Query)\n                    .ToList();\n\n                // Yeteri kadar �neri yoksa, favori yerlerden tamamla\n                if (suggestions.Count < limit)\n                {\n                    try\n                    {\n                        var favorites = await _favoritePlacesService.GetAllFavoritePlacesAsync();\n                        var favoriteNames = favorites\n                            .Where(f => f.Name.ToLowerInvariant().Contains(lowercaseQuery))\n                            .OrderBy(f => f.Name)\n                            .Take(limit - suggestions.Count)\n                            .Select(f => f.Name);\n\n                        suggestions.AddRange(favoriteNames.Where(n => !suggestions.Contains(n)));\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($"Favori yerlerden �neri getirme hatas�: {ex.Message}");\n                    }\n                }\n\n                return suggestions.Take(limit);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"�neri getirme hatas�: {ex.Message}");\n                return Enumerable.Empty<string>();\n            }\n        }\n\n        public async Task AddToSearchHistoryAsync(string query, double? latitude = null, double? longitude = null)\n        {\n            if (string.IsNullOrWhiteSpace(query))\n                return;\n\n            await _semaphore.WaitAsync();\n            try\n            {\n                // Ayn� sorgu varsa g�ncelle\n                var existingItem = await _database.Table<SearchHistoryItem>()\n                    .Where(h => h.Query.ToLower() == query.ToLower())\n                    .FirstOrDefaultAsync();\n\n                if (existingItem != null)\n                {\n                    existingItem.SearchCount++;\n                    existingItem.LastSearchedAt = DateTime.UtcNow;\n\n                    if (latitude.HasValue && longitude.HasValue)\n                    {\n                        existingItem.Latitude = latitude;\n                        existingItem.Longitude = longitude;\n                    }\n\n                    await _database.UpdateAsync(existingItem);\n                }\n                else\n                {\n                    // Yeni arama kayd� ekle\n                    await _database.InsertAsync(new SearchHistoryItem\n                    {\n                        Query = query,\n                        SearchCount = 1,\n                        LastSearchedAt = DateTime.UtcNow,\n                        Latitude = latitude,\n                        Longitude = longitude\n                    });\n\n                    // Maksimum kay�t say�s�n� a�m��sa, en eski kay�tlar� sil\n                    var count = await _database.Table<SearchHistoryItem>().CountAsync();\n                    if (count > MAX_HISTORY_ITEMS)\n                    {\n                        var oldestItems = await _database.Table<SearchHistoryItem>()\n                            .OrderBy(h => h.LastSearchedAt)\n                            .Take(count - MAX_HISTORY_ITEMS)\n                            .ToListAsync();\n\n                        foreach (var item in oldestItems)\n                        {\n                            await _database.DeleteAsync(item);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Arama ge�mi�ine ekleme hatas�: {ex.Message}");\n            }\n            finally\n            {\n                _semaphore.Release();\n            }\n        }\n\n        public async Task ClearSearchHistoryAsync()\n        {\n            await _semaphore.WaitAsync();\n            try\n            {\n                await _database.DeleteAllAsync<SearchHistoryItem>();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Arama ge�mi�ini temizleme hatas�: {ex.Message}");\n            }\n            finally\n            {\n                _semaphore.Release();\n            }\n        }\n\n        // Yard�mc� metotlar\n        private async Task<IEnumerable<SearchResult>> SearchInFavoritesAsync(string query, double? latitude, double? longitude)\n        {\n            var favorites = await _favoritePlacesService.GetAllFavoritePlacesAsync();\n\n            // �sim, a��klama veya adres i�inde arama\n            var matchingFavorites = favorites\n                .Where(f =>\n                    f.Name.ToLowerInvariant().Contains(query.ToLowerInvariant()) ||\n                    (f.Description != null && f.Description.ToLowerInvariant().Contains(query.ToLowerInvariant())) ||\n                    (f.Address != null && f.Address.ToLowerInvariant().Contains(query.ToLowerInvariant())))\n                .ToList();\n\n            var results = new List<SearchResult>();\n\n            foreach (var favorite in matchingFavorites)\n            {\n                var result = new SearchResult\n                {\n                    Id = $"favorite_{favorite.Id}",\n                    Name = favorite.Name,\n                    Description = favorite.Description,\n                    Category = favorite.Category,\n                    Latitude = favorite.Latitude,\n                    Longitude = favorite.Longitude,\n                    Address = favorite.Address,\n                    Icon = favorite.IconName\n                };\n\n                // Mesafe hesapla (e�er konum bilgisi varsa)\n                if (latitude.HasValue && longitude.HasValue)\n                {\n                    result.DistanceKm = CalculateDistance(\n                        latitude.Value, longitude.Value,\n                        favorite.Latitude, favorite.Longitude);\n                }\n\n                results.Add(result);\n            }\n\n            return results;\n        }\n\n        private async Task<IEnumerable<SearchResult>> SearchOnlineAsync(string query, double? latitude, double? longitude)\n        {\n            // Ger�ek uygulamada Google Places API, Bing Places API, vb. kullan�labilir\n            // Burada Google Places API kullanan bir �rnek\n\n            try\n            {\n                string url;\n                if (latitude.HasValue && longitude.HasValue)\n                {\n                    // Konuma g�re arama\n                    url = $"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={latitude},{longitude}&radius=5000&keyword={Uri.EscapeDataString(query)}&key={_apiKey}";\n                }\n                else\n                {\n                    // Metin aramas�\n                    url = $"https://maps.googleapis.com/maps/api/place/textsearch/json?query={Uri.EscapeDataString(query)}&key={_apiKey}";\n                }\n\n                var response = await _httpClient.GetAsync(url);\n\n                if (response.IsSuccessStatusCode)\n                {\n                    var placesResponse = await response.Content.ReadFromJsonAsync<GooglePlacesResponse>();\n\n                    if (placesResponse?.Status == "OK" && placesResponse.Results != null)\n                    {\n                        var results = new List<SearchResult>();\n\n                        foreach (var place in placesResponse.Results)\n                        {\n                            var result = new SearchResult\n                            {\n                                Id = $"google_{place.PlaceId}",\n                                Name = place.Name,\n                                Description = place.Vicinity,\n                                Category = place.Types?.FirstOrDefault() ?? "place",\n                                Latitude = place.Geometry.Location.Lat,\n                                Longitude = place.Geometry.Location.Lng,\n                                Address = place.Vicinity,\n                                Icon = place.Icon\n                            };\n\n                            // Mesafe hesapla (e�er konum bilgisi varsa)\n                            if (latitude.HasValue && longitude.HasValue)\n                            {\n                                result.DistanceKm = CalculateDistance(\n                                    latitude.Value, longitude.Value,\n                                    result.Latitude, result.Longitude);\n                            }\n\n                            results.Add(result);\n                        }\n\n                        return results;\n                    }\n                }\n\n                return Enumerable.Empty<SearchResult>();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Online arama hatas�: {ex.Message}");\n\n                // API sim�lasyonu - ger�ek uygulamada kald�r�lmal�\n                await Task.Delay(500);\n                return SimulateSearchResults(query, latitude, longitude);\n            }\n        }\n\n        private async Task<IEnumerable<SearchResult>> SearchOfflineAsync(string query, double? latitude, double? longitude)\n        {\n            // �evrimd��� oldu�umuzda sadece favori yerlerimiz ve daha �nce arad���m�z yerler var\n\n            // Arama ge�mi�inden koordinatlar� olan sonu�lar� getir\n            var historyResults = new List<SearchResult>();\n\n            try\n            {\n                var historyItems = await _database.Table<SearchHistoryItem>()\n                    .Where(h => h.Latitude != null && h.Longitude != null)\n                    .ToListAsync();\n\n                var matchingHistory = historyItems\n                    .Where(h => h.Query.ToLowerInvariant().Contains(query.ToLowerInvariant()))\n                    .OrderByDescending(h => h.LastSearchedAt)\n                    .Take(10)\n                    .ToList();\n\n                foreach (var item in matchingHistory)\n                {\n                    var result = new SearchResult\n                    {\n                        Id = $"history_{item.Id}",\n                        Name = item.Query,\n                        Latitude = item.Latitude.Value,\n                        Longitude = item.Longitude.Value,\n                        Category = "history",\n                        Icon = "history"\n                    };\n\n                    // Mesafe hesapla (e�er konum bilgisi varsa)\n                    if (latitude.HasValue && longitude.HasValue)\n                    {\n                        result.DistanceKm = CalculateDistance(\n                            latitude.Value, longitude.Value,\n                            result.Latitude, result.Longitude);\n                    }\n\n                    historyResults.Add(result);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Arama ge�mi�inden arama hatas�: {ex.Message}");\n            }\n\n            // Favori yerlerden sonu�lar� ekle\n            var favoriteResults = await SearchInFavoritesAsync(query, latitude, longitude);\n\n            return historyResults.Concat(favoriteResults);\n        }\n\n        private List<SearchResult> SimulateSearchResults(string query, double? latitude, double? longitude)\n        {\n            // Ger�ek API olmad���nda test i�in sim�le edilmi� sonu�lar\n            var rand = new Random();\n            var results = new List<SearchResult>();\n\n            if (!latitude.HasValue || !longitude.HasValue)\n            {\n                // Konum yoksa basit sonu�lar d�nd�r\n                results.Add(new SearchResult\n                {\n                    Id = $"sim_1",\n                    Name = $"{query} Cafe",\n                    Description = "Sim�le edilmi� cafe",\n                    Category = "cafe",\n                    Latitude = 41.0082,\n                    Longitude = 28.9784,\n                    Address = "�rnek Caddesi No:1",\n                    Icon = "coffee"\n                });\n\n                results.Add(new SearchResult\n                {\n                    Id = $"sim_2",\n                    Name = $"{query} Restaurant",\n                    Description = "Sim�le edilmi� restoran",\n                    Category = "restaurant",\n                    Latitude = 41.0082,\n                    Longitude = 28.9784,\n                    Address = "�rnek Sokak No:2",\n                    Icon = "food"\n                });\n\n                return results;\n            }\n\n            // Konum varsa, o konumun etraf�nda rastgele noktalar olu�tur\n            for (int i = 0; i < 3; i++)\n            {\n                // Rastgele noktalar olu�tur (5 km yar��ap i�inde)\n                double offset = (rand.NextDouble() * 0.05) - 0.025; // ~2.5 km'ye kadar\n                double lat = latitude.Value + offset;\n                double lng = longitude.Value + offset;\n\n                string[] categories = { "cafe", "restaurant", "shop", "hotel", "attraction" };\n                string category = categories[rand.Next(categories.Length)];\n\n                string[] icons = { "coffee", "food", "cart", "bed", "monument" };\n                string icon = icons[rand.Next(icons.Length)];\n\n                var distance = CalculateDistance(latitude.Value, longitude.Value, lat, lng);\n\n                results.Add(new SearchResult\n                {\n                    Id = $"sim_{i}",\n                    Name = $"{query} {category.ToUpperInvariant()} {i + 1}",\n                    Description = $"Sim�le edilmi� {category}",\n                    Category = category,\n                    Latitude = lat,\n                    Longitude = lng,\n                    Address = $"�rnek Mahallesi, {rand.Next(1, 50)}. Sokak No:{rand.Next(1, 100)}",\n                    DistanceKm = distance,\n                    Icon = icon\n                });\n            }\n\n            return results;\n        }\n\n        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)\n        {\n            const double R = 6371; // D�nya yar��ap� (km)\n            var dLat = ToRadians(lat2 - lat1);\n            var dLon = ToRadians(lon2 - lon1);\n\n            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                    Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *\n                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n            return R * c;\n        }\n\n        private double ToRadians(double degrees)\n        {\n            return degrees * Math.PI / 180;\n        }\n    }\n\n    // Google Places API yan�t modelleri\n    public class GooglePlacesResponse\n    {\n        public string Status { get; set; } = "";\n        public List<GooglePlace> Results { get; set; } = new();\n    }\n\n    public class GooglePlace\n    {\n        public string PlaceId { get; set; } = "";\n        public string Name { get; set; } = "";\n        public string Vicinity { get; set; } = "";\n        public string Icon { get; set; } = "";\n        public List<string> Types { get; set; } = new();\n        public GoogleGeometry Geometry { get; set; } = null!;\n    }\n\n    public class GoogleGeometry\n    {\n        public GoogleLocation Location { get; set; } = null!;\n    }\n\n    public class GoogleLocation\n    {\n        public double Lat { get; set; }\n        public double Lng { get; set; }\n    }\n}\n