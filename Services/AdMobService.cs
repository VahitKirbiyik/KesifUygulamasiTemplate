using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Google.MobileAds;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Google AdMob reklam servisi - CI/CD pipeline ile entegre\n    /// </summary>\n    public class AdMobService : IAdService\n    {\n        private readonly ILogger<AdMobService> _logger;\n        private readonly IBadgeService _badgeService;\n        private bool _isInitialized;\n\n        // CI/CD için environment variable desteği\n        private readonly string _adMobAppId = Environment.GetEnvironmentVariable("ADMOB_APP_ID") ?? "ca-app-pub-XXXXXXXXXXXXXXXX~XXXXXXXXXX";\n\n        public AdMobService(ILogger<AdMobService> logger, IBadgeService badgeService)\n        {\n            _logger = logger;\n            _badgeService = badgeService;\n        }\n\n        /// <summary>\n        /// AdMob SDK'sını başlatır - CI/CD testlerinde mock kullanılır\n        /// </summary>\n        public async Task InitializeAsync()\n        {\n            try\n            {\n                _logger.LogInformation("AdMob servisi başlatılıyor...");\n\n                // CI/CD ortamında test modunda çalıştır\n                var isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                       Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n                if (isTestEnvironment)\n                {\n                    _logger.LogInformation("Test ortamı tespit edildi, AdMob test modunda başlatılıyor");\n                    MobileAds.Initialize(initStatus =>\n                    {\n                        _logger.LogInformation("AdMob test modu başarıyla başlatıldı");\n                        _isInitialized = true;\n                        _badgeService?.AwardBadge("AdMob-Integrated");\n                    });\n                }\n                else\n                {\n                    MobileAds.Initialize(initStatus =>\n                    {\n                        _logger.LogInformation("AdMob production modu başarıyla başlatıldı");\n                        _isInitialized = true;\n                        _badgeService?.AwardBadge("AdMob-Integrated");\n                    });\n                }\n\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "AdMob başlatma hatası");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Reklam gösterimi için hazır mı kontrol eder\n        /// </summary>\n        public bool IsReady()\n        {\n            return _isInitialized;\n        }\n\n        /// <summary>\n        /// Banner reklam yükler\n        /// </summary>\n        public async Task LoadBannerAdAsync(string adUnitId)\n        {\n            if (!_isInitialized)\n            {\n                await InitializeAsync();\n            }\n\n            try\n            {\n                // Banner reklam yükleme mantığı\n                _logger.LogInformation($"Banner reklam yükleniyor: {adUnitId}");\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Banner reklam yükleme hatası: {adUnitId}");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// İnterstitial reklam gösterir\n        /// </summary>\n        public async Task ShowInterstitialAdAsync(string adUnitId)\n        {\n            if (!_isInitialized)\n            {\n                await InitializeAsync();\n            }\n\n            try\n            {\n                _logger.LogInformation($"Interstitial reklam gösteriliyor: {adUnitId}");\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Interstitial reklam gösterme hatası: {adUnitId}");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Ödül reklamı yükler\n        /// </summary>\n        public async Task LoadRewardedAdAsync(string adUnitId)\n        {\n            if (!_isInitialized)\n            {\n                await InitializeAsync();\n            }\n\n            try\n            {\n                _logger.LogInformation($"Ödül reklamı yükleniyor: {adUnitId}");\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Ödül reklamı yükleme hatası: {adUnitId}");\n                throw;\n            }\n        }\n    }\n}\n