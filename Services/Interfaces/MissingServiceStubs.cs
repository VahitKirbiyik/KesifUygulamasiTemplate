using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services.Interfaces\n{\n    public interface IRoutingService\n    {\n        Task<DirectionsRoute?> GetRouteAsync(LatLng from, LatLng to);\n        Task<Route> CalculateRouteAsync(Location start, Location end, TransportMode mode = TransportMode.Driving);\n        Task<List<Route>> GetAlternativeRoutesAsync(Location start, Location end, TransportMode mode = TransportMode.Driving);\n        Task<TimeSpan> EstimateTimeAsync(Route route, bool considerTraffic = true);\n    }\n\n    public interface IOfflineRouteService\n    {\n        Task<bool> HasOfflineRouteAsync(string id);\n        Task<string> SaveRouteAsync(Route route);\n        Task<Route> LoadRouteAsync(string routeId);\n        Task<List<Route>> GetAllSavedRoutesAsync();\n    }\n\n    public interface ILocationSharingService\n    {\n        Task ShareLocationAsync(LatLng location, string? message = null);\n    }\n\n    public interface IBarcodeGeneratorService\n    {\n        byte[] GenerateBarcode(string data);\n    }\n\n    public interface INavigationVoiceService\n    {\n        Task SpeakAsync(string text);\n        Task<string[]> GetAvailableLocalesAsync();\n        Task SetPreferredLocaleAsync(string localeIdentifier);\n    }\n\n    public interface ILocationPrivacyService\n    {\n        Task<bool> RequestLocationPermissionWithPrivacyInfoAsync();\n    }\n\n    public interface IFavoritePlacesService\n    {\n        Task AddFavoriteAsync(LocationModel place);\n        Task RemoveFavoriteAsync(string id);\n        Task<IEnumerable<LocationModel>> GetFavoritesAsync();\n        Task<IEnumerable<LocationModel>> GetAllFavoritePlacesAsync();\n    }\n\n    public interface ISearchHistoryService\n    {\n        Task AddSearchAsync(string query);\n        Task<IEnumerable<string>> GetRecentSearchesAsync(int limit = 10);\n    }\n\n    public interface ISecureDataService\n    {\n        void Set(string key, string value);\n        string? Get(string key);\n    }\n\n    public interface ICompassService\n    {\n        event Action<double> HeadingChanged;\n        bool IsMonitoring { get; }\n        bool IsSupported { get; }\n        void Start();\n        void Stop();\n    }\n\n    public interface IEmergencyPointsService\n    {\n        Task<IEnumerable<EmergencyPoint>> GetAllEmergencyPointsAsync(int limit = 100);\n        Task<EmergencyPoint?> GetEmergencyPointByIdAsync(int id);\n        Task<IEnumerable<EmergencyPoint>> GetNearbyEmergencyPointsAsync(double latitude, double longitude, double radiusKm = 5, EmergencyPointType type = EmergencyPointType.All);\n        Task<int> AddEmergencyPointAsync(EmergencyPoint point);\n        Task<bool> UpdateEmergencyPointAsync(EmergencyPoint point);\n        Task<bool> RemoveEmergencyPointAsync(int id);\n        Task<bool> ClearAllEmergencyPointsAsync();\n    }\n\n    public interface IStreetViewService\n    {\n        Task<StreetViewPanorama> GetPanoramaAsync(string location);\n        Task<StreetViewPanorama> GetPanorama(double latitude, double longitude);\n        Task<StreetViewPanorama> GetPanoramaByIdAsync(string panoramaId);\n        Task<string> GetApiKeyAsync();\n    }\n\n    public interface IPreferencesService\n    {\n        void Set<T>(string key, T value);\n        T Get<T>(string key, T defaultValue);\n        bool ContainsKey(string key);\n        void Remove(string key);\n        void Clear();\n    }\n}\n