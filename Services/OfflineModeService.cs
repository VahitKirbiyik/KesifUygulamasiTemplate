using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Networking;\nusing Microsoft.Maui.Storage;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Offline mod yönetimi ve cache optimizasyonu sağlayan servis\n    /// </summary>\n    public class OfflineModeService : INotifyPropertyChanged\n    {\n        private static OfflineModeService? _instance;\n        private readonly ConnectivityService _connectivityService;\n        private readonly DatabaseService _databaseService;\n        private readonly NavigationService _navigationService;\n        private readonly SearchHistoryService _searchHistoryService;\n\n        private bool _isOfflineMode;\n        private bool _isOnlineMode;\n        private string _offlineStatusMessage = string.Empty;\n        private int _cachedItemsCount;\n        private long _cacheSizeBytes;\n\n        // Cache anahtarları\n        private const string OfflineModeKey = "IsOfflineMode";\n        private const string CacheSizeKey = "CacheSize";\n        private const string LastSyncKey = "LastSyncTime";\n\n        public event PropertyChangedEventHandler? PropertyChanged;\n        public event EventHandler<OfflineModeChangedEventArgs>? OfflineModeChanged;\n\n        /// <summary>\n        /// Singleton instance\n        /// </summary>\n        public static OfflineModeService Instance => _instance ??= new OfflineModeService();\n\n        /// <summary>\n        /// Offline mod aktif mi?\n        /// </summary>\n        public bool IsOfflineMode\n        {\n            get => _isOfflineMode;\n            private set\n            {\n                if (_isOfflineMode != value)\n                {\n                    _isOfflineMode = value;\n                    OnPropertyChanged();\n                    OnPropertyChanged(nameof(IsOnlineMode));\n                    OfflineModeChanged?.Invoke(this, new OfflineModeChangedEventArgs(value));\n                }\n            }\n        }\n\n        /// <summary>\n        /// Online mod aktif mi?\n        /// </summary>\n        public bool IsOnlineMode => !IsOfflineMode;\n\n        /// <summary>\n        /// Offline durum mesajı\n        /// </summary>\n        public string OfflineStatusMessage\n        {\n            get => _offlineStatusMessage;\n            private set => SetProperty(ref _offlineStatusMessage, value);\n        }\n\n        /// <summary>\n        /// Önbellekteki öğe sayısı\n        /// </summary>\n        public int CachedItemsCount\n        {\n            get => _cachedItemsCount;\n            private set => SetProperty(ref _cachedItemsCount, value);\n        }\n\n        /// <summary>\n        /// Önbellek boyutu (bytes)\n        /// </summary>\n        public long CacheSizeBytes\n        {\n            get => _cacheSizeBytes;\n            private set => SetProperty(ref _cacheSizeBytes, value);\n        }\n\n        /// <summary>\n        /// Önbellek boyutu okunabilir formatta\n        /// </summary>\n        public string CacheSizeFormatted => FormatBytes(_cacheSizeBytes);\n\n        private OfflineModeService()\n        {\n            // Servisleri al\n            _connectivityService = MauiProgram.Services.GetService<ConnectivityService>()\n                ?? throw new InvalidOperationException("ConnectivityService not registered");\n            _databaseService = MauiProgram.Services.GetService<DatabaseService>()\n                ?? throw new InvalidOperationException("DatabaseService not registered");\n            _navigationService = MauiProgram.Services.GetService<NavigationService>()\n                ?? throw new InvalidOperationException("NavigationService not registered");\n            _searchHistoryService = MauiProgram.Services.GetService<SearchHistoryService>()\n                ?? throw new InvalidOperationException("SearchHistoryService not registered");\n\n            // Bağlantı değişikliklerini dinle\n            _connectivityService.ConnectivityChanged += OnConnectivityChanged;\n\n            // Başlangıç durumunu yükle\n            LoadOfflineModeState();\n            UpdateOfflineStatus();\n            UpdateCacheInfo();\n        }\n\n        /// <summary>\n        /// Offline moda geçiş\n        /// </summary>\n        public async Task EnableOfflineModeAsync()\n        {\n            if (IsOfflineMode) return;\n\n            try\n            {\n                IsOfflineMode = true;\n                await SaveOfflineModeStateAsync();\n\n                // Service Worker cache'ini optimize et\n                await OptimizeCacheForOfflineAsync();\n\n                UpdateOfflineStatus();\n                System.Diagnostics.Debug.WriteLine("Offline mode enabled");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to enable offline mode: {ex.Message}");\n                IsOfflineMode = false;\n            }\n        }\n\n        /// <summary>\n        /// Online moda geçiş\n        /// </summary>\n        public async Task DisableOfflineModeAsync()\n        {\n            if (!IsOfflineMode) return;\n\n            try\n            {\n                IsOfflineMode = false;\n                await SaveOfflineModeStateAsync();\n\n                // Cache'i temizle ve senkronizasyon başlat\n                await ClearExpiredCacheAsync();\n                await SyncDataAsync();\n\n                UpdateOfflineStatus();\n                System.Diagnostics.Debug.WriteLine("Offline mode disabled");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to disable offline mode: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Temel navigasyon verilerini önbelleğe al\n        /// </summary>\n        public async Task CacheNavigationDataAsync()\n        {\n            try\n            {\n                // Favori yerleri önbelleğe al\n                var favoritePlacesService = MauiProgram.Services.GetService<IFavoritePlacesService>();\n                if (favoritePlacesService != null)\n                {\n                    var favorites = await favoritePlacesService.GetAllFavoritePlacesAsync();\n                    await CacheDataAsync("favorites", favorites);\n                }\n\n                // Acil durum noktalarını önbelleğe al\n                var emergencyService = MauiProgram.Services.GetService<IEmergencyPointsService>();\n                if (emergencyService != null)\n                {\n                    var emergencyPoints = await emergencyService.GetAllEmergencyPointsAsync();\n                    await CacheDataAsync("emergency_points", emergencyPoints);\n                }\n\n                // Arama geçmişini önbelleğe al\n                var searchHistoryService = MauiProgram.Services.GetService<ISearchHistoryService>();\n                if (searchHistoryService != null)\n                {\n                    var searchHistory = await searchHistoryService.GetRecentSearchesAsync(50);\n                    await CacheDataAsync("search_history", searchHistory);\n                }\n\n                UpdateCacheInfo();\n                System.Diagnostics.Debug.WriteLine("Navigation data cached successfully");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to cache navigation data: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Önbellekten temel navigasyon verilerini al\n        /// </summary>\n        public async Task<T?> GetCachedNavigationDataAsync<T>(string key)\n        {\n            try\n            {\n                return await GetCachedDataAsync<T>(key);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to get cached navigation data: {ex.Message}");\n                return default;\n            }\n        }\n\n        /// <summary>\n        /// Service Worker üzerinden cache optimizasyonu\n        /// </summary>\n        private async Task OptimizeCacheForOfflineAsync()\n        {\n            try\n            {\n                // Kritik kaynakları öncelikli olarak önbelleğe al\n                var criticalResources = new[]\n                {\n                    "/index.html",\n                    "/css/app.css",\n                    "/js/app.js",\n                    "/api/navigation/basic",\n                    "/api/search/history"\n                };\n\n                foreach (var resource in criticalResources)\n                {\n                    await CacheResourceAsync(resource);\n                }\n\n                // Eski cache'leri temizle\n                await ClearExpiredCacheAsync();\n\n                System.Diagnostics.Debug.WriteLine("Cache optimized for offline mode");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to optimize cache: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Verileri önbelleğe al\n        /// </summary>\n        private async Task CacheDataAsync<T>(string key, T data)\n        {\n            try\n            {\n                var cacheKey = $"offline_cache_{key}";\n                var jsonData = System.Text.Json.JsonSerializer.Serialize(data);\n                await SecureStorage.SetAsync(cacheKey, jsonData);\n\n                // Cache boyutunu güncelle\n                UpdateCacheInfo();\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to cache data: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Önbellekten veri al\n        /// </summary>\n        private async Task<T?> GetCachedDataAsync<T>(string key)\n        {\n            try\n            {\n                var cacheKey = $"offline_cache_{key}";\n                var jsonData = await SecureStorage.GetAsync(cacheKey);\n\n                if (!string.IsNullOrEmpty(jsonData))\n                {\n                    return System.Text.Json.JsonSerializer.Deserialize<T>(jsonData);\n                }\n\n                return default;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to get cached data: {ex.Message}");\n                return default;\n            }\n        }\n\n        /// <summary>\n        /// Kaynak önbelleğe al (Service Worker benzetimi)\n        /// </summary>\n        private async Task CacheResourceAsync(string resourceUrl)\n        {\n            try\n            {\n                // Bu kısım gerçek bir Service Worker implementasyonu için genişletilebilir\n                // Şimdilik sadece metadata saklıyoruz\n                var cacheKey = $"resource_cache_{resourceUrl.GetHashCode()}";\n                var metadata = new\n                {\n                    Url = resourceUrl,\n                    CachedAt = DateTime.UtcNow,\n                    ExpiresAt = DateTime.UtcNow.AddDays(7)\n                };\n\n                var jsonMetadata = System.Text.Json.JsonSerializer.Serialize(metadata);\n                await SecureStorage.SetAsync(cacheKey, jsonMetadata);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to cache resource: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Süresi dolmuş cache'leri temizle\n        /// </summary>\n        private async Task ClearExpiredCacheAsync()\n        {\n            try\n            {\n                // Bu kısım gerçek cache temizleme mantığı için genişletilebilir\n                var keys = await SecureStorage.GetAsync("cache_keys");\n                if (!string.IsNullOrEmpty(keys))\n                {\n                    var cacheKeys = System.Text.Json.JsonSerializer.Deserialize<List<string>>(keys);\n                    if (cacheKeys != null)\n                    {\n                        foreach (var key in cacheKeys.ToList())\n                        {\n                            try\n                            {\n                                SecureStorage.Remove(key);\n                                cacheKeys.Remove(key);\n                            }\n                            catch\n                            {\n                                // Key bulunamadıysa devam et\n                            }\n                        }\n\n                        var updatedKeys = System.Text.Json.JsonSerializer.Serialize(cacheKeys);\n                        await SecureStorage.SetAsync("cache_keys", updatedKeys);\n                    }\n                }\n\n                UpdateCacheInfo();\n                System.Diagnostics.Debug.WriteLine("Expired cache cleared");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to clear expired cache: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Veri senkronizasyonu\n        /// </summary>\n        private async Task SyncDataAsync()\n        {\n            try\n            {\n                if (!_connectivityService.IsConnected) return;\n\n                // Önbellekteki verileri sunucuya senkronize et\n                // Bu kısım gerçek senkronizasyon mantığı için genişletilebilir\n\n                // Son senkronizasyon zamanını kaydet\n                await SecureStorage.SetAsync(LastSyncKey, DateTime.UtcNow.ToString("O"));\n\n                System.Diagnostics.Debug.WriteLine("Data synchronized successfully");\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to sync data: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Bağlantı durumu değiştiğinde\n        /// </summary>\n        private void OnConnectivityChanged(bool isConnected)\n        {\n            UpdateOfflineStatus();\n\n            if (isConnected && IsOfflineMode)\n            {\n                // Bağlantı geri geldi, otomatik senkronizasyon başlat\n                Task.Run(async () => await SyncDataAsync());\n            }\n        }\n\n        /// <summary>\n        /// Offline durumunu güncelle\n        /// </summary>\n        private void UpdateOfflineStatus()\n        {\n            var isConnected = _connectivityService.IsConnected;\n\n            if (!isConnected)\n            {\n                OfflineStatusMessage = "İnternet bağlantısı yok. Offline mod aktif.";\n                if (!IsOfflineMode)\n                {\n                    // Otomatik olarak offline moda geç\n                    Task.Run(async () => await EnableOfflineModeAsync());\n                }\n            }\n            else if (IsOfflineMode)\n            {\n                OfflineStatusMessage = "İnternet bağlantısı mevcut. Online moda geçebilirsiniz.";\n            }\n            else\n            {\n                OfflineStatusMessage = "Online mod aktif.";\n            }\n        }\n\n        /// <summary>\n        /// Cache bilgilerini güncelle\n        /// </summary>\n        private void UpdateCacheInfo()\n        {\n            // Bu kısım gerçek cache boyutu hesaplama için genişletilebilir\n            // Şimdilik tahmini değerler\n            CachedItemsCount = 0;\n            CacheSizeBytes = 0;\n\n            try\n            {\n                // SecureStorage'deki öğeleri say\n                // Not: SecureStorage'de öğe sayısını almak için API sınırlaması var\n                // Bu kısım gerçek implementasyon için genişletilebilir\n                CachedItemsCount = 5; // Tahmini değer\n                CacheSizeBytes = 1024 * 1024; // 1MB tahmini\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to update cache info: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Offline mod durumunu yükle\n        /// </summary>\n        private void LoadOfflineModeState()\n        {\n            try\n            {\n                var offlineModeStr = Preferences.Get(OfflineModeKey, "false");\n                IsOfflineMode = bool.Parse(offlineModeStr);\n            }\n            catch\n            {\n                IsOfflineMode = false;\n            }\n        }\n\n        /// <summary>\n        /// Offline mod durumunu kaydet\n        /// </summary>\n        private Task SaveOfflineModeStateAsync()\n        {\n            try\n            {\n                Preferences.Set(OfflineModeKey, IsOfflineMode.ToString());\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Failed to save offline mode state: {ex.Message}");\n            }\n\n            return Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Byte'ları okunabilir formata çevir\n        /// </summary>\n        private string FormatBytes(long bytes)\n        {\n            string[] sizes = { "B", "KB", "MB", "GB" };\n            int order = 0;\n            double size = bytes;\n\n            while (size >= 1024 && order < sizes.Length - 1)\n            {\n                order++;\n                size /= 1024;\n            }\n\n            return $"{size:0.##} {sizes[order]}";\n        }\n\n        /// <summary>\n        /// Property değişikliği bildirimi\n        /// </summary>\n        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n\n        /// <summary>\n        /// Property değerini ayarla ve değişiklik bildir\n        /// </summary>\n        protected bool SetProperty<T>(ref T backingStore, T value, [CallerMemberName] string? propertyName = null)\n        {\n            if (EqualityComparer<T>.Default.Equals(backingStore, value))\n                return false;\n\n            backingStore = value;\n            OnPropertyChanged(propertyName);\n            return true;\n        }\n    }\n\n    /// <summary>\n    /// Offline mod değişikliği olay argümanları\n    /// </summary>\n    public class OfflineModeChangedEventArgs : EventArgs\n    {\n        public bool IsOfflineMode { get; }\n\n        public OfflineModeChangedEventArgs(bool isOfflineMode)\n        {\n            IsOfflineMode = isOfflineMode;\n        }\n    }\n}\n