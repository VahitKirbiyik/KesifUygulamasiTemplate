using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Badge yönetim servisi - CI/CD pipeline ile entegre\n    /// </summary>\n    public class BadgeManager : IBadgeService\n    {\n        private readonly ILogger<BadgeManager> _logger;\n        private readonly string _badgeDataPath;\n        private Dictionary<string, Badge> _badges;\n        private Dictionary<string, UserBadge> _userBadges;\n\n        // CI/CD için environment variable desteği\n        private readonly bool _isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                                  Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n        public event EventHandler<Badge> BadgeAwarded;\n        public event EventHandler<BadgeProgress> BadgeProgressChanged;\n\n        public BadgeManager(ILogger<BadgeManager> logger)\n        {\n            _logger = logger;\n            _badgeDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "BadgeData");\n\n            Directory.CreateDirectory(_badgeDataPath);\n            InitializeBadges();\n            LoadUserBadges();\n        }\n\n        /// <summary>\n        /// Badge'ları başlatır\n        /// </summary>\n        private void InitializeBadges()\n        {\n            _badges = new Dictionary<string, Badge>\n            {\n                ["First-Route"] = new Badge\n                {\n                    Id = "First-Route",\n                    Name = "İlk Rota",\n                    Description = "İlk rotanızı hesaplayın",\n                    IconUrl = "route_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 10,\n                    IsHidden = false\n                },\n                ["Route-Master"] = new Badge\n                {\n                    Id = "Route-Master",\n                    Name = "Rota Ustası",\n                    Description = "100 rota hesaplayın",\n                    IconUrl = "master_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 100,\n                    IsHidden = false,\n                    MaxProgress = 100\n                },\n                ["Eco-Warrior"] = new Badge\n                {\n                    Id = "Eco-Warrior",\n                    Name = "Çevre Dostu",\n                    Description = "10 çevre dostu rota kullanın",\n                    IconUrl = "eco_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 50,\n                    IsHidden = false,\n                    MaxProgress = 10\n                },\n                ["Offline-Ready"] = new Badge\n                {\n                    Id = "Offline-Ready",\n                    Name = "Offline Hazır",\n                    Description = "Offline harita verisi indirin",\n                    IconUrl = "offline_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 25,\n                    IsHidden = false\n                },\n                ["AR-Explorer"] = new Badge\n                {\n                    Id = "AR-Explorer",\n                    Name = "AR Kaşifi",\n                    Description = "Artırılmış gerçeklik özelliğini kullanın",\n                    IconUrl = "ar_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 30,\n                    IsHidden = false\n                },\n                ["IAP-Enabled"] = new Badge\n                {\n                    Id = "IAP-Enabled",\n                    Name = "Premium Kullanıcı",\n                    Description = "İlk satın alma işlemini tamamlayın",\n                    IconUrl = "premium_icon.png",\n                    Category = BadgeCategory.Purchase,\n                    Points = 0,\n                    IsHidden = true\n                },\n                ["Speed-Demon"] = new Badge\n                {\n                    Id = "Speed-Demon",\n                    Name = "Hız Şeytanı",\n                    Description = "En hızlı rotayı 50 kez kullanın",\n                    IconUrl = "speed_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 75,\n                    IsHidden = false,\n                    MaxProgress = 50\n                },\n                ["Safety-First"] = new Badge\n                {\n                    Id = "Safety-First",\n                    Name = "Güvenlik Önce",\n                    Description = "En güvenli rotayı 25 kez kullanın",\n                    IconUrl = "safety_icon.png",\n                    Category = BadgeCategory.Achievement,\n                    Points = 60,\n                    IsHidden = false,\n                    MaxProgress = 25\n                }\n            };\n\n            _logger.LogInformation($"{_badges.Count} badge tanımlandı");\n        }\n\n        /// <summary>\n        /// Kullanıcı badge verilerini yükler\n        /// </summary>\n        private void LoadUserBadges()\n        {\n            try\n            {\n                var userBadgesPath = Path.Combine(_badgeDataPath, "user_badges.json");\n                if (File.Exists(userBadgesPath))\n                {\n                    var json = File.ReadAllText(userBadgesPath);\n                    _userBadges = JsonSerializer.Deserialize<Dictionary<string, UserBadge>>(json) ?? new Dictionary<string, UserBadge>();\n                    _logger.LogInformation($"{_userBadges.Count} kullanıcı badge'ı yüklendi");\n                }\n                else\n                {\n                    _userBadges = new Dictionary<string, UserBadge>();\n                    _logger.LogInformation("Yeni kullanıcı badge verisi oluşturuldu");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Kullanıcı badge verisi yükleme hatası");\n                _userBadges = new Dictionary<string, UserBadge>();\n            }\n        }\n\n        /// <summary>\n        /// Kullanıcı badge verilerini kaydeder\n        /// </summary>\n        private async Task SaveUserBadgesAsync()\n        {\n            try\n            {\n                var userBadgesPath = Path.Combine(_badgeDataPath, "user_badges.json");\n                var json = JsonSerializer.Serialize(_userBadges, new JsonSerializerOptions { WriteIndented = true });\n                await File.WriteAllTextAsync(userBadgesPath, json);\n                _logger.LogInformation("Kullanıcı badge verisi kaydedildi");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Kullanıcı badge verisi kaydetme hatası");\n            }\n        }\n\n        /// <summary>\n        /// Badge verir\n        /// </summary>\n        public async Task<bool> AwardBadgeAsync(string badgeId)\n        {\n            try\n            {\n                if (!_badges.ContainsKey(badgeId))\n                {\n                    _logger.LogWarning($"Badge bulunamadı: {badgeId}");\n                    return false;\n                }\n\n                var badge = _badges[badgeId];\n\n                if (_userBadges.ContainsKey(badgeId))\n                {\n                    var userBadge = _userBadges[badgeId];\n                    if (userBadge.IsEarned)\n                    {\n                        _logger.LogInformation($"Badge zaten kazanılmış: {badgeId}");\n                        return false;\n                    }\n                }\n\n                var userBadge = new UserBadge\n                {\n                    BadgeId = badgeId,\n                    IsEarned = true,\n                    EarnedDate = DateTime.Now,\n                    Progress = badge.MaxProgress ?? 1,\n                    TotalPoints = badge.Points\n                };\n\n                _userBadges[badgeId] = userBadge;\n                await SaveUserBadgesAsync();\n\n                BadgeAwarded?.Invoke(this, badge);\n                _logger.LogInformation($"Badge verildi: {badgeId}");\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Badge verme hatası: {badgeId}");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Badge verir (senkron versiyon)\n        /// </summary>\n        public void AwardBadge(string badgeId)\n        {\n            Task.Run(() => AwardBadgeAsync(badgeId)).Wait();\n        }\n\n        /// <summary>\n        /// Badge ilerlemesini günceller\n        /// </summary>\n        public async Task UpdateBadgeProgressAsync(string badgeId, int progress)\n        {\n            try\n            {\n                if (!_badges.ContainsKey(badgeId))\n                {\n                    _logger.LogWarning($"Badge bulunamadı: {badgeId}");\n                    return;\n                }\n\n                var badge = _badges[badgeId];\n                if (!badge.MaxProgress.HasValue)\n                {\n                    _logger.LogWarning($"Badge progress desteklemiyor: {badgeId}");\n                    return;\n                }\n\n                var userBadge = _userBadges.ContainsKey(badgeId) ? _userBadges[badgeId] : new UserBadge { BadgeId = badgeId };\n                userBadge.Progress = Math.Min(progress, badge.MaxProgress.Value);\n\n                if (userBadge.Progress >= badge.MaxProgress.Value && !userBadge.IsEarned)\n                {\n                    userBadge.IsEarned = true;\n                    userBadge.EarnedDate = DateTime.Now;\n                    userBadge.TotalPoints = badge.Points;\n                    BadgeAwarded?.Invoke(this, badge);\n                    _logger.LogInformation($"Badge tamamlandı: {badgeId}");\n                }\n\n                _userBadges[badgeId] = userBadge;\n                await SaveUserBadgesAsync();\n\n                var badgeProgress = new BadgeProgress\n                {\n                    BadgeId = badgeId,\n                    CurrentProgress = userBadge.Progress,\n                    MaxProgress = badge.MaxProgress.Value,\n                    IsCompleted = userBadge.IsEarned\n                };\n\n                BadgeProgressChanged?.Invoke(this, badgeProgress);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, $"Badge progress güncelleme hatası: {badgeId}");\n            }\n        }\n\n        /// <summary>\n        /// Kullanıcının kazandığı badge'ları alır\n        /// </summary>\n        public List<Badge> GetEarnedBadges()\n        {\n            try\n            {\n                return _userBadges.Values\n                    .Where(ub => ub.IsEarned)\n                    .Select(ub => _badges[ub.BadgeId])\n                    .ToList();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Kazanılan badge'lar alma hatası");\n                return new List<Badge>();\n            }\n        }\n\n        /// <summary>\n        /// Kullanıcının progress'teki badge'larını alır\n        /// </summary>\n        public List<BadgeProgress> GetBadgeProgress()\n        {\n            try\n            {\n                return _userBadges.Values\n                    .Where(ub => !ub.IsEarned && _badges[ub.BadgeId].MaxProgress.HasValue)\n                    .Select(ub => new BadgeProgress\n                    {\n                        BadgeId = ub.BadgeId,\n                        CurrentProgress = ub.Progress,\n                        MaxProgress = _badges[ub.BadgeId].MaxProgress.Value,\n                        IsCompleted = false\n                    })\n                    .ToList();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Badge progress alma hatası");\n                return new List<BadgeProgress>();\n            }\n        }\n\n        /// <summary>\n        /// Tüm badge'ları alır\n        /// </summary>\n        public List<Badge> GetAllBadges()\n        {\n            return _badges.Values.ToList();\n        }\n\n        /// <summary>\n        /// Badge kazanma istatistiklerini alır\n        /// </summary>\n        public BadgeStatistics GetBadgeStatistics()\n        {\n            try\n            {\n                var earnedBadges = GetEarnedBadges();\n                var totalPoints = earnedBadges.Sum(b => b.Points);\n                var recentBadges = _userBadges.Values\n                    .Where(ub => ub.IsEarned && ub.EarnedDate.HasValue)\n                    .OrderByDescending(ub => ub.EarnedDate)\n                    .Take(5)\n                    .Select(ub => _badges[ub.BadgeId])\n                    .ToList();\n\n                return new BadgeStatistics\n                {\n                    TotalEarnedBadges = earnedBadges.Count,\n                    TotalPoints = totalPoints,\n                    RecentBadges = recentBadges,\n                    CompletionRate = (double)earnedBadges.Count / _badges.Count * 100\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Badge istatistikleri alma hatası");\n                return new BadgeStatistics();\n            }\n        }\n\n        /// <summary>\n        /// Test için badge verilerini sıfırlar\n        /// </summary>\n        public async Task ResetBadgeDataAsync()\n        {\n            if (!_isTestEnvironment)\n            {\n                _logger.LogWarning("Badge verisi sıfırlama sadece test ortamında kullanılabilir");\n                return;\n            }\n\n            _userBadges.Clear();\n            await SaveUserBadgesAsync();\n            _logger.LogInformation("Badge verisi sıfırlandı (test ortamı)");\n        }\n    }\n\n    /// <summary>\n    /// Kullanıcı badge sınıfı\n    /// </summary>\n    public class UserBadge\n    {\n        public string BadgeId { get; set; }\n        public bool IsEarned { get; set; }\n        public DateTime? EarnedDate { get; set; }\n        public int Progress { get; set; }\n        public int TotalPoints { get; set; }\n    }\n\n    /// <summary>\n    /// Badge progress sınıfı\n    /// </summary>\n    public class BadgeProgress\n    {\n        public string BadgeId { get; set; }\n        public int CurrentProgress { get; set; }\n        public int MaxProgress { get; set; }\n        public bool IsCompleted { get; set; }\n    }\n\n    /// <summary>\n    /// Badge istatistikleri sınıfı\n    /// </summary>\n    public class BadgeStatistics\n    {\n        public int TotalEarnedBadges { get; set; }\n        public int TotalPoints { get; set; }\n        public List<Badge> RecentBadges { get; set; } = new();\n        public double CompletionRate { get; set; }\n    }\n}\n