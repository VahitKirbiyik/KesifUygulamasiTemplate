// FeedbackService.cs - Çok dilli geri bildirim servisi\n// Bu sınıf kullanıcı geri bildirimlerini çok dilli olarak yönetir ve CI/CD pipeline ile entegre çalışır\n\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Geri bildirim sınıfı\n    /// </summary>\n    public class Feedback\n    {\n        public string Id { get; set; }\n        public string Language { get; set; }\n        public string Message { get; set; }\n        public string Category { get; set; }\n        public int Rating { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string UserId { get; set; }\n        public Dictionary<string, object> Metadata { get; set; } = new Dictionary<string, object>();\n        public bool IsProcessed { get; set; }\n        public DateTime? ProcessedDate { get; set; }\n    }\n\n    /// <summary>\n    /// Geri bildirim istatistikleri\n    /// </summary>\n    public class FeedbackStatistics\n    {\n        public int TotalFeedbacks { get; set; }\n        public Dictionary<string, int> FeedbacksByLanguage { get; set; } = new Dictionary<string, int>();\n        public Dictionary<string, int> FeedbacksByCategory { get; set; } = new Dictionary<string, int>();\n        public double AverageRating { get; set; }\n        public Dictionary<string, double> AverageRatingByLanguage { get; set; } = new Dictionary<string, double>();\n        public int ProcessedFeedbacks { get; set; }\n        public int UnprocessedFeedbacks { get; set; }\n    }\n\n    /// <summary>\n    /// Geri bildirim servisi\n    /// </summary>\n    public class FeedbackService\n    {\n        private readonly ILogger<FeedbackService> _logger;\n        private readonly string _feedbackDataPath;\n        private readonly bool _isTestEnvironment;\n        private readonly List<Feedback> _feedbacks = new List<Feedback>();\n\n        // CI/CD için environment variable desteği\n        private readonly bool _autoProcessFeedback = bool.Parse(Environment.GetEnvironmentVariable("AUTO_PROCESS_FEEDBACK") ?? "true");\n        private readonly int _maxFeedbacksPerDay = int.Parse(Environment.GetEnvironmentVariable("MAX_FEEDBACKS_PER_DAY") ?? "100");\n        private readonly string[] _supportedLanguages = (Environment.GetEnvironmentVariable("SUPPORTED_LANGUAGES") ?? "en,tr,de,fr,es,ar,zh,ja").Split(',');\n\n        public event EventHandler<Feedback> FeedbackSubmitted;\n        public event EventHandler<Feedback> FeedbackProcessed;\n\n        public FeedbackService(ILogger<FeedbackService> logger)\n        {\n            _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n\n            // Test ortamı kontrolü\n            _isTestEnvironment = Environment.GetEnvironmentVariable("CI") == "true" ||\n                                Environment.GetEnvironmentVariable("TEST_ENVIRONMENT") == "true";\n\n            // Geri bildirim veri yolu\n            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n            _feedbackDataPath = Path.Combine(appDataPath, "KesifUygulamasi", "FeedbackData");\n            Directory.CreateDirectory(_feedbackDataPath);\n\n            _logger.LogInformation("FeedbackService initialized. Supported languages: {Languages}",\n                string.Join(", ", _supportedLanguages));\n\n            // Mevcut geri bildirimleri yükle\n            Task.Run(() => LoadFeedbacksAsync()).Wait();\n        }\n\n        /// <summary>\n        /// Geri bildirim gönderir\n        /// </summary>\n        public async Task<bool> SubmitFeedbackAsync(string language, string message, string category = "General", int rating = 5, string userId = null)\n        {\n            try\n            {\n                // Dil kontrolü\n                if (!IsLanguageSupported(language))\n                {\n                    _logger.LogWarning("Unsupported language: {Language}", language);\n                    return false;\n                }\n\n                // Günlük limit kontrolü\n                if (!await CheckDailyLimitAsync())\n                {\n                    _logger.LogWarning("Daily feedback limit exceeded");\n                    return false;\n                }\n\n                // Geri bildirim oluştur\n                var feedback = new Feedback\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    Language = language,\n                    Message = message,\n                    Category = category,\n                    Rating = Math.Clamp(rating, 1, 5),\n                    Timestamp = DateTime.UtcNow,\n                    UserId = userId ?? "Anonymous",\n                    IsProcessed = false\n                };\n\n                // Metadata ekleme\n                feedback.Metadata["user_agent"] = Environment.GetEnvironmentVariable("USER_AGENT") ?? "Unknown";\n                feedback.Metadata["platform"] = Environment.GetEnvironmentVariable("PLATFORM") ?? "Unknown";\n                feedback.Metadata["app_version"] = Environment.GetEnvironmentVariable("APP_VERSION") ?? "1.0.0";\n\n                _feedbacks.Add(feedback);\n\n                // Dosyaya kaydet\n                await SaveFeedbackAsync(feedback);\n\n                // Event tetikleme\n                FeedbackSubmitted?.Invoke(this, feedback);\n\n                // Otomatik işleme\n                if (_autoProcessFeedback)\n                {\n                    await ProcessFeedbackAsync(feedback.Id);\n                }\n\n                _logger.LogInformation("Feedback submitted: Language={Language}, Category={Category}, Rating={Rating}",\n                    language, category, rating);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to submit feedback");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Senkron geri bildirim gönderme (legacy support)\n        /// </summary>\n        public void SubmitFeedback(string language, string message)\n        {\n            Task.Run(() => SubmitFeedbackAsync(language, message)).Wait();\n        }\n\n        /// <summary>\n        /// Geri bildirimi işler\n        /// </summary>\n        public async Task<bool> ProcessFeedbackAsync(string feedbackId)\n        {\n            try\n            {\n                var feedback = _feedbacks.FirstOrDefault(f => f.Id == feedbackId);\n                if (feedback == null)\n                {\n                    _logger.LogWarning("Feedback not found: {FeedbackId}", feedbackId);\n                    return false;\n                }\n\n                if (feedback.IsProcessed)\n                {\n                    _logger.LogInformation("Feedback already processed: {FeedbackId}", feedbackId);\n                    return true;\n                }\n\n                feedback.IsProcessed = true;\n                feedback.ProcessedDate = DateTime.UtcNow;\n\n                // İşleme mantığı\n                await AnalyzeFeedbackAsync(feedback);\n                await CategorizeFeedbackAsync(feedback);\n                await GenerateResponseAsync(feedback);\n\n                // Güncellenmiş geri bildirimi kaydet\n                await UpdateFeedbackAsync(feedback);\n\n                // Event tetikleme\n                FeedbackProcessed?.Invoke(this, feedback);\n\n                _logger.LogInformation("Feedback processed: {FeedbackId}", feedbackId);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to process feedback: {FeedbackId}", feedbackId);\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Geri bildirim istatistiklerini döndürür\n        /// </summary>\n        public async Task<FeedbackStatistics> GetFeedbackStatisticsAsync()\n        {\n            await LoadFeedbacksAsync(); // En güncel veriyi yükle\n\n            var stats = new FeedbackStatistics\n            {\n                TotalFeedbacks = _feedbacks.Count,\n                ProcessedFeedbacks = _feedbacks.Count(f => f.IsProcessed),\n                UnprocessedFeedbacks = _feedbacks.Count(f => !f.IsProcessed)\n            };\n\n            // Dil bazlı istatistikler\n            foreach (var feedback in _feedbacks)\n            {\n                stats.FeedbacksByLanguage[feedback.Language] = stats.FeedbacksByLanguage.GetValueOrDefault(feedback.Language) + 1;\n                stats.FeedbacksByCategory[feedback.Category] = stats.FeedbacksByCategory.GetValueOrDefault(feedback.Category) + 1;\n            }\n\n            // Ortalama rating hesaplama\n            if (_feedbacks.Any())\n            {\n                stats.AverageRating = _feedbacks.Average(f => f.Rating);\n\n                // Dil bazlı ortalama rating\n                var ratingsByLanguage = _feedbacks.GroupBy(f => f.Language)\n                    .ToDictionary(g => g.Key, g => g.Average(f => f.Rating));\n\n                foreach (var kvp in ratingsByLanguage)\n                {\n                    stats.AverageRatingByLanguage[kvp.Key] = kvp.Value;\n                }\n            }\n\n            return stats;\n        }\n\n        /// <summary>\n        /// Dile göre geri bildirimleri filtreler\n        /// </summary>\n        public async Task<IEnumerable<Feedback>> GetFeedbacksByLanguageAsync(string language)\n        {\n            await LoadFeedbacksAsync();\n            return _feedbacks.Where(f => f.Language.Equals(language, StringComparison.OrdinalIgnoreCase));\n        }\n\n        /// <summary>\n        /// Kategoriye göre geri bildirimleri filtreler\n        /// </summary>\n        public async Task<IEnumerable<Feedback>> GetFeedbacksByCategoryAsync(string category)\n        {\n            await LoadFeedbacksAsync();\n            return _feedbacks.Where(f => f.Category.Equals(category, StringComparison.OrdinalIgnoreCase));\n        }\n\n        /// <summary>\n        /// İşlenmemiş geri bildirimleri döndürür\n        /// </summary>\n        public async Task<IEnumerable<Feedback>> GetUnprocessedFeedbacksAsync()\n        {\n            await LoadFeedbacksAsync();\n            return _feedbacks.Where(f => !f.IsProcessed);\n        }\n\n        /// <summary>\n        /// Dili destekleniyor mu kontrol eder\n        /// </summary>\n        private bool IsLanguageSupported(string language)\n        {\n            return _supportedLanguages.Contains(language, StringComparer.OrdinalIgnoreCase);\n        }\n\n        /// <summary>\n        /// Günlük limit kontrolü\n        /// </summary>\n        private async Task<bool> CheckDailyLimitAsync()\n        {\n            var today = DateTime.UtcNow.Date;\n            var todaysFeedbacks = _feedbacks.Count(f => f.Timestamp.Date == today);\n            return todaysFeedbacks < _maxFeedbacksPerDay;\n        }\n\n        /// <summary>\n        /// Geri bildirimi analiz eder\n        /// </summary>\n        private async Task AnalyzeFeedbackAsync(Feedback feedback)\n        {\n            // Basit sentiment analizi\n            var positiveWords = new[] { "good", "great", "excellent", "awesome", "love", "iyi", "harika", "mükemmel", "güzel" };\n            var negativeWords = new[] { "bad", "poor", "terrible", "hate", "worst", "kötü", "berbat", "rezalet" };\n\n            var message = feedback.Message.ToLower();\n            var positiveCount = positiveWords.Count(word => message.Contains(word));\n            var negativeCount = negativeWords.Count(word => message.Contains(word));\n\n            feedback.Metadata["sentiment_score"] = positiveCount - negativeCount;\n            feedback.Metadata["positive_words"] = positiveCount;\n            feedback.Metadata["negative_words"] = negativeCount;\n\n            // Otomatik kategori belirleme\n            if (message.Contains("bug") || message.Contains("error") || message.Contains("hata"))\n            {\n                feedback.Category = "Bug Report";\n            }\n            else if (message.Contains("feature") || message.Contains("özellik"))\n            {\n                feedback.Category = "Feature Request";\n            }\n            else if (message.Contains("slow") || message.Contains("performance") || message.Contains("yavaş"))\n            {\n                feedback.Category = "Performance";\n            }\n        }\n\n        /// <summary>\n        /// Geri bildirimi kategorize eder\n        /// </summary>\n        private async Task CategorizeFeedbackAsync(Feedback feedback)\n        {\n            // Kategori güvenilirliğini hesapla\n            feedback.Metadata["category_confidence"] = 0.8; // Basit implementasyon\n        }\n\n        /// <summary>\n        /// Otomatik yanıt üretir\n        /// </summary>\n        private async Task GenerateResponseAsync(Feedback feedback)\n        {\n            // Dile göre otomatik yanıt\n            var responses = new Dictionary<string, string>\n            {\n                ["en"] = "Thank you for your feedback! We appreciate your input.",\n                ["tr"] = "Geri bildiriminiz için teşekkür ederiz! Görüşlerinizi değerli buluyoruz.",\n                ["de"] = "Vielen Dank für Ihr Feedback! Wir schätzen Ihre Eingabe.",\n                ["fr"] = "Merci pour votre retour! Nous apprécions vos commentaires.",\n                ["es"] = "¡Gracias por sus comentarios! Apreciamos sus aportes.",\n                ["ar"] = "شكراً لملاحظاتك! نحن نقدر آراءك.",\n                ["zh"] = "感谢您的反馈！我们重视您的意见。",\n                ["ja"] = "フィードバックありがとうございます！あなたの意見を大切にしています。"\n            };\n\n            feedback.Metadata["auto_response"] = responses.GetValueOrDefault(feedback.Language, responses["en"]);\n        }\n\n        /// <summary>\n        /// Geri bildirimi dosyaya kaydeder\n        /// </summary>\n        private async Task SaveFeedbackAsync(Feedback feedback)\n        {\n            try\n            {\n                var fileName = $"feedback_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json";\n                var filePath = Path.Combine(_feedbackDataPath, fileName);\n\n                var json = JsonSerializer.Serialize(feedback, new JsonSerializerOptions\n                {\n                    WriteIndented = true,\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                });\n\n                await File.WriteAllTextAsync(filePath, json);\n                _logger.LogInformation("Feedback saved to {FilePath}", filePath);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to save feedback");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Geri bildirimi günceller\n        /// </summary>\n        private async Task UpdateFeedbackAsync(Feedback feedback)\n        {\n            // Güncellenmiş geri bildirimi mevcut dosyaya kaydet\n            await SaveFeedbackAsync(feedback);\n        }\n\n        /// <summary>\n        /// Geri bildirimleri dosyadan yükler\n        /// </summary>\n        private async Task LoadFeedbacksAsync()\n        {\n            try\n            {\n                var feedbackFiles = Directory.GetFiles(_feedbackDataPath, "feedback_*.json");\n                _feedbacks.Clear();\n\n                foreach (var file in feedbackFiles)\n                {\n                    try\n                    {\n                        var json = await File.ReadAllTextAsync(file);\n                        var feedback = JsonSerializer.Deserialize<Feedback>(json);\n                        if (feedback != null)\n                        {\n                            _feedbacks.Add(feedback);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(ex, "Failed to load feedback from {File}", file);\n                    }\n                }\n\n                _logger.LogInformation("Loaded {Count} feedbacks from files", _feedbacks.Count);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, "Failed to load feedbacks");\n            }\n        }\n\n        /// <summary>\n        /// Örnek geri bildirimler oluşturur (test için)\n        /// </summary>\n        public async Task CreateSampleFeedbacksAsync()\n        {\n            if (!_isTestEnvironment)\n                return;\n\n            var sampleFeedbacks = new[]\n            {\n                new { Lang = "en", Message = "Great app! Love the navigation features.", Category = "General", Rating = 5 },\n                new { Lang = "tr", Message = "Harika uygulama! Navigasyon özellikleri çok iyi.", Category = "General", Rating = 5 },\n                new { Lang = "de", Message = "Tolle App! Die Navigationsfunktionen sind super.", Category = "General", Rating = 4 },\n                new { Lang = "fr", Message = "Excellente application! J'adore les fonctions de navigation.", Category = "General", Rating = 5 },\n                new { Lang = "es", Message = "¡Excelente aplicación! Me encantan las funciones de navegación.", Category = "General", Rating = 4 },\n                new { Lang = "ar", Message = "تطبيق رائع! أحب ميزات التنقل.", Category = "General", Rating = 5 },\n                new { Lang = "zh", Message = "很棒的应用！我喜欢导航功能。", Category = "General", Rating = 4 },\n                new { Lang = "ja", Message = "素晴らしいアプリ！ナビゲーション機能が好きです。", Category = "General", Rating = 5 }\n            };\n\n            foreach (var sample in sampleFeedbacks)\n            {\n                await SubmitFeedbackAsync(sample.Lang, sample.Message, sample.Category, sample.Rating, "SampleUser");\n            }\n\n            _logger.LogInformation("Sample feedbacks created for testing");\n        }\n    }\n}\n