using System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Offline tile compression servisi\n    /// Harita tile'larını sıkıştırma ve optimizasyon sistemi\n    /// </summary>\n    public class TileCompressor\n    {\n        private readonly ILogger<TileCompressor> _logger;\n        private readonly string _cachePath;\n        private readonly string _compressedPath;\n        private readonly int _compressionLevel;\n        private readonly long _maxTileSize;\n        private readonly bool _enableCompression;\n\n        public TileCompressor(ILogger<TileCompressor> logger)\n        {\n            _logger = logger;\n            _cachePath = Environment.GetEnvironmentVariable("TILE_CACHE_PATH") ?? "cache/tiles";\n            _compressedPath = Environment.GetEnvironmentVariable("COMPRESSED_TILE_PATH") ?? "cache/compressed";\n            _compressionLevel = int.Parse(Environment.GetEnvironmentVariable("COMPRESSION_LEVEL") ?? "6");\n            _maxTileSize = long.Parse(Environment.GetEnvironmentVariable("MAX_TILE_SIZE_MB") ?? "10") * 1024 * 1024;\n            _enableCompression = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_TILE_COMPRESSION") ?? "true");\n\n            // Klasörleri oluştur\n            Directory.CreateDirectory(_cachePath);\n            Directory.CreateDirectory(_compressedPath);\n        }\n\n        /// <summary>\n        /// Tile verisini sıkıştır\n        /// </summary>\n        public async Task<byte[]> CompressTile(byte[] tileData)\n        {\n            if (!_enableCompression || tileData == null || tileData.Length == 0)\n            {\n                return tileData;\n            }\n\n            try\n            {\n                using var inputStream = new MemoryStream(tileData);\n                using var outputStream = new MemoryStream();\n\n                // GZip sıkıştırma\n                using (var gzipStream = new GZipStream(outputStream, (CompressionLevel)_compressionLevel))\n                {\n                    await inputStream.CopyToAsync(gzipStream);\n                }\n\n                var compressedData = outputStream.ToArray();\n\n                // Sıkıştırma oranını logla\n                double compressionRatio = (double)compressedData.Length / tileData.Length;\n                _logger.LogInformation($"Tile compressed: {tileData.Length} -> {compressedData.Length} bytes ({compressionRatio:P2})");\n\n                return compressedData;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Tile compression failed: {ex.Message}");\n                return tileData; // Hata durumunda orijinal veriyi döndür\n            }\n        }\n\n        /// <summary>\n        /// Sıkıştırılmış tile verisini aç\n        /// </summary>\n        public async Task<byte[]> DecompressTile(byte[] compressedData)\n        {\n            if (compressedData == null || compressedData.Length == 0)\n            {\n                return compressedData;\n            }\n\n            try\n            {\n                using var inputStream = new MemoryStream(compressedData);\n                using var outputStream = new MemoryStream();\n\n                // GZip açma\n                using (var gzipStream = new GZipStream(inputStream, CompressionMode.Decompress))\n                {\n                    await gzipStream.CopyToAsync(outputStream);\n                }\n\n                return outputStream.ToArray();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Tile decompression failed: {ex.Message}");\n                return compressedData; // Hata durumunda sıkıştırılmış veriyi döndür\n            }\n        }\n\n        /// <summary>\n        /// Tile'ı dosyaya sıkıştırılmış olarak kaydet\n        /// </summary>\n        public async Task<bool> SaveCompressedTile(string tileKey, byte[] tileData)\n        {\n            try\n            {\n                var compressedData = await CompressTile(tileData);\n\n                // Dosya boyutu kontrolü\n                if (compressedData.Length > _maxTileSize)\n                {\n                    _logger.LogWarning($"Tile size exceeds maximum: {compressedData.Length} > {_maxTileSize}");\n                    return false;\n                }\n\n                var filePath = GetCompressedTilePath(tileKey);\n                Directory.CreateDirectory(Path.GetDirectoryName(filePath));\n\n                await File.WriteAllBytesAsync(filePath, compressedData);\n\n                _logger.LogInformation($"Compressed tile saved: {tileKey} ({compressedData.Length} bytes)");\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to save compressed tile {tileKey}: {ex.Message}");\n                return false;\n            }\n        }\n\n        /// <summary>\n        /// Sıkıştırılmış tile'ı dosyadan yükle\n        /// </summary>\n        public async Task<byte[]> LoadCompressedTile(string tileKey)\n        {\n            try\n            {\n                var filePath = GetCompressedTilePath(tileKey);\n\n                if (!File.Exists(filePath))\n                {\n                    return null;\n                }\n\n                var compressedData = await File.ReadAllBytesAsync(filePath);\n                var decompressedData = await DecompressTile(compressedData);\n\n                _logger.LogInformation($"Compressed tile loaded: {tileKey} ({compressedData.Length} -> {decompressedData.Length} bytes)");\n                return decompressedData;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to load compressed tile {tileKey}: {ex.Message}");\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Tile sıkıştırma istatistiklerini getir\n        /// </summary>\n        public async Task<TileCompressionStats> GetCompressionStats()\n        {\n            try\n            {\n                var stats = new TileCompressionStats\n                {\n                    TotalTiles = 0,\n                    TotalOriginalSize = 0,\n                    TotalCompressedSize = 0,\n                    CompressionRatio = 0,\n                    CacheHitRate = 0\n                };\n\n                // Sıkıştırılmış tile dosyalarını tara\n                var compressedFiles = Directory.GetFiles(_compressedPath, "*.tile", SearchOption.AllDirectories);\n\n                foreach (var file in compressedFiles)\n                {\n                    try\n                    {\n                        var fileInfo = new FileInfo(file);\n                        var compressedSize = fileInfo.Length;\n\n                        // Dosya adından orijinal boyutu çıkar (varsa)\n                        var fileName = Path.GetFileNameWithoutExtension(file);\n                        var parts = fileName.Split('_');\n                        if (parts.Length >= 3 && long.TryParse(parts[parts.Length - 1], out long originalSize))\n                        {\n                            stats.TotalTiles++;\n                            stats.TotalOriginalSize += originalSize;\n                            stats.TotalCompressedSize += compressedSize;\n                        }\n                    }\n                    catch\n                    {\n                        // Dosya okunamazsa atla\n                    }\n                }\n\n                // Sıkıştırma oranını hesapla\n                if (stats.TotalOriginalSize > 0)\n                {\n                    stats.CompressionRatio = (double)stats.TotalCompressedSize / stats.TotalOriginalSize;\n                }\n\n                return stats;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to get compression stats: {ex.Message}");\n                return new TileCompressionStats();\n            }\n        }\n\n        /// <summary>\n        /// Eski sıkıştırılmış tile'ları temizle\n        /// </summary>\n        public async Task<int> CleanupOldTiles(int maxAgeDays = 30)\n        {\n            try\n            {\n                var cutoffDate = DateTime.Now.AddDays(-maxAgeDays);\n                var oldFiles = Directory.GetFiles(_compressedPath, "*.tile", SearchOption.AllDirectories)\n                    .Where(f => File.GetLastAccessTimeUtc(f) < cutoffDate)\n                    .ToArray();\n\n                foreach (var file in oldFiles)\n                {\n                    File.Delete(file);\n                }\n\n                _logger.LogInformation($"Cleaned up {oldFiles.Length} old compressed tiles");\n                return oldFiles.Length;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to cleanup old tiles: {ex.Message}");\n                return 0;\n            }\n        }\n\n        /// <summary>\n        /// Cache boyutunu optimize et\n        /// </summary>\n        public async Task<long> OptimizeCacheSize(long maxCacheSizeMB = 500)\n        {\n            try\n            {\n                var maxCacheSize = maxCacheSizeMB * 1024 * 1024;\n                var compressedFiles = Directory.GetFiles(_compressedPath, "*.tile", SearchOption.AllDirectories)\n                    .Select(f => new FileInfo(f))\n                    .OrderBy(f => f.LastAccessTimeUtc)\n                    .ToList();\n\n                var totalSize = compressedFiles.Sum(f => f.Length);\n                var removedSize = 0L;\n\n                // Cache boyutu aşılırsa eski dosyaları sil\n                if (totalSize > maxCacheSize)\n                {\n                    foreach (var file in compressedFiles)\n                    {\n                        if (totalSize <= maxCacheSize)\n                            break;\n\n                        removedSize += file.Length;\n                        totalSize -= file.Length;\n                        file.Delete();\n                    }\n                }\n\n                _logger.LogInformation($"Cache optimized: {removedSize / 1024 / 1024:F2} MB removed");\n                return removedSize;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to optimize cache: {ex.Message}");\n                return 0;\n            }\n        }\n\n        private string GetCompressedTilePath(string tileKey)\n        {\n            // Tile key'i klasör yapısına dönüştür (örn: 12/3456/7890 -> 12/34/56)\n            var parts = tileKey.Split('/');\n            if (parts.Length >= 3)\n            {\n                var z = parts[0];\n                var x = parts[1].PadLeft(4, '0');\n                var y = parts[2].PadLeft(4, '0');\n\n                return Path.Combine(_compressedPath, z, x.Substring(0, 2), x.Substring(2, 2), $"{x}_{y}.tile");\n            }\n\n            return Path.Combine(_compressedPath, $"{tileKey.Replace("/", "_")}.tile");\n        }\n    }\n\n    public class TileCompressionStats\n    {\n        public int TotalTiles { get; set; }\n        public long TotalOriginalSize { get; set; }\n        public long TotalCompressedSize { get; set; }\n        public double CompressionRatio { get; set; }\n        public double CacheHitRate { get; set; }\n\n        public string GetCompressionRatioString()\n        {\n            return $"{CompressionRatio:P2}";\n        }\n\n        public string GetTotalSavingsString()\n        {\n            var savings = TotalOriginalSize - TotalCompressedSize;\n            return $"{savings / 1024 / 1024:F2} MB";\n        }\n    }\n}\n