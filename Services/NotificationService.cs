using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Notification service for toast, push, and webhook notifications\n    /// Supports realtime delivery tracking and CI/CD integration\n    /// </summary>\n    public class NotificationService\n    {\n        private readonly ILogger<NotificationService> _logger;\n        private readonly HttpClient _httpClient;\n        private readonly string _logsPath;\n        private readonly bool _enablePushNotifications;\n        private readonly bool _enableWebhookNotifications;\n        private readonly int _maxRetries;\n        private readonly int _retryDelayMs;\n\n        public NotificationService(ILogger<NotificationService> logger)\n        {\n            _logger = logger;\n            _httpClient = new HttpClient();\n            _logsPath = Environment.GetEnvironmentVariable("NOTIFICATION_LOGS_PATH") ?? "logs/notifications";\n            _enablePushNotifications = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_PUSH_NOTIFICATIONS") ?? "true");\n            _enableWebhookNotifications = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_WEBHOOK_NOTIFICATIONS") ?? "true");\n            _maxRetries = int.Parse(Environment.GetEnvironmentVariable("NOTIFICATION_MAX_RETRIES") ?? "3");\n            _retryDelayMs = int.Parse(Environment.GetEnvironmentVariable("NOTIFICATION_RETRY_DELAY_MS") ?? "1000");\n\n            // Logs klasörünü oluştur\n            Directory.CreateDirectory(_logsPath);\n        }\n\n        /// <summary>\n        /// Toast notification gönder\n        /// </summary>\n        public async Task<NotificationResult> SendToastNotification(string title, string message, string? userId = null)\n        {\n            try\n            {\n                var notification = new ToastNotification\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    Title = title,\n                    Message = message,\n                    UserId = userId,\n                    Timestamp = DateTime.UtcNow,\n                    Type = NotificationType.Toast\n                };\n\n                // Toast notification'ı gönder (platform specific implementation)\n                var result = await SendToastInternal(notification);\n\n                await LogNotification(notification, result);\n\n                _logger.LogInformation($"Toast notification sent: {title} - Success: {result.Success}");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Toast notification failed: {ex.Message}");\n                return new NotificationResult { Success = false, ErrorMessage = ex.Message };\n            }\n        }\n\n        /// <summary>\n        /// Push notification gönder\n        /// </summary>\n        public async Task<NotificationResult> SendPushNotification(string title, string message, string deviceToken, string? userId = null)\n        {\n            if (!_enablePushNotifications)\n            {\n                return new NotificationResult { Success = false, ErrorMessage = "Push notifications are disabled" };\n            }\n\n            try\n            {\n                var notification = new PushNotification\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    Title = title,\n                    Message = message,\n                    DeviceToken = deviceToken,\n                    UserId = userId,\n                    Timestamp = DateTime.UtcNow,\n                    Type = NotificationType.Push\n                };\n\n                var result = await SendPushInternal(notification);\n                await LogNotification(notification, result);\n\n                _logger.LogInformation($"Push notification sent to {deviceToken} - Success: {result.Success}");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Push notification failed: {ex.Message}");\n                return new NotificationResult { Success = false, ErrorMessage = ex.Message };\n            }\n        }\n\n        /// <summary>\n        /// Webhook notification gönder\n        /// </summary>\n        public async Task<NotificationResult> SendWebhookNotification(string webhookUrl, object payload, string? userId = null)\n        {\n            if (!_enableWebhookNotifications)\n            {\n                return new NotificationResult { Success = false, ErrorMessage = "Webhook notifications are disabled" };\n            }\n\n            try\n            {\n                var notification = new WebhookNotification\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    WebhookUrl = webhookUrl,\n                    Payload = payload,\n                    UserId = userId,\n                    Timestamp = DateTime.UtcNow,\n                    Type = NotificationType.Webhook\n                };\n\n                var result = await SendWebhookInternal(notification);\n                await LogNotification(notification, result);\n\n                _logger.LogInformation($"Webhook notification sent to {webhookUrl} - Success: {result.Success}");\n\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Webhook notification failed: {ex.Message}");\n                return new NotificationResult { Success = false, ErrorMessage = ex.Message };\n            }\n        }\n\n        /// <summary>\n        /// Bulk notification gönder\n        /// </summary>\n        public async Task<List<NotificationResult>> SendBulkNotifications(List<NotificationRequest> requests)\n        {\n            var results = new List<NotificationResult>();\n\n            foreach (var request in requests)\n            {\n                NotificationResult result = null;\n\n                switch (request.Type)\n                {\n                    case NotificationType.Toast:\n                        if (request.Title != null && request.Message != null)\n                        {\n                            result = await SendToastNotification(request.Title, request.Message, request.UserId);\n                        }\n                        break;\n                    case NotificationType.Push:\n                        if (request.Title != null && request.Message != null && request.DeviceToken != null)\n                        {\n                            result = await SendPushNotification(request.Title, request.Message, request.DeviceToken, request.UserId);\n                        }\n                        break;\n                    case NotificationType.Webhook:\n                        if (request.WebhookUrl != null && request.Payload != null)\n                        {\n                            result = await SendWebhookNotification(request.WebhookUrl, request.Payload, request.UserId);\n                        }\n                        break;\n                }\n\n                if (result != null)\n                {\n                    results.Add(result);\n                }\n\n                // Rate limiting için kısa gecikme\n                await Task.Delay(100);\n            }\n\n            return results;\n        }\n\n        /// <summary>\n        /// Notification geçmişini al\n        /// </summary>\n        public async Task<List<NotificationLog>> GetNotificationHistory(string? userId = null, DateTime? startDate = null, DateTime? endDate = null)\n        {\n            try\n            {\n                var logFiles = Directory.GetFiles(_logsPath, "notification-*.json")\n                    .Where(f => !startDate.HasValue || File.GetCreationTime(f) >= startDate.Value)\n                    .Where(f => !endDate.HasValue || File.GetCreationTime(f) <= endDate.Value)\n                    .OrderByDescending(f => File.GetCreationTime(f))\n                    .Take(100); // Son 100 log dosyasını al\n\n                var history = new List<NotificationLog>();\n\n                foreach (var logFile in logFiles)\n                {\n                    try\n                    {\n                        var content = await File.ReadAllTextAsync(logFile);\n                        var logs = JsonSerializer.Deserialize<List<NotificationLog>>(content);\n\n                        if (logs != null)\n                        {\n                            var filteredLogs = logs.Where(l => userId == null || l.UserId == userId).ToList();\n                            history.AddRange(filteredLogs);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning($"Failed to read notification log {logFile}: {ex.Message}");\n                    }\n                }\n\n                return history.OrderByDescending(l => l.Timestamp).Take(1000).ToList();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to get notification history: {ex.Message}");\n                return new List<NotificationLog>();\n            }\n        }\n\n        /// <summary>\n        /// Notification istatistiklerini al\n        /// </summary>\n        public async Task<NotificationStats> GetNotificationStats(DateTime? startDate = null, DateTime? endDate = null)\n        {\n            var history = await GetNotificationHistory(null, startDate, endDate);\n\n            return new NotificationStats\n            {\n                TotalNotifications = history.Count,\n                SuccessfulNotifications = history.Count(l => l.Success),\n                FailedNotifications = history.Count(l => !l.Success),\n                ToastNotifications = history.Count(l => l.Type == NotificationType.Toast),\n                PushNotifications = history.Count(l => l.Type == NotificationType.Push),\n                WebhookNotifications = history.Count(l => l.Type == NotificationType.Webhook),\n                SuccessRate = history.Count > 0 ? (double)history.Count(l => l.Success) / history.Count * 100 : 0,\n                PeriodStart = startDate ?? history.Min(l => l.Timestamp),\n                PeriodEnd = endDate ?? history.Max(l => l.Timestamp)\n            };\n        }\n\n        /// <summary>\n        /// Internal toast notification gönderme\n        /// </summary>\n        private async Task<NotificationResult> SendToastInternal(ToastNotification notification)\n        {\n            // Platform specific toast implementation\n            // Bu örnekte basit bir simulasyon\n            await Task.Delay(100); // Simüle edilmiş delay\n\n            var success = new Random().NextDouble() > 0.1; // %90 başarı oranı\n\n            return new NotificationResult\n            {\n                Success = success,\n                NotificationId = notification.Id,\n                DeliveryTime = DateTime.UtcNow,\n                ErrorMessage = success ? null! : "Toast notification delivery failed"\n            };\n        }\n\n        /// <summary>\n        /// Internal push notification gönderme\n        /// </summary>\n        private async Task<NotificationResult> SendPushInternal(PushNotification notification)\n        {\n            // Push notification service integration (FCM, APNS, etc.)\n            await Task.Delay(200); // Simüle edilmiş delay\n\n            var success = new Random().NextDouble() > 0.15; // %85 başarı oranı\n\n            return new NotificationResult\n            {\n                Success = success,\n                NotificationId = notification.Id,\n                DeliveryTime = DateTime.UtcNow,\n                ErrorMessage = success ? null! : "Push notification delivery failed"\n            };\n        }\n\n        /// <summary>\n        /// Internal webhook notification gönderme\n        /// </summary>\n        private async Task<NotificationResult> SendWebhookInternal(WebhookNotification notification)\n        {\n            try\n            {\n                var jsonPayload = JsonSerializer.Serialize(notification.Payload);\n                var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");\n\n                var response = await _httpClient.PostAsync(notification.WebhookUrl, content);\n                var success = response.IsSuccessStatusCode;\n\n                return new NotificationResult\n                {\n                    Success = success,\n                    NotificationId = notification.Id,\n                    DeliveryTime = DateTime.UtcNow,\n                    ErrorMessage = success ? null! : $"Webhook failed: {response.StatusCode}"\n                };\n            }\n            catch (Exception ex)\n            {\n                return new NotificationResult\n                {\n                    Success = false,\n                    NotificationId = notification.Id,\n                    DeliveryTime = DateTime.UtcNow,\n                    ErrorMessage = $"Webhook error: {ex.Message}"\n                };\n            }\n        }\n\n        /// <summary>\n        /// Notification'ı logla\n        /// </summary>\n        private async Task LogNotification(BaseNotification notification, NotificationResult result)\n        {\n            try\n            {\n                var logEntry = new NotificationLog\n                {\n                    Id = notification.Id,\n                    Type = notification.Type,\n                    UserId = notification.UserId,\n                    Title = notification is ToastNotification toast ? toast.Title :\n                           notification is PushNotification push ? push.Title : null!,\n                    Message = notification is ToastNotification toastMsg ? toastMsg.Message :\n                             notification is PushNotification pushMsg ? pushMsg.Message : null!,\n                    Timestamp = notification.Timestamp,\n                    Success = result.Success,\n                    ErrorMessage = result.ErrorMessage,\n                    DeliveryTime = result.DeliveryTime\n                };\n\n                var logFile = Path.Combine(_logsPath, $"notification-{DateTime.UtcNow:yyyy-MM-dd}.json");\n\n                List<NotificationLog> existingLogs = new List<NotificationLog>();\n\n                if (File.Exists(logFile))\n                {\n                    try\n                    {\n                        var content = await File.ReadAllTextAsync(logFile);\n                        existingLogs = JsonSerializer.Deserialize<List<NotificationLog>>(content) ?? new List<NotificationLog>();\n                    }\n                    catch\n                    {\n                        // Log dosyası bozuk ise yeni liste oluştur\n                    }\n                }\n\n                existingLogs.Add(logEntry);\n\n                var json = JsonSerializer.Serialize(existingLogs, new JsonSerializerOptions\n                {\n                    WriteIndented = true,\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                });\n\n                await File.WriteAllTextAsync(logFile, json);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to log notification: {ex.Message}");\n            }\n        }\n    }\n\n    public class NotificationRequest\n    {\n        public NotificationType Type { get; set; }\n        public string? Title { get; set; }\n        public string? Message { get; set; }\n        public string? UserId { get; set; }\n        public string? DeviceToken { get; set; }\n        public string? WebhookUrl { get; set; }\n        public object? Payload { get; set; }\n    }\n\n    public class NotificationResult\n    {\n        public bool Success { get; set; }\n        public string? NotificationId { get; set; }\n        public DateTime DeliveryTime { get; set; }\n        public string? ErrorMessage { get; set; }\n    }\n\n    public class NotificationStats\n    {\n        public int TotalNotifications { get; set; }\n        public int SuccessfulNotifications { get; set; }\n        public int FailedNotifications { get; set; }\n        public int ToastNotifications { get; set; }\n        public int PushNotifications { get; set; }\n        public int WebhookNotifications { get; set; }\n        public double SuccessRate { get; set; }\n        public DateTime PeriodStart { get; set; }\n        public DateTime PeriodEnd { get; set; }\n    }\n\n    public class NotificationLog\n    {\n        public string? Id { get; set; }\n        public NotificationType Type { get; set; }\n        public string? UserId { get; set; }\n        public string? Title { get; set; }\n        public string? Message { get; set; }\n        public DateTime Timestamp { get; set; }\n        public bool Success { get; set; }\n        public string? ErrorMessage { get; set; }\n        public DateTime? DeliveryTime { get; set; }\n    }\n\n    public abstract class BaseNotification\n    {\n        public string? Id { get; set; }\n        public NotificationType Type { get; set; }\n        public string? UserId { get; set; }\n        public DateTime Timestamp { get; set; }\n    }\n\n    public class ToastNotification : BaseNotification\n    {\n        public string? Title { get; set; }\n        public string? Message { get; set; }\n    }\n\n    public class PushNotification : BaseNotification\n    {\n        public string? Title { get; set; }\n        public string? Message { get; set; }\n        public string? DeviceToken { get; set; }\n    }\n\n    public class WebhookNotification : BaseNotification\n    {\n        public string? WebhookUrl { get; set; }\n        public object? Payload { get; set; }\n    }\n\n    public enum NotificationType\n    {\n        Toast,\n        Push,\n        Webhook\n    }\n}\n