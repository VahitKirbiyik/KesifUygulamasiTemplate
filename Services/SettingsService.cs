using System;\nusing Microsoft.Maui.Storage;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class SettingsService\n    {\n        public T GetSetting<T>(string key, T defaultValue)\n        {\n            try\n            {\n                if (Preferences.Default.ContainsKey(key))\n                {\n                    if (typeof(T) == typeof(string))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (string)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(int))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (int)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(bool))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (bool)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(double))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (double)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(float))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (float)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(long))\n                    {\n                        return (T)(object)Preferences.Default.Get(key, (long)(object)defaultValue);\n                    }\n                    else if (typeof(T) == typeof(DateTime))\n                    {\n                        var ticks = Preferences.Default.Get(key, ((DateTime)(object)defaultValue).Ticks);\n                        return (T)(object)new DateTime(ticks);\n                    }\n                }\n\n                return defaultValue;\n            }\n            catch (Exception)\n            {\n                return defaultValue;\n            }\n        }\n\n        public void SaveSetting<T>(string key, T value)\n        {\n            try\n            {\n                if (typeof(T) == typeof(string))\n                {\n                    Preferences.Default.Set(key, (string)(object)value);\n                }\n                else if (typeof(T) == typeof(int))\n                {\n                    Preferences.Default.Set(key, (int)(object)value);\n                }\n                else if (typeof(T) == typeof(bool))\n                {\n                    Preferences.Default.Set(key, (bool)(object)value);\n                }\n                else if (typeof(T) == typeof(double))\n                {\n                    Preferences.Default.Set(key, (double)(object)value);\n                }\n                else if (typeof(T) == typeof(float))\n                {\n                    Preferences.Default.Set(key, (float)(object)value);\n                }\n                else if (typeof(T) == typeof(long))\n                {\n                    Preferences.Default.Set(key, (long)(object)value);\n                }\n                else if (typeof(T) == typeof(DateTime))\n                {\n                    Preferences.Default.Set(key, ((DateTime)(object)value).Ticks);\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Error saving setting: {ex.Message}");\n            }\n        }\n\n        public void RemoveSetting(string key)\n        {\n            try\n            {\n                if (Preferences.Default.ContainsKey(key))\n                {\n                    Preferences.Default.Remove(key);\n                }\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Error removing setting: {ex.Message}");\n            }\n        }\n\n        public void ClearAllSettings()\n        {\n            try\n            {\n                Preferences.Default.Clear();\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Error clearing settings: {ex.Message}");\n            }\n        }\n    }\n}\n