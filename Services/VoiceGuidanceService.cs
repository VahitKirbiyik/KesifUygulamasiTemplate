using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Linq;\nusing Microsoft.Maui.Media;\nusing Microsoft.Maui.Controls;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Turn-by-turn navigasyon adımlarını sesli olarak oynatan servis\n    /// Android TTS API ve platform bağımsız TextToSpeech kullanır\n    /// </summary>\n    public class VoiceGuidanceService\n    {\n        private readonly NavigationVoiceService _voiceService;\n        private readonly SettingsService _settingsService;\n        private bool _isVoiceEnabled = true;\n        private bool _isCurrentlySpeaking = false;\n        private Queue<string> _speechQueue = new Queue<string>();\n\n        public bool IsVoiceEnabled\n        {\n            get => _isVoiceEnabled;\n            set\n            {\n                _isVoiceEnabled = value;\n                OnVoiceSettingsChanged?.Invoke(this, EventArgs.Empty);\n            }\n        }\n\n        public event EventHandler? OnVoiceSettingsChanged;\n        public event EventHandler<string>? OnSpeechStarted;\n        public event EventHandler<string>? OnSpeechCompleted;\n\n        public VoiceGuidanceService(NavigationVoiceService voiceService, SettingsService settingsService)\n        {\n            _voiceService = voiceService ?? throw new ArgumentNullException(nameof(voiceService));\n            _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));\n\n            // Ayarları yükle\n            LoadVoiceSettings();\n        }\n\n        /// <summary>\n        /// Ses ayarlarını yükler\n        /// </summary>\n        private void LoadVoiceSettings()\n        {\n            try\n            {\n                // SettingsService'den ses ayarlarını yükle\n                _isVoiceEnabled = _settingsService.GetSetting<bool>("VoiceGuidanceEnabled", true);\n            }\n            catch\n            {\n                // Varsayılan değerleri kullan\n                _isVoiceEnabled = true;\n            }\n        }\n\n        /// <summary>\n        /// Ses ayarlarını kaydeder\n        /// </summary>\n        public void SaveVoiceSettings()\n        {\n            try\n            {\n                _settingsService.SaveSetting<bool>("VoiceGuidanceEnabled", _isVoiceEnabled);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Ses ayarları kaydedilirken hata: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Turn-by-turn navigasyon adımını sesli olarak oynatır\n        /// </summary>\n        public async Task SpeakNavigationStepAsync(NavigationStep step)\n        {\n            if (!IsVoiceEnabled || step == null)\n                return;\n\n            string speechText = GenerateSpeechText(step);\n            await SpeakTextAsync(speechText);\n        }\n\n        /// <summary>\n        /// Birden fazla navigasyon adımını sırayla sesli olarak oynatır\n        /// </summary>\n        public async Task SpeakNavigationStepsAsync(IEnumerable<NavigationStep> steps)\n        {\n            if (!IsVoiceEnabled || steps == null)\n                return;\n\n            foreach (var step in steps)\n            {\n                await SpeakNavigationStepAsync(step);\n\n                // Adımlar arası kısa bekleme\n                await Task.Delay(500);\n            }\n        }\n\n        /// <summary>\n        /// Özel metni sesli olarak oynatır\n        /// </summary>\n        public async Task SpeakTextAsync(string text)\n        {\n            if (!IsVoiceEnabled || string.IsNullOrWhiteSpace(text))\n                return;\n\n            try\n            {\n                OnSpeechStarted?.Invoke(this, text);\n\n                await _voiceService.SpeakAsync(text);\n\n                OnSpeechCompleted?.Invoke(this, text);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Ses oynatma hatası: {ex.Message}");\n\n                // Fallback olarak basit mesaj göster\n                if (Application.Current?.MainPage != null)\n                {\n                    await Application.Current.MainPage.DisplayAlert("Ses Hatası",\n                        "Sesli yönlendirme oynatılamadı. Lütfen TTS ayarlarınızı kontrol edin.", "Tamam");\n                }\n            }\n        }\n\n        /// <summary>\n        /// Navigasyon adımından konuşma metni üretir\n        /// </summary>\n        private string GenerateSpeechText(NavigationStep step)\n        {\n            if (step == null)\n                return string.Empty;\n\n            string direction = GetDirectionText(step.Maneuver);\n            string distance = FormatDistance(step.Distance);\n            string street = string.IsNullOrWhiteSpace(step.StreetName) ? "" : $" {step.StreetName}";\n\n            if (step.Distance < 50) // Çok yakınsa sadece yön bilgisi ver\n            {\n                return $"{direction}{street}";\n            }\n            else if (step.Distance < 500) // Orta mesafe\n            {\n                return $"{distance} sonra {direction}{street}";\n            }\n            else // Uzun mesafe\n            {\n                return $"{distance} sonra {direction}{street}";\n            }\n        }\n\n        /// <summary>\n        /// Maneuver tipinden Türkçe yön metni üretir\n        /// </summary>\n        private string GetDirectionText(string maneuver)\n        {\n            if (string.IsNullOrEmpty(maneuver))\n                return "devam edin";\n\n            return maneuver.ToLower() switch\n            {\n                "turn-left" => "sola dönün",\n                "turn-right" => "sağa dönün",\n                "turn-slight-left" => "hafif sola dönün",\n                "turn-slight-right" => "hafif sağa dönün",\n                "turn-sharp-left" => "keskin sola dönün",\n                "turn-sharp-right" => "keskin sağa dönün",\n                "u-turn" => "dönüş yapın",\n                "straight" => "düz devam edin",\n                "roundabout" => "çevirmeye girin",\n                "merge" => "birleşin",\n                "fork-left" => "soldaki yola girin",\n                "fork-right" => "sağdaki yola girin",\n                "ramp-left" => "soldaki rampa",\n                "ramp-right" => "sağdaki rampa",\n                "keep-left" => "solda kalın",\n                "keep-right" => "sağda kalın",\n                _ => "devam edin"\n            };\n        }\n\n        /// <summary>\n        /// Mesafeyi kullanıcı dostu formata çevirir\n        /// </summary>\n        private string FormatDistance(double distanceInMeters)\n        {\n            if (distanceInMeters < 100)\n            {\n                return $"{Math.Round(distanceInMeters)} metre";\n            }\n            else if (distanceInMeters < 1000)\n            {\n                return $"{Math.Round(distanceInMeters / 10) * 10} metre";\n            }\n            else\n            {\n                double km = distanceInMeters / 1000;\n                return $"{km:F1} kilometre";\n            }\n        }\n\n        /// <summary>\n        /// Sesli yönlendirmeyi durdurur\n        /// </summary>\n        public void StopSpeaking()\n        {\n            // TextToSpeech.Default'te stop metodu yok, ancak gelecek sürümlerde eklenebilir\n            _speechQueue.Clear();\n        }\n\n        /// <summary>\n        /// Mevcut konuşma durumunu döndürür\n        /// </summary>\n        public bool IsSpeaking => _isCurrentlySpeaking;\n\n        /// <summary>\n        /// Kullanılabilir ses dillerini döndürür\n        /// </summary>\n        public async Task<string[]> GetAvailableVoicesAsync()\n        {\n            try\n            {\n                return await _voiceService.GetAvailableLocalesAsync();\n            }\n            catch\n            {\n                return new[] { "tr", "en" }; // Fallback\n            }\n        }\n\n        /// <summary>\n        /// Tercih edilen ses dilini ayarlar\n        /// </summary>\n        public async Task SetPreferredVoiceAsync(string locale)\n        {\n            try\n            {\n                await _voiceService.SetPreferredLocaleAsync(locale);\n                _settingsService.SaveSetting<string>("PreferredVoiceLocale", locale);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Ses dili ayarlanırken hata: {ex.Message}");\n            }\n        }\n    }\n\n    /// <summary>\n    /// Navigasyon adımı modeli\n    /// </summary>\n    public class NavigationStep\n    {\n        public string Maneuver { get; set; } = "";\n        public double Distance { get; set; } // Metre cinsinden\n        public string StreetName { get; set; } = "";\n        public TimeSpan Duration { get; set; }\n        public string Instruction { get; set; } = "";\n    }\n}\n