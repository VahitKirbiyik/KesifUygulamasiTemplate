using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing SQLite;\nusing Microsoft.Maui.Devices.Sensors;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Offline rota servisi - SQLite veritabanı ile rota depolama ve A* algoritması ile rota hesaplama\n    /// </summary>\n    public class OfflineRouteService : IOfflineRouteService\n    {\n        private readonly SQLiteConnection _database;\n        private readonly string _dbPath;\n\n        public OfflineRouteService()\n        {\n            _dbPath = Path.Combine(FileSystem.AppDataDirectory, "offline_routes.db");\n            _database = new SQLiteConnection(_dbPath);\n\n            // Veritabanı tablolarını oluştur\n            InitializeDatabase();\n        }\n\n        /// <summary>\n        /// Veritabanı tablolarını oluşturur\n        /// </summary>\n        private void InitializeDatabase()\n        {\n            _database.CreateTable<KesifUygulamasiTemplate.Models.SavedRoute>();\n            _database.CreateTable<KesifUygulamasiTemplate.Models.RoutePoint>();\n        }\n\n        /// <summary>\n        /// Belirtilen ID'ye sahip rota var mı kontrol eder\n        /// </summary>\n        public async Task<bool> HasOfflineRouteAsync(string routeId)\n        {\n            await Task.Yield(); // UI thread'i bloklamamak için\n\n            if (int.TryParse(routeId, out int id))\n            {\n                var route = _database.Table<KesifUygulamasiTemplate.Models.SavedRoute>().FirstOrDefault(r => ((KesifUygulamasiTemplate.Models.SavedRoute)r).Id == id);\n                return route != null;\n            }\n\n            return false;\n        }\n\n        /// <summary>\n        /// Rotayı veritabanına kaydeder\n        /// </summary>\n        public async Task<string> SaveRouteAsync(Route route)\n        {\n            await Task.Yield();\n\n            try\n            {\n                // SavedRoute oluştur\n                var savedRoute = new KesifUygulamasiTemplate.Models.SavedRoute\n                {\n                    Name = $"Route {DateTime.Now:yyyy-MM-dd HH:mm}",\n                    Description = $"From {route.Start.Latitude:F4}, {route.Start.Longitude:F4} to {route.End.Latitude:F4}, {route.End.Longitude:F4}",\n                    StartLatitude = route.Start.Latitude,\n                    StartLongitude = route.Start.Longitude,\n                    EndLatitude = route.End.Latitude,\n                    EndLongitude = route.End.Longitude,\n                    DistanceKm = route.DistanceKm,\n                    EstimatedDuration = route.Duration,\n                    TransportMode = route.TransportMode.ToString(),\n                    Points = route.Path ?? new List<Location>(),\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                // Rotayı kaydet\n                var routeId = _database.Insert(savedRoute);\n\n                // Rota noktalarını kaydet\n                if (route.Path != null && route.Path.Count > 0)\n                {\n                    for (int i = 0; i < route.Path.Count; i++)\n                    {\n                        var point = new RoutePoint\n                        {\n                            RouteId = routeId,\n                            Latitude = route.Path[i].Latitude,\n                            Longitude = route.Path[i].Longitude,\n                            Sequence = i\n                        };\n                        _database.Insert(point);\n                    }\n                }\n\n                return routeId.ToString();\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Rota kaydetme hatası: {ex.Message}");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Belirtilen ID'ye sahip rotayı yükler\n        /// </summary>\n        public async Task<Route> LoadRouteAsync(string routeId)\n        {\n            await Task.Yield();\n\n            try\n            {\n                if (!int.TryParse(routeId, out int id))\n                {\n                    throw new ArgumentException("Geçersiz rota ID");\n                }\n\n                // SavedRoute'u al\n                var savedRoute = _database.Table<SavedRoute>().FirstOrDefault(r => r.Id == id);\n                if (savedRoute == null)\n                {\n                    throw new KeyNotFoundException($"Rota bulunamadı: {routeId}");\n                }\n\n                // Rota noktalarını al\n                var routePoints = _database.Table<RoutePoint>()\n                    .Where(p => p.RouteId == id)\n                    .OrderBy(p => p.Sequence)\n                    .ToList();\n\n                // Route nesnesini oluştur\n                var route = new Route\n                {\n                    RouteId = routeId,\n                    Start = new Location(savedRoute.StartLatitude, savedRoute.StartLongitude),\n                    End = new Location(savedRoute.EndLatitude, savedRoute.EndLongitude),\n                    Path = routePoints.Select(p => new Location(p.Latitude, p.Longitude)).ToList(),\n                    DistanceKm = savedRoute.DistanceKm,\n                    Duration = savedRoute.EstimatedDuration,\n                    TransportMode = Enum.Parse<TransportMode>(savedRoute.TransportMode)\n                };\n\n                return route;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Rota yükleme hatası: {ex.Message}");\n                throw;\n            }\n        }\n\n        /// <summary>\n        /// Tüm kaydedilmiş rotaları listeler\n        /// </summary>\n        public async Task<List<Route>> GetAllSavedRoutesAsync()\n        {\n            await Task.Yield();\n\n            try\n            {\n                var savedRoutes = _database.Table<SavedRoute>().ToList();\n                var routes = new List<Route>();\n\n                foreach (var savedRoute in savedRoutes)\n                {\n                    try\n                    {\n                        var route = await LoadRouteAsync(savedRoute.Id.ToString());\n                        routes.Add(route);\n                    }\n                    catch (Exception ex)\n                    {\n                        System.Diagnostics.Debug.WriteLine($"Rota yükleme hatası ({savedRoute.Id}): {ex.Message}");\n                    }\n                }\n\n                return routes;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Rota listesi alma hatası: {ex.Message}");\n                return new List<Route>();\n            }\n        }\n\n        /// <summary>\n        /// İki koordinat arası en kısa rotayı hesaplar (A* algoritması)\n        /// </summary>\n        public async Task<Route> CalculateOfflineRouteAsync(Location start, Location end, List<RoutePoint> availablePoints)\n        {\n            await Task.Yield();\n\n            try\n            {\n                if (availablePoints == null || availablePoints.Count == 0)\n                {\n                    // Hiç nokta yoksa basit doğrusal rota oluştur\n                    return CreateSimpleRoute(start, end);\n                }\n\n                // A* algoritması ile en kısa rotayı hesapla\n                var routePoints = await CalculateShortestPath(start, end, availablePoints);\n\n                // Route nesnesini oluştur\n                var route = new Route\n                {\n                    RouteId = Guid.NewGuid().ToString(),\n                    Start = start,\n                    End = end,\n                    Path = routePoints,\n                    DistanceKm = CalculateTotalDistance(routePoints),\n                    Duration = CalculateEstimatedDuration(routePoints, TransportMode.Driving),\n                    TransportMode = TransportMode.Driving\n                };\n\n                return route;\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Offline rota hesaplama hatası: {ex.Message}");\n                // Hata durumunda basit rota döndür\n                return CreateSimpleRoute(start, end);\n            }\n        }\n\n        /// <summary>\n        /// A* algoritması ile en kısa yolu hesaplar\n        /// </summary>\n        private async Task<List<Location>> CalculateShortestPath(Location start, Location end, List<RoutePoint> availablePoints)\n        {\n            await Task.Yield();\n\n            var path = new List<Location> { start };\n\n            // Basit yaklaşım: Mevcut noktaları kullanarak yaklaşık rota oluştur\n            // Gerçek A* implementasyonu için daha karmaşık bir yapı gerekli\n\n            // Başlangıç ve bitiş noktalarına en yakın noktaları bul\n            var nearestToStart = FindNearestPoint(start, availablePoints);\n            var nearestToEnd = FindNearestPoint(end, availablePoints);\n\n            if (nearestToStart != null)\n            {\n                path.Add(new Location(nearestToStart.Latitude, nearestToStart.Longitude));\n            }\n\n            // Ara noktaları ekle (basit yaklaşım)\n            var intermediatePoints = availablePoints\n                .Where(p => p != nearestToStart && p != nearestToEnd)\n                .OrderBy(p => CalculateDistance(start, new Location(p.Latitude, p.Longitude)))\n                .Take(5) // En fazla 5 ara nokta\n                .ToList();\n\n            foreach (var point in intermediatePoints)\n            {\n                path.Add(new Location(point.Latitude, point.Longitude));\n            }\n\n            if (nearestToEnd != null && nearestToEnd != nearestToStart)\n            {\n                path.Add(new Location(nearestToEnd.Latitude, nearestToEnd.Longitude));\n            }\n\n            path.Add(end);\n\n            return path;\n        }\n\n        /// <summary>\n        /// Verilen konuma en yakın noktayı bulur\n        /// </summary>\n        private RoutePoint? FindNearestPoint(Location location, List<RoutePoint> points)\n        {\n            if (points == null || points.Count == 0)\n                return null;\n\n            RoutePoint? nearest = null;\n            double minDistance = double.MaxValue;\n\n            foreach (var point in points)\n            {\n                var pointLocation = new Location(point.Latitude, point.Longitude);\n                var distance = CalculateDistance(location, pointLocation);\n\n                if (distance < minDistance)\n                {\n                    minDistance = distance;\n                    nearest = point;\n                }\n            }\n\n            return nearest;\n        }\n\n        /// <summary>\n        /// İki konum arası mesafeyi hesaplar (Haversine formülü)\n        /// </summary>\n        private double CalculateDistance(Location loc1, Location loc2)\n        {\n            const double EarthRadiusKm = 6371.0;\n\n            var lat1 = loc1.Latitude * Math.PI / 180.0;\n            var lon1 = loc1.Longitude * Math.PI / 180.0;\n            var lat2 = loc2.Latitude * Math.PI / 180.0;\n            var lon2 = loc2.Longitude * Math.PI / 180.0;\n\n            var dLat = lat2 - lat1;\n            var dLon = lon2 - lon1;\n\n            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\n                    Math.Cos(lat1) * Math.Cos(lat2) *\n                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\n\n            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n\n            return EarthRadiusKm * c;\n        }\n\n        /// <summary>\n        /// Rota noktalarının toplam mesafesini hesaplar\n        /// </summary>\n        private double CalculateTotalDistance(List<Location> points)\n        {\n            if (points == null || points.Count < 2)\n                return 0;\n\n            double totalDistance = 0;\n            for (int i = 0; i < points.Count - 1; i++)\n            {\n                totalDistance += CalculateDistance(points[i], points[i + 1]);\n            }\n\n            return totalDistance;\n        }\n\n        /// <summary>\n        /// Rota için tahmini süreyi hesaplar\n        /// </summary>\n        private TimeSpan CalculateEstimatedDuration(List<Location> points, TransportMode mode)\n        {\n            var totalDistance = CalculateTotalDistance(points);\n\n            // Ortalama hızlara göre süre hesapla (km/saat)\n            double averageSpeedKmh = mode switch\n            {\n                TransportMode.Walking => 5.0,\n                TransportMode.Bicycling => 15.0,\n                TransportMode.Driving => 50.0,\n                TransportMode.Transit => 30.0,\n                _ => 30.0\n            };\n\n            var hours = totalDistance / averageSpeedKmh;\n            return TimeSpan.FromHours(hours);\n        }\n\n        /// <summary>\n        /// Basit doğrusal rota oluşturur (fallback)\n        /// </summary>\n        private Route CreateSimpleRoute(Location start, Location end)\n        {\n            var path = new List<Location> { start };\n\n            // 10 ara nokta oluştur\n            const int steps = 10;\n            for (int i = 1; i < steps; i++)\n            {\n                var factor = (double)i / steps;\n                var lat = start.Latitude + (end.Latitude - start.Latitude) * factor;\n                var lng = start.Longitude + (end.Longitude - start.Longitude) * factor;\n                path.Add(new Location(lat, lng));\n            }\n\n            path.Add(end);\n\n            return new Route\n            {\n                RouteId = Guid.NewGuid().ToString(),\n                Start = start,\n                End = end,\n                Path = path,\n                DistanceKm = CalculateTotalDistance(path),\n                Duration = CalculateEstimatedDuration(path, TransportMode.Driving),\n                TransportMode = TransportMode.Driving\n            };\n        }\n\n        /// <summary>\n        /// Veritabanı bağlantısını kapatır\n        /// </summary>\n        public void Dispose()\n        {\n            _database?.Close();\n        }\n    }\n}\n