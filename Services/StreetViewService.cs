using System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.Maui.Storage;\nusing System;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Helpers;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class StreetViewService : IStreetViewService\n    {\n        private readonly HttpClient _httpClient = new HttpClient();\n        private readonly ConfigurationService _configurationService;\n\n        public StreetViewService(ConfigurationService configurationService)\n        {\n            _configurationService = configurationService;\n        }\n\n        public Task<string> GetApiKeyAsync()\n        {\n            var key = _configurationService.GoogleMapsApiKey;\n            if (string.IsNullOrWhiteSpace(key))\n                throw new Exception("API Key bulunamadı!");\n            return Task.FromResult(key);\n        }\n\n        public async Task<StreetViewPanorama> GetPanoramaAsync(string location)\n        {\n            // Location'dan latitude ve longitude çıkar\n            var parts = location.Split(',');\n            if (parts.Length != 2 || !double.TryParse(parts[0], out var lat) || !double.TryParse(parts[1], out var lng))\n            {\n                throw new ArgumentException("Invalid location format. Expected 'latitude,longitude'");\n            }\n            return await GetPanorama(lat, lng);\n        }\n\n        public async Task<StreetViewPanorama> GetPanorama(double latitude, double longitude)\n        {\n            try\n            {\n                var apiKey = await GetApiKeyAsync();\n                var url = $"https://maps.googleapis.com/maps/api/streetview/metadata?location={latitude},{longitude}&key={apiKey}";\n                var response = await _httpClient.GetStringAsync(url);\n                var json = JsonSerializer.Deserialize<JsonElement>(response);\n\n                // Generate unique ID for the panorama\n                var panoramaId = $"pano_{latitude}_{longitude}_{DateTime.Now.Ticks}";\n\n                // Create Street View image URL\n                var imageUrl = $"https://maps.googleapis.com/maps/api/streetview?size=600x400&location={latitude},{longitude}&key={apiKey}";\n\n                var panorama = new StreetViewPanorama\n                {\n                    Id = panoramaId,\n                    Latitude = latitude,\n                    Longitude = longitude,\n                    ImageUrl = imageUrl,\n                    Description = $"Street View at {latitude:F6}, {longitude:F6}",\n                    Copyright = json.TryGetProperty("copyright", out var c) ? c.GetString() ?? "" : "",\n                    DateCaptured = json.TryGetProperty("date_captured", out var d) && d.GetString() is string dateStr ? DateTime.Parse(dateStr) : null,\n                    Links = new List<StreetViewLink>()\n                };\n\n                // Add sample navigation links (in a real implementation, these would come from the API)\n                await AddNavigationLinksAsync(panorama, apiKey);\n\n                return panorama;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception($"Panorama alınamadı: {ex.Message}");\n            }\n        }\n\n        public async Task<StreetViewPanorama> GetPanoramaByIdAsync(string panoramaId)\n        {\n            try\n            {\n                // In a real implementation, this would fetch from a database or API\n                // For now, return a sample panorama\n                var sampleLat = 40.7128;\n                var sampleLng = -74.0060;\n\n                var apiKey = await GetApiKeyAsync();\n                var imageUrl = $"https://maps.googleapis.com/maps/api/streetview?size=600x400&location={sampleLat},{sampleLng}&key={apiKey}";\n\n                var panorama = new StreetViewPanorama\n                {\n                    Id = panoramaId,\n                    Latitude = sampleLat,\n                    Longitude = sampleLng,\n                    ImageUrl = imageUrl,\n                    Description = $"Street View panorama {panoramaId}",\n                    Links = new List<StreetViewLink>()\n                };\n\n                await AddNavigationLinksAsync(panorama, apiKey);\n                return panorama;\n            }\n            catch (Exception ex)\n            {\n                throw new Exception($"Panorama ID ile yüklenemedi: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Adds navigation links to a panorama (simulated for demo purposes)\n        /// </summary>\n        private async Task AddNavigationLinksAsync(StreetViewPanorama panorama, string apiKey)\n        {\n            // In a real implementation, these would come from Google Street View API\n            // For demo purposes, we'll create sample navigation links\n\n            var directions = new[]\n            {\n                new { Bearing = 0.0, Description = "North", Distance = 50.0 },\n                new { Bearing = 90.0, Description = "East", Distance = 75.0 },\n                new { Bearing = 180.0, Description = "South", Distance = 60.0 },\n                new { Bearing = 270.0, Description = "West", Distance = 45.0 }\n            };\n\n            foreach (var dir in directions)\n            {\n                // Calculate approximate coordinates for the linked panorama\n                var distance = dir.Distance / 111000; // Convert meters to degrees (approximate)\n                var bearingRad = dir.Bearing * Math.PI / 180;\n\n                var newLat = panorama.Latitude + distance * Math.Cos(bearingRad);\n                var newLng = panorama.Longitude + distance * Math.Sin(bearingRad) / Math.Cos(panorama.Latitude * Math.PI / 180);\n\n                var linkId = $"link_{panorama.Id}_{dir.Bearing}";\n\n                var link = new StreetViewLink(\n                    fromId: panorama.Id,\n                    toId: linkId,\n                    bearing: dir.Bearing,\n                    description: dir.Description,\n                    distance: dir.Distance\n                );\n\n                panorama.Links.Add(link);\n            }\n\n            await Task.CompletedTask; // Make method async\n        }\n    }\n}\n