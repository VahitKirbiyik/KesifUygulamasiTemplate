using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Storage;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Offline harita tile caching servisi\n    /// Harita tiles'larını indirip offline kullanım için saklar\n    /// </summary>\n    public class OfflineMapTileService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly DatabaseService _databaseService;\n        private readonly ConnectivityService _connectivityService;\n        private const string TILE_CACHE_DIR = "maptiles";\n        private const int MAX_ZOOM_LEVEL = 16;\n        private const int MIN_ZOOM_LEVEL = 10;\n\n        public OfflineMapTileService(HttpClient httpClient, DatabaseService databaseService, ConnectivityService connectivityService)\n        {\n            _httpClient = httpClient;\n            _databaseService = databaseService;\n            _connectivityService = connectivityService;\n        }\n\n        /// <summary>\n        /// Belirtilen bölge için harita tiles'larını indirir ve önbelleğe alır\n        /// </summary>\n        public async Task DownloadMapTilesAsync(double northLat, double southLat, double westLng, double eastLng, int zoomLevel = 14)\n        {\n            if (!_connectivityService.IsConnected)\n            {\n                throw new InvalidOperationException("İnternet bağlantısı gerekli");\n            }\n\n            // Zoom seviyesini sınırla\n            zoomLevel = Math.Clamp(zoomLevel, MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL);\n\n            var tiles = CalculateTilesForRegion(northLat, southLat, westLng, eastLng, zoomLevel);\n\n            foreach (var tile in tiles)\n            {\n                await DownloadAndCacheTileAsync(tile.X, tile.Y, zoomLevel);\n                await Task.Delay(100); // API rate limiting için\n            }\n        }\n\n        /// <summary>\n        /// Bölge için gerekli tile koordinatlarını hesaplar\n        /// </summary>\n        private List<MapTile> CalculateTilesForRegion(double northLat, double southLat, double westLng, double eastLng, int zoom)\n        {\n            var tiles = new List<MapTile>();\n\n            // Latitude ve longitude'u tile koordinatlarına dönüştür\n            var northTile = LatToTileY(northLat, zoom);\n            var southTile = LatToTileY(southLat, zoom);\n            var westTile = LngToTileX(westLng, zoom);\n            var eastTile = LngToTileX(eastLng, zoom);\n\n            // Tile grid'ini oluştur\n            for (int y = Math.Min(northTile, southTile); y <= Math.Max(northTile, southTile); y++)\n            {\n                for (int x = Math.Min(westTile, eastTile); x <= Math.Max(westTile, eastTile); x++)\n                {\n                    tiles.Add(new MapTile\n                    {\n                        X = x,\n                        Y = y,\n                        Zoom = zoom,\n                        LastAccessed = DateTime.Now\n                    });\n                }\n            }\n\n            return tiles;\n        }\n\n        /// <summary>\n        /// Tek bir tile'ı indirir ve önbelleğe alır\n        /// </summary>\n        private async Task DownloadAndCacheTileAsync(int x, int y, int zoom)\n        {\n            try\n            {\n                // OpenStreetMap tile URL'i (ücretsiz)\n                var tileUrl = $"https://tile.openstreetmap.org/{zoom}/{x}/{y}.png";\n\n                var response = await _httpClient.GetAsync(tileUrl);\n                if (!response.IsSuccessStatusCode)\n                    return;\n\n                var tileData = await response.Content.ReadAsByteArrayAsync();\n\n                // Tile'ı veritabanına kaydet\n                await SaveTileToDatabaseAsync(x, y, zoom, tileData);\n\n                // İsteğe bağlı: dosyaya da kaydet\n                await SaveTileToFileAsync(x, y, zoom, tileData);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine($"Tile indirme hatası ({x},{y},{zoom}): {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Önbellekten tile'ı alır\n        /// </summary>\n        public async Task<byte[]> GetCachedTileAsync(int x, int y, int zoom)\n        {\n            // Önce veritabanından dene\n            var tile = await _databaseService.GetMapTileAsync(x, y, zoom);\n            if (tile != null)\n            {\n                // Son erişim zamanını güncelle\n                tile.LastAccessed = DateTime.Now;\n                await _databaseService.UpdateMapTileAsync(tile);\n                return tile.TileData;\n            }\n\n            // Dosyadan dene\n            return await LoadTileFromFileAsync(x, y, zoom);\n        }\n\n        /// <summary>\n        /// Tile'ın önbellekte olup olmadığını kontrol eder\n        /// </summary>\n        public async Task<bool> IsTileCachedAsync(int x, int y, int zoom)\n        {\n            var tile = await _databaseService.GetMapTileAsync(x, y, zoom);\n            if (tile != null)\n                return true;\n\n            return File.Exists(GetTileFilePath(x, y, zoom));\n        }\n\n        /// <summary>\n        /// Eski tiles'ları temizler\n        /// </summary>\n        public async Task CleanOldTilesAsync(int daysOld = 30)\n        {\n            var cutoffDate = DateTime.Now.AddDays(-daysOld);\n            await _databaseService.DeleteOldMapTilesAsync(cutoffDate);\n\n            // Dosya sistemindeki eski tile'ları da temizle\n            await CleanOldTileFilesAsync(cutoffDate);\n        }\n\n        /// <summary>\n        /// Önbellek istatistiklerini alır\n        /// </summary>\n        public async Task<MapCacheStats> GetCacheStatsAsync()\n        {\n            var tileCount = await _databaseService.GetMapTileCountAsync();\n            var totalSize = await _databaseService.GetMapTilesTotalSizeAsync();\n            var oldestTile = await _databaseService.GetOldestMapTileAsync();\n\n            return new MapCacheStats\n            {\n                TotalTiles = tileCount,\n                TotalSizeBytes = totalSize,\n                OldestTileDate = oldestTile?.LastAccessed\n            };\n        }\n\n        #region Yardımcı Metodlar\n\n        private async Task SaveTileToDatabaseAsync(int x, int y, int zoom, byte[] tileData)\n        {\n            var tile = new MapTile\n            {\n                X = x,\n                Y = y,\n                Zoom = zoom,\n                TileData = tileData,\n                DownloadedDate = DateTime.Now,\n                LastAccessed = DateTime.Now\n            };\n\n            await _databaseService.SaveMapTileAsync(tile);\n        }\n\n        private async Task SaveTileToFileAsync(int x, int y, int zoom, byte[] tileData)\n        {\n            var filePath = GetTileFilePath(x, y, zoom);\n            var directory = Path.GetDirectoryName(filePath);\n\n            if (!Directory.Exists(directory))\n                Directory.CreateDirectory(directory);\n\n            await File.WriteAllBytesAsync(filePath, tileData);\n        }\n\n        private async Task<byte[]> LoadTileFromFileAsync(int x, int y, int zoom)\n        {\n            var filePath = GetTileFilePath(x, y, zoom);\n            if (File.Exists(filePath))\n            {\n                return await File.ReadAllBytesAsync(filePath);\n            }\n            return null;\n        }\n\n        private async Task CleanOldTileFilesAsync(DateTime cutoffDate)\n        {\n            var tileDir = Path.Combine(FileSystem.AppDataDirectory, TILE_CACHE_DIR);\n            if (!Directory.Exists(tileDir))\n                return;\n\n            var files = Directory.GetFiles(tileDir, "*.png", SearchOption.AllDirectories);\n            foreach (var file in files)\n            {\n                try\n                {\n                    var fileInfo = new FileInfo(file);\n                    if (fileInfo.LastAccessTime < cutoffDate)\n                    {\n                        File.Delete(file);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    System.Diagnostics.Debug.WriteLine($"Dosya silme hatası: {ex.Message}");\n                }\n            }\n        }\n\n        private string GetTileFilePath(int x, int y, int zoom)\n        {\n            var tileDir = Path.Combine(FileSystem.AppDataDirectory, TILE_CACHE_DIR, zoom.ToString(), x.ToString());\n            return Path.Combine(tileDir, $"{y}.png");\n        }\n\n        // Tile koordinat dönüşüm yardımcıları\n        private int LngToTileX(double lng, int zoom)\n        {\n            return (int)Math.Floor((lng + 180.0) / 360.0 * Math.Pow(2.0, zoom));\n        }\n\n        private int LatToTileY(double lat, int zoom)\n        {\n            return (int)Math.Floor((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) + 1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * Math.Pow(2.0, zoom));\n        }\n\n        #endregion\n    }\n\n    /// <summary>\n    /// Harita önbellek istatistikleri\n    /// </summary>\n    public class MapCacheStats\n    {\n        public int TotalTiles { get; set; }\n        public long TotalSizeBytes { get; set; }\n        public DateTime? OldestTileDate { get; set; }\n\n        public string TotalSizeFormatted => $"{TotalSizeBytes / 1024.0 / 1024.0:F2} MB";\n    }\n}\n