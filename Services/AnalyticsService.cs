using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    /// <summary>\n    /// Kullanıcı davranış analizi servisi\n    /// CI/CD pipeline ile entegre edilmiş analytics ve tracking sistemi\n    /// </summary>\n    public class AnalyticsService\n    {\n        private readonly ILogger<AnalyticsService> _logger;\n        private readonly string _analyticsPath;\n        private readonly string _environment;\n        private readonly bool _enableAnalytics;\n        private readonly int _maxAnalyticsFileSize;\n        private readonly int _retentionDays;\n        private readonly bool _enableRealTimeProcessing;\n\n        public AnalyticsService(ILogger<AnalyticsService> logger)\n        {\n            _logger = logger;\n            _analyticsPath = Environment.GetEnvironmentVariable("ANALYTICS_PATH") ?? "analytics";\n            _environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production";\n            _enableAnalytics = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_ANALYTICS") ?? "true");\n            _maxAnalyticsFileSize = int.Parse(Environment.GetEnvironmentVariable("MAX_ANALYTICS_FILE_SIZE_MB") ?? "50");\n            _retentionDays = int.Parse(Environment.GetEnvironmentVariable("ANALYTICS_RETENTION_DAYS") ?? "90");\n            _enableRealTimeProcessing = bool.Parse(Environment.GetEnvironmentVariable("ENABLE_REALTIME_ANALYTICS") ?? "true");\n\n            // Analytics klasörünü oluştur\n            Directory.CreateDirectory(_analyticsPath);\n        }\n\n        /// <summary>\n        /// Genel olay tracking\n        /// </summary>\n        public async Task TrackEvent(string eventName, string userId, Dictionary<string, object> properties = null)\n        {\n            if (!_enableAnalytics)\n                return;\n\n            try\n            {\n                var analyticsEvent = new AnalyticsEvent\n                {\n                    Id = Guid.NewGuid().ToString(),\n                    EventName = eventName,\n                    UserId = userId,\n                    Timestamp = DateTime.UtcNow,\n                    Environment = _environment,\n                    Properties = properties ?? new Dictionary<string, object>(),\n                    SessionId = GenerateSessionId(userId),\n                    Source = "KesifUygulamasiTemplate"\n                };\n\n                await SaveAnalyticsEvent(analyticsEvent);\n\n                if (_enableRealTimeProcessing)\n                {\n                    await ProcessRealTimeAnalytics(analyticsEvent);\n                }\n\n                _logger.LogInformation($"Analytics event tracked: {eventName} for user {userId}");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to track analytics event: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Sayfa görüntüleme tracking\n        /// </summary>\n        public async Task TrackPageView(string pageName, string userId, TimeSpan? duration = null)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                ["page_name"] = pageName,\n                ["duration_seconds"] = duration?.TotalSeconds ?? 0\n            };\n\n            await TrackEvent("page_view", userId, properties);\n        }\n\n        /// <summary>\n        /// Kullanıcı etkileşim tracking\n        /// </summary>\n        public async Task TrackUserInteraction(string interactionType, string elementId, string userId, Dictionary<string, object> metadata = null)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                ["interaction_type"] = interactionType,\n                ["element_id"] = elementId\n            };\n\n            if (metadata != null)\n            {\n                foreach (var kvp in metadata)\n                {\n                    properties[kvp.Key] = kvp.Value;\n                }\n            }\n\n            await TrackEvent("user_interaction", userId, properties);\n        }\n\n        /// <summary>\n        /// Rota kullanım tracking\n        /// </summary>\n        public async Task TrackRouteUsage(string routeId, string userId, string optimizationType, double distanceKm, TimeSpan duration)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                ["route_id"] = routeId,\n                ["optimization_type"] = optimizationType,\n                ["distance_km"] = distanceKm,\n                ["duration_seconds"] = duration.TotalSeconds\n            };\n\n            await TrackEvent("route_usage", userId, properties);\n        }\n\n        /// <summary>\n        /// Hata tracking\n        /// </summary>\n        public async Task TrackError(string errorType, string errorMessage, string userId, string stackTrace = null)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                ["error_type"] = errorType,\n                ["error_message"] = errorMessage,\n                ["stack_trace"] = stackTrace ?? ""\n            };\n\n            await TrackEvent("error", userId, properties);\n        }\n\n        /// <summary>\n        /// Performans metrik tracking\n        /// </summary>\n        public async Task TrackPerformance(string metricName, double value, string userId, string context = null)\n        {\n            var properties = new Dictionary<string, object>\n            {\n                ["metric_name"] = metricName,\n                ["value"] = value,\n                ["context"] = context ?? ""\n            };\n\n            await TrackEvent("performance", userId, properties);\n        }\n\n        /// <summary>\n        /// Analytics istatistiklerini getir\n        /// </summary>\n        public async Task<AnalyticsStats> GetAnalyticsStats(DateTime? startDate = null, DateTime? endDate = null)\n        {\n            try\n            {\n                var events = await GetAnalyticsEvents(startDate, endDate);\n\n                var stats = new AnalyticsStats\n                {\n                    TotalEvents = events.Count,\n                    UniqueUsers = events.Select(e => e.UserId).Distinct().Count(),\n                    TimeRange = new TimeRange\n                    {\n                        Start = events.LastOrDefault()?.Timestamp ?? DateTime.MinValue,\n                        End = events.FirstOrDefault()?.Timestamp ?? DateTime.MaxValue\n                    }\n                };\n\n                // Event dağılımı\n                stats.EventDistribution = events.GroupBy(e => e.EventName)\n                    .ToDictionary(g => g.Key, g => g.Count);\n\n                // Günlük aktif kullanıcılar\n                stats.DailyActiveUsers = events.GroupBy(e => e.Timestamp.Date)\n                    .ToDictionary(g => g.Key, g => g.Select(e => e.UserId).Distinct().Count());\n\n                // Popüler sayfalar\n                var pageViews = events.Where(e => e.EventName == "page_view");\n                stats.PopularPages = pageViews.GroupBy(e => e.Properties.GetValueOrDefault("page_name", "").ToString())\n                    .ToDictionary(g => g.Key, g => g.Count());\n\n                // Hata oranları\n                var errors = events.Where(e => e.EventName == "error");\n                stats.ErrorRate = events.Count > 0 ? (double)errors.Count() / events.Count : 0;\n\n                return stats;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to get analytics stats: {ex.Message}");\n                return new AnalyticsStats();\n            }\n        }\n\n        /// <summary>\n        /// Kullanıcı davranış analizi\n        /// </summary>\n        public async Task<UserBehaviorAnalysis> AnalyzeUserBehavior(string userId, DateTime? startDate = null, DateTime? endDate = null)\n        {\n            try\n            {\n                var userEvents = await GetAnalyticsEvents(startDate, endDate);\n                userEvents = userEvents.Where(e => e.UserId == userId).ToList();\n\n                var analysis = new UserBehaviorAnalysis\n                {\n                    UserId = userId,\n                    TotalEvents = userEvents.Count,\n                    SessionCount = userEvents.Select(e => e.SessionId).Distinct().Count(),\n                    TimeRange = new TimeRange\n                    {\n                        Start = userEvents.LastOrDefault()?.Timestamp ?? DateTime.MinValue,\n                        End = userEvents.FirstOrDefault()?.Timestamp ?? DateTime.MaxValue\n                    }\n                };\n\n                // Etkileşim paternleri\n                analysis.InteractionPatterns = userEvents.GroupBy(e => e.EventName)\n                    .ToDictionary(g => g.Key, g => g.Count());\n\n                // Kullanım saatleri\n                analysis.UsageHours = userEvents.GroupBy(e => e.Timestamp.Hour)\n                    .ToDictionary(g => g.Key, g => g.Count());\n\n                // Sayfa görüntüleme sırası\n                var pageViews = userEvents.Where(e => e.EventName == "page_view")\n                    .OrderBy(e => e.Timestamp)\n                    .Select(e => e.Properties.GetValueOrDefault("page_name", "").ToString())\n                    .ToList();\n                analysis.PageFlow = pageViews;\n\n                return analysis;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to analyze user behavior: {ex.Message}");\n                return new UserBehaviorAnalysis { UserId = userId };\n            }\n        }\n\n        /// <summary>\n        /// Analytics verilerini temizle\n        /// </summary>\n        public async Task<int> CleanupOldAnalytics(int maxAgeDays = 90)\n        {\n            try\n            {\n                var cutoffDate = DateTime.Now.AddDays(-maxAgeDays);\n                var oldFiles = Directory.GetFiles(_analyticsPath, "analytics-*.json")\n                    .Where(f => File.GetCreationTimeUtc(f) < cutoffDate)\n                    .ToArray();\n\n                foreach (var file in oldFiles)\n                {\n                    File.Delete(file);\n                }\n\n                _logger.LogInformation($"Cleaned up {oldFiles.Length} old analytics files");\n                return oldFiles.Length;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to cleanup old analytics: {ex.Message}");\n                return 0;\n            }\n        }\n\n        /// <summary>\n        /// Analytics verilerini dışa aktar\n        /// </summary>\n        public async Task ExportAnalytics(string filePath, DateTime? startDate = null, DateTime? endDate = null)\n        {\n            try\n            {\n                var events = await GetAnalyticsEvents(startDate, endDate);\n                var exportData = new\n                {\n                    ExportDate = DateTime.UtcNow,\n                    TotalEvents = events.Count,\n                    DateRange = new { Start = startDate, End = endDate },\n                    Events = events\n                };\n\n                var json = JsonSerializer.Serialize(exportData, new JsonSerializerOptions\n                {\n                    WriteIndented = true,\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n                });\n\n                await File.WriteAllTextAsync(filePath, json);\n                _logger.LogInformation($"Analytics exported to: {filePath}");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError($"Failed to export analytics: {ex.Message}");\n            }\n        }\n\n        private async Task SaveAnalyticsEvent(AnalyticsEvent analyticsEvent)\n        {\n            var fileName = GetAnalyticsFileName();\n            var filePath = Path.Combine(_analyticsPath, fileName);\n\n            // Dosya boyutu kontrolü\n            if (File.Exists(filePath) && new FileInfo(filePath).Length > _maxAnalyticsFileSize * 1024 * 1024)\n            {\n                // Yeni dosya oluştur\n                fileName = GetAnalyticsFileName(true);\n                filePath = Path.Combine(_analyticsPath, fileName);\n            }\n\n            var json = JsonSerializer.Serialize(analyticsEvent, new JsonSerializerOptions\n            {\n                WriteIndented = false,\n                PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n            });\n\n            await File.AppendAllTextAsync(filePath, json + Environment.NewLine);\n        }\n\n        private async Task<List<AnalyticsEvent>> GetAnalyticsEvents(DateTime? startDate = null, DateTime? endDate = null)\n        {\n            var events = new List<AnalyticsEvent>();\n            var analyticsFiles = Directory.GetFiles(_analyticsPath, "analytics-*.json")\n                .OrderByDescending(f => f)\n                .Take(30); // Son 30 dosyayı al\n\n            foreach (var file in analyticsFiles)\n            {\n                var content = await File.ReadAllTextAsync(file);\n                var lines = content.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);\n\n                foreach (var line in lines)\n                {\n                    try\n                    {\n                        var analyticsEvent = JsonSerializer.Deserialize<AnalyticsEvent>(line);\n                        if (analyticsEvent != null)\n                        {\n                            bool includeEvent = true;\n\n                            if (startDate.HasValue && analyticsEvent.Timestamp < startDate.Value)\n                                includeEvent = false;\n                            if (endDate.HasValue && analyticsEvent.Timestamp > endDate.Value)\n                                includeEvent = false;\n\n                            if (includeEvent)\n                                events.Add(analyticsEvent);\n                        }\n                    }\n                    catch\n                    {\n                        // Geçersiz JSON satırını atla\n                    }\n                }\n            }\n\n            return events.OrderByDescending(e => e.Timestamp).ToList();\n        }\n\n        private async Task ProcessRealTimeAnalytics(AnalyticsEvent analyticsEvent)\n        {\n            // Gerçek zamanlı işleme mantığı\n            // Bu kısım gerçek implementasyonda daha sofistike olabilir\n\n            switch (analyticsEvent.EventName)\n            {\n                case "error":\n                    _logger.LogWarning($"Real-time error detected: {analyticsEvent.Properties.GetValueOrDefault("error_message", "")}");\n                    break;\n\n                case "performance":\n                    var value = Convert.ToDouble(analyticsEvent.Properties.GetValueOrDefault("value", 0));\n                    if (value > 5000) // 5 saniyeden uzun işlemler\n                    {\n                        _logger.LogWarning($"Real-time performance issue detected: {value}ms");\n                    }\n                    break;\n\n                case "user_interaction":\n                    // Yüksek etkileşim oranlarını logla\n                    break;\n            }\n        }\n\n        private string GetAnalyticsFileName(bool forceNew = false)\n        {\n            string dateStr = DateTime.UtcNow.ToString("yyyy-MM-dd");\n            string baseName = $"analytics-{dateStr}";\n\n            if (!forceNew)\n            {\n                // Mevcut dosyayı kontrol et\n                string existingFile = Directory.GetFiles(_analyticsPath, $"{baseName}*.json")\n                    .OrderByDescending(f => f)\n                    .FirstOrDefault();\n\n                if (existingFile != null)\n                {\n                    return Path.GetFileName(existingFile);\n                }\n            }\n\n            // Yeni dosya oluştur\n            return $"{baseName}-{DateTime.UtcNow.ToString("HH-mm-ss")}.json";\n        }\n\n        private string GenerateSessionId(string userId)\n        {\n            // Basit session ID oluşturma\n            return $"{userId}_{DateTime.UtcNow.ToString("yyyyMMddHHmmss")}";\n        }\n    }\n\n    public class AnalyticsEvent\n    {\n        public string Id { get; set; }\n        public string EventName { get; set; }\n        public string UserId { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string Environment { get; set; }\n        public Dictionary<string, object> Properties { get; set; }\n        public string SessionId { get; set; }\n        public string Source { get; set; }\n    }\n\n    public class AnalyticsStats\n    {\n        public int TotalEvents { get; set; }\n        public int UniqueUsers { get; set; }\n        public double ErrorRate { get; set; }\n        public Dictionary<string, int> EventDistribution { get; set; } = new Dictionary<string, int>();\n        public Dictionary<DateTime, int> DailyActiveUsers { get; set; } = new Dictionary<DateTime, int>();\n        public Dictionary<string, int> PopularPages { get; set; } = new Dictionary<string, int>();\n        public TimeRange TimeRange { get; set; }\n    }\n\n    public class UserBehaviorAnalysis\n    {\n        public string UserId { get; set; }\n        public int TotalEvents { get; set; }\n        public int SessionCount { get; set; }\n        public Dictionary<string, int> InteractionPatterns { get; set; } = new Dictionary<string, int>();\n        public Dictionary<int, int> UsageHours { get; set; } = new Dictionary<int, int>();\n        public List<string> PageFlow { get; set; } = new List<string>();\n        public TimeRange TimeRange { get; set; }\n    }\n}\n