using SQLite;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\n// Services/FavoritePlacesService.cs\npublic class FavoritePlacesService : IFavoritePlacesService\n{\n    private readonly SQLiteConnection _database;\n\n    public FavoritePlacesService(SQLiteConnection database)\n    {\n        _database = database;\n        _database.CreateTable<FavoritePlace>();\n    }\n\n    // IFavoritePlacesService implementation\n    public async Task AddFavoriteAsync(LocationModel place)\n    {\n        var favoritePlace = new FavoritePlace\n        {\n            Name = place.Name ?? "",\n            Description = "",\n            Latitude = place.Latitude,\n            Longitude = place.Longitude,\n            Address = place.Address ?? "",\n            Category = place.Category ?? "Genel",\n            IconName = place.IconName ?? "map_marker"\n        };\n        await Task.Run(() => _database.Insert(favoritePlace));\n    }\n\n    public async Task RemoveFavoriteAsync(string id)\n    {\n        if (int.TryParse(id, out int placeId))\n        {\n            await Task.Run(() => _database.Delete<FavoritePlace>(placeId));\n        }\n    }\n\n    public async Task<IEnumerable<LocationModel>> GetFavoritesAsync()\n    {\n        var favorites = await Task.Run(() =>\n            _database.Table<FavoritePlace>().ToList());\n\n        return favorites.Select(f => new LocationModel\n        {\n            Name = f.Name,\n            Latitude = f.Latitude,\n            Longitude = f.Longitude,\n            Address = f.Address,\n            Category = f.Category,\n            IconName = f.IconName\n        });\n    }\n\n    public async Task<IEnumerable<LocationModel>> GetAllFavoritePlacesAsync()\n    {\n        return await GetFavoritesAsync();\n    }\n\n    // Existing methods\n    public List<FavoritePlace> GetAllFavoritePlaces()\n    {\n        return _database.Table<FavoritePlace>().OrderBy(p => p.Name).ToList();\n    }\n\n    public List<FavoritePlace> GetFavoritePlacesByCategory(string category)\n    {\n        return _database.Table<FavoritePlace>()\n            .Where(p => p.Category == category)\n            .OrderBy(p => p.Name)\n            .ToList();\n    }\n\n    public FavoritePlace GetFavoritePlaceById(int id)\n    {\n        return _database.Get<FavoritePlace>(id);\n    }\n\n    public int AddFavoritePlace(FavoritePlace place)\n    {\n        place.CreatedAt = DateTime.UtcNow;\n        return _database.Insert(place);\n    }\n\n    public bool UpdateFavoritePlace(FavoritePlace place)\n    {\n        place.UpdatedAt = DateTime.UtcNow;\n        return _database.Update(place) > 0;\n    }\n\n    public bool DeleteFavoritePlace(int id)\n    {\n        return _database.Delete<FavoritePlace>(id) > 0;\n    }\n\n    public List<string> GetAllCategories()\n    {\n        return _database.Table<FavoritePlace>()\n            .Select(p => p.Category)\n            .Distinct()\n            .ToList();\n    }\n}\n\n// Models/FavoritePlace.cs\npublic class FavoritePlace\n{\n    [PrimaryKey, AutoIncrement]\n    public int Id { get; set; }\n\n    public string Name { get; set; } = "";\n\n    public string Description { get; set; } = "";\n\n    public double Latitude { get; set; }\n\n    public double Longitude { get; set; }\n\n    public string Address { get; set; } = "";\n\n    public string Category { get; set; } = "Genel";\n\n    public string IconName { get; set; } = "map_marker";\n\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n    public DateTime? UpdatedAt { get; set; }\n\n    public bool IsPinned { get; set; } = false;\n}\n