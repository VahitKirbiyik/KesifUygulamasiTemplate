using System;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Controls;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Models;\nusing System.Collections.Generic;\n\nnamespace KesifUygulamasiTemplate\n{\n    public partial class MainPage : ContentPage\n    {\n        private readonly OllamaService _ollamaService;\n\n        public MainPage(OllamaService ollamaService)\n        {\n            InitializeComponent();\n            _ollamaService = ollamaService;\n        }\n\n        private async void OnSendPromptClicked(object sender, EventArgs e)\n        {\n            string prompt = PromptEntry.Text;\n\n            if (string.IsNullOrWhiteSpace(prompt))\n            {\n                await DisplayAlert("Uyarı", "Lütfen bir metin giriniz.", "Tamam");\n                return;\n            }\n\n            ResponseEditor.Text = "⏳ Yanıt bekleniyor...";\n\n            try\n            {\n                // Örn: "llama3:13b" modelini çağırıyoruz\n                string result = await _ollamaService.GenerateTextAsync("llama3:13b", prompt);\n\n                ResponseEditor.Text = result;\n            }\n            catch (Exception ex)\n            {\n                ResponseEditor.Text = $"⚠️ Hata oluştu: {ex.Message}";\n            }\n        }\n\n        private async void OnTestPolylineClicked(object sender, EventArgs e)\n        {\n            await RunPolylineTests();\n        }\n\n        private async Task RunPolylineTests()\n        {\n            var testResults = new System.Text.StringBuilder();\n            testResults.AppendLine("=== PolylineDecoder Testleri ===");\n\n            // Test 1: Basit decode testi\n            testResults.AppendLine("\n1. Basit Decode Testi:");\n            string encodedPolyline = "_p~iF~ps|U_ulLnnqC_mqNvxq`@";\n\n            try\n            {\n                var decodedPoints = Services.PolylineDecoder.Decode(encodedPolyline);\n                testResults.AppendLine($"✓ Decode edilen nokta sayısı: {decodedPoints.Count}");\n\n                foreach (var point in decodedPoints)\n                {\n                    testResults.AppendLine($"  Lat: {point.Lat:F6}, Lng: {point.Lng:F6}");\n                }\n\n                // Encode test\n                var encodedAgain = Services.PolylineDecoder.Encode(decodedPoints);\n                testResults.AppendLine($"✓ Tekrar encode edilmiş: {encodedAgain}");\n            }\n            catch (Exception ex)\n            {\n                testResults.AppendLine($"✗ Test hatası: {ex.Message}");\n            }\n\n            // Test 2: Gerçek veri testi\n            testResults.AppendLine("\n2. Gerçek Veri Testi:");\n            var testPoints = new List<LatLng>\n            {\n                new LatLng(41.0458, 29.0340), // Ortaköy\n                new LatLng(41.0465, 29.0352), // Boğaz köprüsü başlangıç\n                new LatLng(41.0472, 29.0365), // Boğaz köprüsü orta\n                new LatLng(41.0480, 29.0378), // Boğaz köprüsü bitiş\n                new LatLng(41.0485, 29.0390)  // Üsküdar\n            };\n\n            try\n            {\n                string encoded = Services.PolylineDecoder.Encode(testPoints);\n                testResults.AppendLine($"✓ Encode edilmiş polyline: {encoded}");\n\n                var decoded = Services.PolylineDecoder.Decode(encoded);\n                testResults.AppendLine($"✓ Decode sonrası nokta sayısı: {decoded.Count}");\n\n                // Hassasiyet kontrolü\n                bool allWithinTolerance = true;\n                for (int i = 0; i < Math.Min(testPoints.Count, decoded.Count); i++)\n                {\n                    var original = testPoints[i];\n                    var decodedPoint = decoded[i];\n                    var latDiff = Math.Abs(original.Lat - decodedPoint.Lat);\n                    var lngDiff = Math.Abs(original.Lng - decodedPoint.Lng);\n\n                    if (latDiff > 0.00001 || lngDiff > 0.00001)\n                        allWithinTolerance = false;\n\n                    testResults.AppendLine($"  Nokta {i}: Fark - Lat: {latDiff:F8}, Lng: {lngDiff:F8}");\n                }\n\n                if (allWithinTolerance)\n                    testResults.AppendLine("✓ Hassasiyet testi başarılı!");\n                else\n                    testResults.AppendLine("⚠ Hassasiyet kaybı var ama kabul edilebilir.");\n            }\n            catch (Exception ex)\n            {\n                testResults.AppendLine($"✗ Gerçek veri testi hatası: {ex.Message}");\n            }\n\n            testResults.AppendLine("\n=== Testler Tamamlandı ===");\n\n            // Sonuçları göster\n            await DisplayAlert("Polyline Test Sonuçları", testResults.ToString(), "Tamam");\n        }\n    }\n}\n