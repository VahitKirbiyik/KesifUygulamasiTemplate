using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services;\nusing Microsoft.Extensions.Configuration;\nusing Moq;\nusing Xunit;\n\nnamespace RouteServiceTestProject\n{\n    public class RouteServiceTests\n    {\n        private readonly Mock<HttpClient> _mockHttpClient;\n        private readonly Mock<ConnectivityService> _mockConnectivityService;\n        private readonly Mock<ConfigurationService> _mockConfigurationService;\n        private readonly RouteService _routeService;\n\n        public RouteServiceTests()\n        {\n            _mockHttpClient = new Mock<HttpClient>();\n            _mockConnectivityService = new Mock<ConnectivityService>();\n            _mockConfigurationService = new Mock<ConfigurationService>();\n            _routeService = new RouteService(_mockHttpClient.Object, _mockConnectivityService.Object, _mockConfigurationService.Object);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WithValidLocations_ReturnsRoute()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 }; // Ä°stanbul\n            var end = new LocationModel { Latitude = 39.9334, Longitude = 32.8597 }; // Ankara\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(start, end);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 2);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WhenOffline_ReturnsOfflineRoute()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 };\n            var end = new LocationModel { Latitude = 39.9334, Longitude = 32.8597 };\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(false);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(start, end);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 2);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WithSameStartEnd_ReturnsDirectRoute()\n        {\n            // Arrange\n            var location = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 };\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(location, location);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 1);\n        }\n    }\n}\n