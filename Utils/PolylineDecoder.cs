using System;\nusing System.Collections.Generic;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Utils\n{\n    /// <summary>\n    /// Google Maps polyline formatında encode edilmiş koordinatları decode eder\n    /// </summary>\n    public static class PolylineDecoder\n    {\n        /// <summary>\n        /// Google Maps polyline string'ini LatLng koordinatlarına decode eder\n        /// </summary>\n        /// <param name="encodedPolyline">Encode edilmiş polyline string</param>\n        /// <returns>Decode edilmiş koordinat listesi</returns>\n        public static List<LatLng> Decode(string encodedPolyline)\n        {\n            if (string.IsNullOrEmpty(encodedPolyline))\n                return new List<LatLng>();\n\n            var decodedPoints = new List<LatLng>();\n            int index = 0;\n            int latitude = 0;\n            int longitude = 0;\n\n            while (index < encodedPolyline.Length)\n            {\n                // Latitude decode\n                int result = 1;\n                int shift = 0;\n                int b;\n\n                do\n                {\n                    b = encodedPolyline[index++] - 63;\n                    result += (b & 0x1f) << shift;\n                    shift += 5;\n                } while (b >= 0x20);\n\n                int deltaLatitude = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));\n                latitude += deltaLatitude;\n\n                // Longitude decode\n                result = 1;\n                shift = 0;\n\n                do\n                {\n                    b = encodedPolyline[index++] - 63;\n                    result += (b & 0x1f) << shift;\n                    shift += 5;\n                } while (b >= 0x20);\n\n                int deltaLongitude = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));\n                longitude += deltaLongitude;\n\n                // Koordinatları derece cinsine çevir ve listeye ekle\n                double lat = latitude * 1e-5;\n                double lng = longitude * 1e-5;\n\n                decodedPoints.Add(new LatLng(lat, lng));\n            }\n\n            return decodedPoints;\n        }\n\n        /// <summary>\n        /// Decode edilmiş koordinatlardan polyline string oluşturur\n        /// </summary>\n        /// <param name="points">Koordinat listesi</param>\n        /// <returns>Encode edilmiş polyline string</returns>\n        public static string Encode(List<LatLng> points)\n        {\n            if (points == null || points.Count == 0)\n                return string.Empty;\n\n            var encodedString = new System.Text.StringBuilder();\n            int previousLatitude = 0;\n            int previousLongitude = 0;\n\n            foreach (var point in points)\n            {\n                int latitude = (int)Math.Round(point.Lat * 1e5);\n                int longitude = (int)Math.Round(point.Lng * 1e5);\n\n                // Latitude encode\n                EncodeValue(encodedString, latitude - previousLatitude);\n                // Longitude encode\n                EncodeValue(encodedString, longitude - previousLongitude);\n\n                previousLatitude = latitude;\n                previousLongitude = longitude;\n            }\n\n            return encodedString.ToString();\n        }\n\n        private static void EncodeValue(System.Text.StringBuilder encodedString, int value)\n        {\n            int sign = value < 0 ? 1 : 0;\n            int delta = sign != 0 ? ~(value << 1) : (value << 1);\n\n            while (delta >= 0x20)\n            {\n                encodedString.Append((char)((0x20 | (delta & 0x1f)) + 63));\n                delta >>= 5;\n            }\n\n            encodedString.Append((char)(delta + 63));\n        }\n    }\n}\n