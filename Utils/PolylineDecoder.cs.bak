using System;
using System.Collections.Generic;
using KesifUygulamasiTemplate.Models;

namespace KesifUygulamasiTemplate.Utils
{
    /// <summary>
    /// Google Maps polyline formatında encode edilmiş koordinatları decode eder
    /// </summary>
    public static class PolylineDecoder
    {
        /// <summary>
        /// Google Maps polyline string'ini LatLng koordinatlarına decode eder
        /// </summary>
        /// <param name="encodedPolyline">Encode edilmiş polyline string</param>
        /// <returns>Decode edilmiş koordinat listesi</returns>
        public static List<LatLng> Decode(string encodedPolyline)
        {
            if (string.IsNullOrEmpty(encodedPolyline))
                return new List<LatLng>();

            var decodedPoints = new List<LatLng>();
            int index = 0;
            int latitude = 0;
            int longitude = 0;

            while (index < encodedPolyline.Length)
            {
                // Latitude decode
                int result = 1;
                int shift = 0;
                int b;

                do
                {
                    b = encodedPolyline[index++] - 63;
                    result += (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);

                int deltaLatitude = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
                latitude += deltaLatitude;

                // Longitude decode
                result = 1;
                shift = 0;

                do
                {
                    b = encodedPolyline[index++] - 63;
                    result += (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);

                int deltaLongitude = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
                longitude += deltaLongitude;

                // Koordinatları derece cinsine çevir ve listeye ekle
                double lat = latitude * 1e-5;
                double lng = longitude * 1e-5;

                decodedPoints.Add(new LatLng(lat, lng));
            }

            return decodedPoints;
        }

        /// <summary>
        /// Decode edilmiş koordinatlardan polyline string oluşturur
        /// </summary>
        /// <param name="points">Koordinat listesi</param>
        /// <returns>Encode edilmiş polyline string</returns>
        public static string Encode(List<LatLng> points)
        {
            if (points == null || points.Count == 0)
                return string.Empty;

            var encodedString = new System.Text.StringBuilder();
            int previousLatitude = 0;
            int previousLongitude = 0;

            foreach (var point in points)
            {
                int latitude = (int)Math.Round(point.Lat * 1e5);
                int longitude = (int)Math.Round(point.Lng * 1e5);

                // Latitude encode
                EncodeValue(encodedString, latitude - previousLatitude);
                // Longitude encode
                EncodeValue(encodedString, longitude - previousLongitude);

                previousLatitude = latitude;
                previousLongitude = longitude;
            }

            return encodedString.ToString();
        }

        private static void EncodeValue(System.Text.StringBuilder encodedString, int value)
        {
            int sign = value < 0 ? 1 : 0;
            int delta = sign != 0 ? ~(value << 1) : (value << 1);

            while (delta >= 0x20)
            {
                encodedString.Append((char)((0x20 | (delta & 0x1f)) + 63));
                delta >>= 5;
            }

            encodedString.Append((char)(delta + 63));
        }
    }
}
