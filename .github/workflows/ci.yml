name: CI - .NET MAUI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION: 'KesifUygulamasiTemplate.sln'
  BUILD_CONFIGURATION: 'Release'
  ARTIFACT_DIR: 'artifacts'

jobs:
  build-test:
    name: Build & Test on Windows, Linux, Mac
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test --no-build --verbosity normal --logger trx --results-directory TestResults --collect:"XPlat Code Coverage" --settings coverlet.runsettings

      - name: Run Polyline Decode Test
        run: dotnet test --no-build --verbosity normal --filter "PolylineDecoder" --logger trx --results-directory TestResults

      - name: Run Offline Route Simulation Test
        run: pwsh scripts/Test-OfflineRoute.ps1

      - name: Run Monitoring Tests
        run: dotnet test --no-build --verbosity normal --filter "Monitoring" --logger trx --results-directory TestResults

      - name: Update Badge Status
        run: |
          if [ -f TestResults/badge-status.md ]; then
            cat TestResults/badge-status.md
            echo "Badge status updated successfully"
          else
            echo "# ⚠️ Badge status file not found" > TestResults/badge-status.md
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: TestResults

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: TestResults/*/coverage.cobertura.xml

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:TestResults/*/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html;Cobertura
          echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: coverage-report

  release-android:
    name: Build Android .aab
    runs-on: windows-latest
    needs: [build-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build Release
        run: dotnet publish -c Release -f:net8.0-android -o out/Android

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android-Release
          path: out/Android

  release-ios:
    name: Build iOS .ipa
    runs-on: macos-latest
    needs: [build-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build Release
        run: dotnet publish -c Release -f:net8.0-ios -o out/iOS

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Release
          path: out/iOS
