using SkiaSharp;\nusing SkiaSharp.Views.Maui;\nusing SkiaSharp.Views.Maui.Controls;\nusing Microsoft.Maui.Controls;\n\nnamespace KesifUygulamasiTemplate.Controls\n{\n    public class MoonPhaseView : SKCanvasView\n    {\n        public static readonly BindableProperty PhaseProperty = BindableProperty.Create(\n            nameof(Phase), typeof(double), typeof(MoonPhaseView), 0.0,\n            propertyChanged: (bindable, oldValue, newValue) => ((MoonPhaseView)bindable).InvalidateSurface());\n\n        public static readonly BindableProperty IlluminationProperty = BindableProperty.Create(\n            nameof(Illumination), typeof(double), typeof(MoonPhaseView), 0.0,\n            propertyChanged: (bindable, oldValue, newValue) => ((MoonPhaseView)bindable).InvalidateSurface());\n\n        public static readonly BindableProperty MoonColorProperty = BindableProperty.Create(\n            nameof(MoonColor), typeof(Color), typeof(MoonPhaseView), Colors.LightGray,\n            propertyChanged: (bindable, oldValue, newValue) => ((MoonPhaseView)bindable).InvalidateSurface());\n\n        public static readonly BindableProperty ShadowColorProperty = BindableProperty.Create(\n            nameof(ShadowColor), typeof(Color), typeof(MoonPhaseView), Colors.DarkGray,\n            propertyChanged: (bindable, oldValue, newValue) => ((MoonPhaseView)bindable).InvalidateSurface());\n\n        public double Phase\n        {\n            get => (double)GetValue(PhaseProperty);\n            set => SetValue(PhaseProperty, value);\n        }\n\n        public double Illumination\n        {\n            get => (double)GetValue(IlluminationProperty);\n            set => SetValue(IlluminationProperty, value);\n        }\n\n        public Color MoonColor\n        {\n            get => (Color)GetValue(MoonColorProperty);\n            set => SetValue(MoonColorProperty, value);\n        }\n\n        public Color ShadowColor\n        {\n            get => (Color)GetValue(ShadowColorProperty);\n            set => SetValue(ShadowColorProperty, value);\n        }\n\n        protected override void OnPaintSurface(SKPaintSurfaceEventArgs e)\n        {\n            var canvas = e.Surface.Canvas;\n            canvas.Clear();\n\n            var info = e.Info;\n            var size = Math.Min(info.Width, info.Height);\n            var center = new SKPoint(info.Width / 2, info.Height / 2);\n            var radius = size / 2 - 10;\n\n            // Ay dairesi çiz\n            var moonPaint = new SKPaint\n            {\n                Color = MoonColor.ToSKColor(),\n                IsAntialias = true,\n                Style = SKPaintStyle.Fill\n            };\n\n            canvas.DrawCircle(center, radius, moonPaint);\n\n            // Gölge kısmını çiz (ay fazına göre)\n            if (Illumination < 1.0)\n            {\n                var shadowPaint = new SKPaint\n                {\n                    Color = ShadowColor.ToSKColor(),\n                    IsAntialias = true,\n                    Style = SKPaintStyle.Fill\n                };\n\n                // Fazı hesapla (0-1 arası)\n                var phaseOffset = (float)(1.0 - Illumination) * 2 - 1; // -1 ile 1 arası\n\n                var shadowPath = new SKPath();\n                var rect = new SKRect(center.X - radius, center.Y - radius, center.X + radius, center.Y + radius);\n\n                shadowPath.AddArc(rect, -90, 180);\n\n                if (phaseOffset < 0)\n                {\n                    // Sol yarım (Waning)\n                    var ellipseWidth = radius * 2 * Math.Abs(phaseOffset);\n                    var ellipseRect = new SKRect(center.X - (float)ellipseWidth / 2, center.Y - radius,\n                                               center.X + (float)ellipseWidth / 2, center.Y + radius);\n                    shadowPath.AddOval(ellipseRect);\n                }\n                else\n                {\n                    // Sağ yarım (Waxing)\n                    var ellipseWidth = radius * 2 * phaseOffset;\n                    var ellipseRect = new SKRect(center.X - (float)ellipseWidth / 2, center.Y - radius,\n                                               center.X + (float)ellipseWidth / 2, center.Y + radius);\n                    shadowPath.AddOval(ellipseRect);\n                }\n\n                canvas.DrawPath(shadowPath, shadowPaint);\n            }\n\n            // Çerçeve çiz\n            var borderPaint = new SKPaint\n            {\n                Color = SKColors.Gray,\n                IsAntialias = true,\n                Style = SKPaintStyle.Stroke,\n                StrokeWidth = 2\n            };\n\n            canvas.DrawCircle(center, radius, borderPaint);\n\n            // Aydınlanma yüzdesi metni\n            var textPaint = new SKPaint\n            {\n                Color = SKColors.Black,\n                IsAntialias = true,\n                TextSize = 24,\n                TextAlign = SKTextAlign.Center,\n                Typeface = SKTypeface.FromFamilyName("Arial", SKFontStyleWeight.Bold, SKFontStyleWidth.Normal, SKFontStyleSlant.Upright)\n            };\n\n            var percentText = $"{Illumination * 100:F1}%";\n            canvas.DrawText(percentText, center.X, center.Y + radius + 30, textPaint);\n        }\n    }\n}\n