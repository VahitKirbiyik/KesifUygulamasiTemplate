# Test-TileOptimization.ps1 - Tile optimizasyon test scripti\n# CI/CD pipeline ile entegre edilmiş offline tile compression ve prefetch testi\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$CachePath = "cache\tiles",\n    [string]$CompressedPath = "cache\compressed",\n    [int]$TestTileCount = 100,\n    [int]$CompressionLevel = 6\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n    CompressionStats = @{\n        OriginalSize = 0\n        CompressedSize = 0\n        CompressionRatio = 0\n        TilesCompressed = 0\n    }\n    PrefetchStats = @{\n        TilesPrefetched = 0\n        PrefetchDuration = [TimeSpan]::Zero\n        CacheHitRate = 0\n    }\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:TILE_CACHE_PATH = $CachePath\n$env:COMPRESSED_TILE_PATH = $CompressedPath\n$env:COMPRESSION_LEVEL = $CompressionLevel.ToString()\n$env:ENABLE_TILE_COMPRESSION = "true"\n$env:MAX_TILE_SIZE_MB = "10"\n$env:ENABLE_PREFETCH = "true"\n$env:MAX_CONCURRENT_DOWNLOADS = "3"\n$env:PREFETCH_RADIUS = "2"\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      🗺️ Tile Optimizasyon Test Sistemi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-TileOptimization {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Cache klasörü oluşturma testi\nfunction Test-CacheDirectorySetup {\n    Write-ColorOutput "  📁 Cache klasörü kurulumu kontrol ediliyor..." "Gray"\n\n    $fullCachePath = Join-Path $ProjectPath $CachePath\n    $fullCompressedPath = Join-Path $ProjectPath $CompressedPath\n\n    if (!(Test-Path $fullCachePath)) {\n        Write-ColorOutput "    📂 Cache klasörü oluşturuluyor: $fullCachePath" "Gray"\n        New-Item -ItemType Directory -Path $fullCachePath -Force | Out-Null\n    } else {\n        Write-ColorOutput "    ✅ Cache klasörü mevcut: $fullCachePath" "Green"\n    }\n\n    if (!(Test-Path $fullCompressedPath)) {\n        Write-ColorOutput "    📂 Sıkıştırılmış cache klasörü oluşturuluyor: $fullCompressedPath" "Gray"\n        New-Item -ItemType Directory -Path $fullCompressedPath -Force | Out-Null\n    } else {\n        Write-ColorOutput "    ✅ Sıkıştırılmış cache klasörü mevcut: $fullCompressedPath" "Green"\n    }\n\n    # Test tile dosyası oluştur\n    $testTilePath = Join-Path $fullCachePath "test-tile.png"\n    $testData = [byte[]]::new(1024) # 1KB test verisi\n    [System.Random]::new().NextBytes($testData)\n    [System.IO.File]::WriteAllBytes($testTilePath, $testData)\n\n    if (Test-Path $testTilePath) {\n        Write-ColorOutput "    ✅ Test tile dosyası oluşturuldu" "Green"\n        Remove-Item $testTilePath -Force\n    } else {\n        Write-ColorOutput "    ❌ Test tile dosyası oluşturulamadı" "Red"\n        throw "Cache directory setup failed"\n    }\n}\n\n# Tile sıkıştırma testi\nfunction Test-TileCompression {\n    Write-ColorOutput "  🗜️ Tile sıkıştırma testi başlatılıyor..." "Gray"\n\n    $fullCachePath = Join-Path $ProjectPath $CachePath\n    $fullCompressedPath = Join-Path $ProjectPath $CompressedPath\n\n    # Test tile'ları oluştur\n    $testTiles = @()\n    for ($i = 1; $i -le 10; $i++) {\n        $tileData = [byte[]]::new(2048 + ($i * 100)) # Farklı boyutlarda tile'lar\n        [System.Random]::new().NextBytes($tileData)\n\n        $tileKey = "15/1234/5678_$i"\n        $testTiles += @{\n            Key = $tileKey\n            Data = $tileData\n            OriginalSize = $tileData.Length\n        }\n    }\n\n    $totalOriginalSize = 0\n    $totalCompressedSize = 0\n    $compressedTiles = 0\n\n    foreach ($tile in $testTiles) {\n        try {\n            # GZip sıkıştırma simülasyonu\n            $compressedData = Compress-TileData $tile.Data\n            $totalOriginalSize += $tile.OriginalSize\n            $totalCompressedSize += $compressedData.Length\n            $compressedTiles++\n\n            # Sıkıştırılmış dosyayı kaydet\n            $compressedFilePath = Get-CompressedTilePath $tile.Key $fullCompressedPath\n            $directory = [System.IO.Path]::GetDirectoryName($compressedFilePath)\n            if (!(Test-Path $directory)) {\n                New-Item -ItemType Directory -Path $directory -Force | Out-Null\n            }\n            [System.IO.File]::WriteAllBytes($compressedFilePath, $compressedData)\n\n            Write-ColorOutput "    📦 Tile sıkıştırıldı: $($tile.Key) ($($tile.OriginalSize) -> $($compressedData.Length) bytes)" "Gray"\n        } catch {\n            Write-ColorOutput "    ❌ Tile sıkıştırma hatası: $($tile.Key) - $($_.Exception.Message)" "Red"\n        }\n    }\n\n    # Sıkıştırma istatistiklerini hesapla\n    $compressionRatio = if ($totalOriginalSize -gt 0) { $totalCompressedSize / $totalOriginalSize } else { 0 }\n    $spaceSaved = $totalOriginalSize - $totalCompressedSize\n\n    Write-ColorOutput "    📊 Sıkıştırma İstatistikleri:" "Gray"\n    Write-ColorOutput "      - Sıkıştırılan Tile: $compressedTiles" "Gray"\n    Write-ColorOutput "      - Orijinal Boyut: $([math]::Round($totalOriginalSize/1024, 2)) KB" "Gray"\n    Write-ColorOutput "      - Sıkıştırılmış Boyut: $([math]::Round($totalCompressedSize/1024, 2)) KB" "Gray"\n    Write-ColorOutput "      - Sıkıştırma Oranı: $([math]::Round($compressionRatio, 3))" "Gray"\n    Write-ColorOutput "      - Tasarruf: $([math]::Round($spaceSaved/1024, 2)) KB" "Green"\n\n    # Test sonuçlarını güncelle\n    $testResults.CompressionStats.OriginalSize = $totalOriginalSize\n    $testResults.CompressionStats.CompressedSize = $totalCompressedSize\n    $testResults.CompressionStats.CompressionRatio = $compressionRatio\n    $testResults.CompressionStats.TilesCompressed = $compressedTiles\n\n    if ($compressionRatio -lt 1) {\n        Write-ColorOutput "    ✅ Tile sıkıştırma başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  Sıkıştırma etkisi sınırlı" "Yellow"\n    }\n}\n\n# Tile açma testi\nfunction Test-TileDecompression {\n    Write-ColorOutput "  📤 Tile açma testi başlatılıyor..." "Gray"\n\n    $fullCompressedPath = Join-Path $ProjectPath $CompressedPath\n    $decompressedTiles = 0\n    $totalDecompressedSize = 0\n\n    # Sıkıştırılmış tile dosyalarını bul\n    $compressedFiles = Get-ChildItem $fullCompressedPath -Filter "*.tile" -Recurse\n\n    foreach ($file in $compressedFiles) {\n        try {\n            $compressedData = [System.IO.File]::ReadAllBytes($file.FullName)\n            $decompressedData = Decompress-TileData $compressedData\n\n            $totalDecompressedSize += $decompressedData.Length\n            $decompressedTiles++\n\n            Write-ColorOutput "    📦 Tile açıldı: $($file.Name) ($($compressedData.Length) -> $($decompressedData.Length) bytes)" "Gray"\n        } catch {\n            Write-ColorOutput "    ❌ Tile açma hatası: $($file.Name) - $($_.Exception.Message)" "Red"\n        }\n    }\n\n    Write-ColorOutput "    📊 Açma İstatistikleri:" "Gray"\n    Write-ColorOutput "      - Açılan Tile: $decompressedTiles" "Gray"\n    Write-ColorOutput "      - Toplam Boyut: $([math]::Round($totalDecompressedSize/1024, 2)) KB" "Gray"\n\n    if ($decompressedTiles -gt 0) {\n        Write-ColorOutput "    ✅ Tile açma başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Hiç tile açılmadı" "Red"\n        throw "Tile decompression failed"\n    }\n}\n\n# Prefetch testi\nfunction Test-TilePrefetch {\n    Write-ColorOutput "  🚀 Tile prefetch testi başlatılıyor..." "Gray"\n\n    $prefetchStartTime = Get-Date\n\n    # Mock rota noktaları oluştur\n    $routePoints = @()\n    for ($i = 0; $i -lt 20; $i++) {\n        $routePoints += @{\n            Lat = 41.0082 + ($i * 0.001)  # İstanbul koordinatları etrafında\n            Lng = 28.9784 + ($i * 0.001)\n        }\n    }\n\n    $prefetchedTiles = 0\n    $zoomLevels = @(10, 12, 15)\n\n    foreach ($point in $routePoints) {\n        foreach ($zoom in $zoomLevels) {\n            # Tile koordinatlarını hesapla (basitleştirilmiş)\n            $tileX = [math]::Floor(($point.Lng + 180) / 360 * [math]::Pow(2, $zoom))\n            $tileY = [math]::Floor((1 - [math]::Log([math]::Tan($point.Lat * [math]::PI / 180) + 1 / [math]::Cos($point.Lat * [math]::PI / 180)) / [math]::PI) / 2 * [math]::Pow(2, $zoom))\n\n            $tileKey = "$zoom/$tileX/$tileY"\n\n            # Prefetch simülasyonu\n            Write-ColorOutput "    📦 Prefetching tile: $tileKey" "Gray"\n            $prefetchedTiles++\n\n            # Kısa bir gecikme ekle (ağ çağrısı simülasyonu)\n            Start-Sleep -Milliseconds 10\n        }\n    }\n\n    $prefetchEndTime = Get-Date\n    $prefetchDuration = $prefetchEndTime - $prefetchStartTime\n\n    Write-ColorOutput "    📊 Prefetch İstatistikleri:" "Gray"\n    Write-ColorOutput "      - Prefetch Edilen Tile: $prefetchedTiles" "Gray"\n    Write-ColorOutput "      - Süre: $([math]::Round($prefetchDuration.TotalSeconds, 2)) saniye" "Gray"\n    Write-ColorOutput "      - Saniye Başına Tile: $([math]::Round($prefetchedTiles / $prefetchDuration.TotalSeconds, 1))" "Gray"\n\n    # Test sonuçlarını güncelle\n    $testResults.PrefetchStats.TilesPrefetched = $prefetchedTiles\n    $testResults.PrefetchStats.PrefetchDuration = $prefetchDuration\n    $testResults.PrefetchStats.CacheHitRate = 0.75 # Mock cache hit rate\n\n    if ($prefetchedTiles -gt 0) {\n        Write-ColorOutput "    ✅ Tile prefetch başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Prefetch başarısız" "Red"\n        throw "Tile prefetch failed"\n    }\n}\n\n# Cache temizleme testi\nfunction Test-CacheCleanup {\n    Write-ColorOutput "  🧹 Cache temizleme testi başlatılıyor..." "Gray"\n\n    $fullCachePath = Join-Path $ProjectPath $CachePath\n    $fullCompressedPath = Join-Path $ProjectPath $CompressedPath\n\n    # Eski test dosyaları oluştur\n    $oldFiles = @()\n    $oldDate = (Get-Date).AddDays(-8) # 8 gün önce\n\n    for ($i = 1; $i -le 5; $i++) {\n        $oldFileName = "old-tile-$i.tile"\n        $oldFilePath = Join-Path $fullCompressedPath $oldFileName\n        "old test data $i" | Out-File $oldFilePath -Encoding UTF8\n        (Get-Item $oldFilePath).LastWriteTime = $oldDate\n        $oldFiles += $oldFilePath\n    }\n\n    # Yeni test dosyası oluştur\n    $newFileName = "new-tile.tile"\n    $newFilePath = Join-Path $fullCompressedPath $newFileName\n    "new test data" | Out-File $newFilePath -Encoding UTF8\n\n    Write-ColorOutput "    📅 Eski dosyalar oluşturuldu: $($oldFiles.Count)" "Gray"\n    Write-ColorOutput "    📅 Yeni dosya oluşturuldu: $newFileName" "Gray"\n\n    # Eski dosyaları temizle (7 günden eski)\n    $retentionDays = 7\n    $cutoffDate = (Get-Date).AddDays(-$retentionDays)\n\n    $filesToDelete = Get-ChildItem $fullCompressedPath -Filter "*.tile" |\n        Where-Object { $_.LastWriteTime -lt $cutoffDate }\n\n    $deletedCount = 0\n    foreach ($file in $filesToDelete) {\n        Remove-Item $file.FullName -Force\n        $deletedCount++\n        Write-ColorOutput "    ✅ Eski dosya silindi: $($file.Name)" "Green"\n    }\n\n    # Yeni dosyanın kaldığını kontrol et\n    if (Test-Path $newFilePath) {\n        Write-ColorOutput "    ✅ Yeni dosya korundu" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Yeni dosya yanlışlıkla silindi" "Red"\n    }\n\n    Write-ColorOutput "    📊 Temizleme İstatistikleri:" "Gray"\n    Write-ColorOutput "      - Silinen Dosya: $deletedCount" "Gray"\n    Write-ColorOutput "      - Korunan Dosya: 1" "Gray"\n}\n\n# Yardımcı fonksiyonlar\nfunction Compress-TileData {\n    param([byte[]]$data)\n\n    $memoryStream = New-Object System.IO.MemoryStream\n    $gzipStream = New-Object System.IO.Compression.GZipStream($memoryStream, [System.IO.Compression.CompressionMode]::Compress)\n    $gzipStream.Write($data, 0, $data.Length)\n    $gzipStream.Close()\n    return $memoryStream.ToArray()\n}\n\nfunction Decompress-TileData {\n    param([byte[]]$compressedData)\n\n    $inputStream = New-Object System.IO.MemoryStream($compressedData)\n    $outputStream = New-Object System.IO.MemoryStream\n    $gzipStream = New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)\n    $gzipStream.CopyTo($outputStream)\n    $gzipStream.Close()\n    return $outputStream.ToArray()\n}\n\nfunction Get-CompressedTilePath {\n    param([string]$tileKey, [string]$compressedPath)\n\n    $parts = $tileKey -split "/"\n    if ($parts.Length -ge 3) {\n        $z = $parts[0]\n        $x = $parts[1].PadLeft(4, '0')\n        $y = $parts[2].PadLeft(4, '0')\n\n        $tilePath = Join-Path $compressedPath $z\n        $tilePath = Join-Path $tilePath $x.Substring(0, 2)\n        $tilePath = Join-Path $tilePath $x.Substring(2, 2)\n        $tilePath = Join-Path $tilePath "$x_$y.tile"\n\n        return $tilePath\n    }\n\n    return Join-Path $compressedPath "$($tileKey -replace '/', '_').tile"\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Tile optimizasyon testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-TileOptimization -TestName "Cache Klasörü Kurulumu" -TestScript { Test-CacheDirectorySetup }\nTest-TileOptimization -TestName "Tile Sıkıştırma" -TestScript { Test-TileCompression }\nTest-TileOptimization -TestName "Tile Açma" -TestScript { Test-TileDecompression }\nTest-TileOptimization -TestName "Tile Prefetch" -TestScript { Test-TilePrefetch }\nTest-TileOptimization -TestName "Cache Temizleme" -TestScript { Test-CacheCleanup }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Sıkıştırma istatistikleri\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "        🗜️ Sıkıştırma İstatistikleri" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\nWrite-ColorOutput "Sıkıştırılan Tile: $($testResults.CompressionStats.TilesCompressed)" "White"\nWrite-ColorOutput "Orijinal Boyut: $([math]::Round($testResults.CompressionStats.OriginalSize/1024, 2)) KB" "White"\nWrite-ColorOutput "Sıkıştırılmış Boyut: $([math]::Round($testResults.CompressionStats.CompressedSize/1024, 2)) KB" "White"\nWrite-ColorOutput "Sıkıştırma Oranı: $([math]::Round($testResults.CompressionStats.CompressionRatio, 3))" "Cyan"\nWrite-ColorOutput "Alan Tasarrufu: $([math]::Round(($testResults.CompressionStats.OriginalSize - $testResults.CompressionStats.CompressedSize)/1024, 2)) KB" "Green"\n\n# Prefetch istatistikleri\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "        🚀 Prefetch İstatistikleri" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\nWrite-ColorOutput "Prefetch Edilen Tile: $($testResults.PrefetchStats.TilesPrefetched)" "White"\nWrite-ColorOutput "Prefetch Süresi: $([math]::Round($testResults.PrefetchStats.PrefetchDuration.TotalSeconds, 2)) saniye" "White"\nWrite-ColorOutput "Cache Hit Rate: $([math]::Round($testResults.PrefetchStats.CacheHitRate * 100, 1))%" "Cyan"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "tile-optimization-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            cache_path = $CachePath\n            compressed_path = $CompressedPath\n            test_tile_count = $TestTileCount\n            compression_level = $CompressionLevel\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n        }\n        compression_stats = $testResults.CompressionStats\n        prefetch_stats = $testResults.PrefetchStats\n        details = $testResults.Details\n        recommendations = @(\n            "Sıkıştırma seviyesini artırarak daha fazla alan tasarrufu sağlayın",\n            "Prefetch radius'ını artırarak daha iyi offline deneyim sunun",\n            "Cache temizleme periyodunu optimize edin",\n            "Paralel indirme sayısını artırarak prefetch hızını iyileştirin",\n            "Tile boyut limitlerini kullanım paternlerine göre ayarlayın"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Offline-Optimized"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tile optimizasyon testleri başarılı! Offline sistem hazır." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı tile optimizasyon testleri başarısız oldu." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n