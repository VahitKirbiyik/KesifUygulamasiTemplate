# Test-NavigationSimulation.ps1 - Offline navigation simülasyon testi\n# Bu script navigation simülasyonunu test eder ve CI/CD pipeline ile entegre çalışır\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [int]$SimulationSpeed = 500,\n    [string]$SimulationMode = "normal"\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:SIMULATION_SPEED = $SimulationSpeed.ToString()\n$env:SIMULATION_MODE = $SimulationMode\n$env:ENABLE_SIMULATION_LOGGING = if ($Verbose) { "true" } else { "false" }\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      🚗 Navigation Simülasyon Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-NavigationSimulation {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# GPS Mock Testi\nfunction Test-GpsMock {\n    Write-ColorOutput "  📡 GPS mock sistemi test ediliyor..." "Gray"\n\n    # GPS konfigürasyon dosyası kontrolü\n    $gpsConfigPath = Join-Path $env:APPDATA "KesifUygulamasi\SimulationData\gps_config.json"\n    $gpsConfigDir = Split-Path $gpsConfigPath -Parent\n\n    if (!(Test-Path $gpsConfigDir)) {\n        New-Item -ItemType Directory -Path $gpsConfigDir -Force | Out-Null\n    }\n\n    if (Test-Path $gpsConfigPath) {\n        Write-ColorOutput "    ✅ GPS konfigürasyon dosyası bulundu" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  GPS konfigürasyon dosyası bulunamadı, oluşturuluyor..." "Yellow"\n        $gpsConfig = @{\n            accuracy = 5.0\n            update_interval = $SimulationSpeed\n            mock_provider = "NavigationSimulator"\n        } | ConvertTo-Json\n        $gpsConfig | Out-File $gpsConfigPath -Encoding UTF8\n    }\n}\n\n# Rota Simülasyon Testi\nfunction Test-RouteSimulation {\n    Write-ColorOutput "  🗺️  Rota simülasyonu test ediliyor..." "Gray"\n\n    # Örnek rota oluştur\n    $sampleRoute = @(\n        @{ Lat = 41.0082; Lng = 28.9784 }, # İstanbul\n        @{ Lat = 41.0151; Lng = 28.9795 }, # Şişli\n        @{ Lat = 41.0222; Lng = 28.9855 }, # Mecidiyeköy\n        @{ Lat = 41.0292; Lng = 28.9915 }, # Levent\n        @{ Lat = 41.0362; Lng = 28.9975 }  # 4. Levent\n    )\n\n    Write-ColorOutput "    📍 Örnek rota oluşturuldu: $($sampleRoute.Count) nokta" "Gray"\n\n    # Simülasyon hızı testi\n    $expectedDuration = ($sampleRoute.Count - 1) * $SimulationSpeed / 1000\n    Write-ColorOutput "    ⏱️  Beklenen simülasyon süresi: ${expectedDuration}s" "Gray"\n\n    # Simülasyon verisi kontrolü\n    $simulationDataPath = Join-Path $env:APPDATA "KesifUygulamasi\SimulationData"\n    if (Test-Path $simulationDataPath) {\n        $simulationFiles = Get-ChildItem $simulationDataPath -Filter "simulation_*.json"\n        Write-ColorOutput "    📊 Önceki simülasyon dosyaları: $($simulationFiles.Count)" "Gray"\n    }\n}\n\n# Rota Sapması Testi\nfunction Test-RouteDeviation {\n    Write-ColorOutput "  🚨 Rota sapması simülasyonu test ediliyor..." "Gray"\n\n    if ($SimulationMode -eq "deviation_test") {\n        Write-ColorOutput "    🔄 Sapma düzeltme modu aktif" "Gray"\n    } else {\n        Write-ColorOutput "    📍 Normal rota modu" "Gray"\n    }\n\n    # Sapma algılama simülasyonu\n    $deviationThreshold = 0.001  # ~100 metre\n    Write-ColorOutput "    📏 Sapma eşiği: ${deviationThreshold} derece" "Gray"\n}\n\n# Offline Navigation Testi\nfunction Test-OfflineNavigation {\n    Write-ColorOutput "  📱 Offline navigation testi..." "Gray"\n\n    # Offline veri kontrolü\n    $offlineDataPath = Join-Path $ProjectPath "OfflineData"\n    if (Test-Path $offlineDataPath) {\n        $tileFiles = Get-ChildItem $offlineDataPath -Filter "*.png" -Recurse\n        Write-ColorOutput "    🗺️  Offline tile dosyaları: $($tileFiles.Count)" "Gray"\n    } else {\n        Write-ColorOutput "    ⚠️  Offline veri klasörü bulunamadı" "Yellow"\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Navigation simülasyon testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-NavigationSimulation -TestName "GPS Mock Sistemi" -TestScript { Test-GpsMock }\nTest-NavigationSimulation -TestName "Rota Simülasyonu" -TestScript { Test-RouteSimulation }\nTest-NavigationSimulation -TestName "Rota Sapması" -TestScript { Test-RouteDeviation }\nTest-NavigationSimulation -TestName "Offline Navigation" -TestScript { Test-OfflineNavigation }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "navigation-simulation-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            simulation_speed = $SimulationSpeed\n            simulation_mode = $SimulationMode\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        configuration = @{\n            simulation_speed = $SimulationSpeed\n            simulation_mode = $SimulationMode\n            enable_logging = $Verbose\n            test_environment = $TestEnvironment\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "GPS mock sistemini test ortamında etkinleştirin",\n            "Rota sapması senaryolarını daha sık test edin",\n            "Offline tile verilerini güncel tutun",\n            "Simülasyon hızını CI/CD ortamına göre ayarlayın"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Navigation-Simulated"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tüm navigation simülasyon testleri başarılı! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı navigation simülasyon testleri başarısız. Lütfen simülasyon ayarlarını kontrol edin." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n