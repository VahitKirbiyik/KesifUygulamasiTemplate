# SecurityAudit.ps1\n# Security audit script for JWT, OAuth, and API key validation\n# Performs comprehensive security checks and generates compliance reports\n\nparam(\n    [string]$ProjectPath = $PSScriptRoot,\n    [string]$OutputPath = "security-reports",\n    [string]$ConfigPath = "appsettings.json",\n    [switch]$EnableDetailedAudit,\n    [switch]$CheckEnvironmentVariables,\n    [switch]$ValidateCertificates,\n    [switch]$AuditApiKeys,\n    [switch]$CheckJwtTokens,\n    [switch]$ValidateOAuth,\n    [int]$SecurityScoreThreshold = 80,\n    [switch]$FailOnCriticalIssues,\n    [switch]$GenerateHtmlReport,\n    [switch]$SendNotifications\n)\n\n# Environment variables for security audit\n$env:SECURITY_AUDIT_ENABLED = $EnableDetailedAudit.ToString().ToLower()\n$env:SECURITY_REPORTS_PATH = if ($env:SECURITY_REPORTS_PATH) { $env:SECURITY_REPORTS_PATH } else { "$OutputPath/security" }\n$env:SECURITY_SCORE_THRESHOLD = $SecurityScoreThreshold.ToString()\n\n# Security audit configuration\n$auditConfig = @{\n    ProjectPath = $ProjectPath\n    OutputPath = $OutputPath\n    ConfigPath = $ConfigPath\n    AuditStartTime = Get-Date\n    SecurityIssues = @()\n    ComplianceChecks = @()\n    SecurityScore = 100\n    CriticalIssues = 0\n    WarningIssues = 0\n    InfoIssues = 0\n}\n\n# Create output directories\nNew-Item -ItemType Directory -Force -Path $auditConfig.OutputPath | Out-Null\nNew-Item -ItemType Directory -Force -Path $env:SECURITY_REPORTS_PATH | Out-Null\n\nWrite-Host "=== Security Audit Started ===" -ForegroundColor Cyan\nWrite-Host "Project Path: $ProjectPath" -ForegroundColor Gray\nWrite-Host "Output Path: $OutputPath" -ForegroundColor Gray\nWrite-Host "Security Threshold: $SecurityScoreThreshold%" -ForegroundColor Gray\nWrite-Host ""\n\n# Security check functions\nfunction Test-SecurityIssue {\n    param(\n        [string]$CheckName,\n        [string]$Description,\n        [scriptblock]$CheckBlock,\n        [ValidateSet("Critical", "Warning", "Info")]\n        [string]$Severity = "Info"\n    )\n\n    Write-Host "Checking: $CheckName..." -ForegroundColor Yellow\n\n    try {\n        $result = & $CheckBlock\n        $passed = $result.Passed\n\n        $issue = @{\n            CheckName = $CheckName\n            Description = $Description\n            Severity = $Severity\n            Passed = $passed\n            Details = $result.Details\n            Recommendation = $result.Recommendation\n            Timestamp = Get-Date\n        }\n\n        $auditConfig.SecurityIssues += $issue\n\n        if ($passed) {\n            Write-Host "✓ $CheckName PASSED" -ForegroundColor Green\n        } else {\n            Write-Host "✗ $CheckName FAILED ($Severity)" -ForegroundColor Red\n\n            # Security score'u düşür\n            switch ($Severity) {\n                "Critical" {\n                    $auditConfig.SecurityScore -= 20\n                    $auditConfig.CriticalIssues++\n                }\n                "Warning" {\n                    $auditConfig.SecurityScore -= 10\n                    $auditConfig.WarningIssues++\n                }\n                "Info" {\n                    $auditConfig.SecurityScore -= 5\n                    $auditConfig.InfoIssues++\n                }\n            }\n        }\n\n        return $passed\n    }\n    catch {\n        $issue = @{\n            CheckName = $CheckName\n            Description = $Description\n            Severity = "Critical"\n            Passed = $false\n            Details = "Check execution failed: $($_.Exception.Message)"\n            Recommendation = "Fix the security check implementation"\n            Timestamp = Get-Date\n        }\n\n        $auditConfig.SecurityIssues += $issue\n        $auditConfig.SecurityScore -= 25\n        $auditConfig.CriticalIssues++\n\n        Write-Host "✗ $CheckName ERROR: $($_.Exception.Message)" -ForegroundColor Red\n        return $false\n    }\n}\n\n# JWT Token validation\nTest-SecurityIssue "JWT Token Validation" "Validate JWT tokens for proper signing and expiration" {\n    $jwtIssues = @()\n\n    # Check for JWT configuration in appsettings\n    $configFile = Join-Path $auditConfig.ProjectPath $auditConfig.ConfigPath\n    if (Test-Path $configFile) {\n        $config = Get-Content $configFile -Raw | ConvertFrom-Json\n\n        # Check JWT settings\n        if ($config.Jwt) {\n            if (-not $config.Jwt.SecretKey -or $config.Jwt.SecretKey.Length -lt 32) {\n                $jwtIssues += "JWT SecretKey is too short or missing (minimum 32 characters required)"\n            }\n\n            if (-not $config.Jwt.Issuer) {\n                $jwtIssues += "JWT Issuer is not configured"\n            }\n\n            if (-not $config.Jwt.Audience) {\n                $jwtIssues += "JWT Audience is not configured"\n            }\n\n            if ($config.Jwt.ExpirationMinutes -and $config.Jwt.ExpirationMinutes -gt 1440) {\n                $jwtIssues += "JWT expiration time is too long (maximum 24 hours recommended)"\n            }\n        } else {\n            $jwtIssues += "JWT configuration section is missing"\n        }\n    }\n\n    # Check environment variables for JWT secrets\n    $jwtSecret = $env:JWT_SECRET_KEY\n    if ($jwtSecret) {\n        if ($jwtSecret.Length -lt 32) {\n            $jwtIssues += "JWT_SECRET_KEY environment variable is too short"\n        }\n    } else {\n        $jwtIssues += "JWT_SECRET_KEY environment variable is not set"\n    }\n\n    return @{\n        Passed = $jwtIssues.Count -eq 0\n        Details = if ($jwtIssues.Count -gt 0) { $jwtIssues -join "; " } else { "All JWT validations passed" }\n        Recommendation = "Configure strong JWT secrets, set proper issuer/audience, and use reasonable expiration times"\n    }\n} "Critical"\n\n# API Key validation\nTest-SecurityIssue "API Key Security" "Validate API keys for proper storage and rotation" {\n    $apiKeyIssues = @()\n\n    # Check for hardcoded API keys in source files\n    $sourceFiles = Get-ChildItem -Path $auditConfig.ProjectPath -Include "*.cs", "*.json", "*.config" -Recurse |\n                   Where-Object { $_.FullName -notmatch "\\bin\\|\\.git\\" }\n\n    foreach ($file in $sourceFiles) {\n        $content = Get-Content $file.FullName -Raw\n\n        # Check for common API key patterns\n        $apiKeyPatterns = @(\n            "api[_-]?key\s*[:=]\s*['`"][^'`"]+['`"]",\n            "apikey\s*[:=]\s*['`"][^'`"]+['`"]",\n            "secret[_-]?key\s*[:=]\s*['`"][^'`"]+['`"]",\n            "access[_-]?token\s*[:=]\s*['`"][^'`"]+['`"]"\n        )\n\n        foreach ($pattern in $apiKeyPatterns) {\n            if ($content -match $pattern) {\n                $apiKeyIssues += "Potential hardcoded API key found in $($file.Name)"\n            }\n        }\n    }\n\n    # Check environment variables\n    $apiKeys = @($env:GOOGLE_MAPS_API_KEY, $env:MAPBOX_ACCESS_TOKEN, $env:HERE_API_KEY)\n    foreach ($apiKey in $apiKeys) {\n        if ($apiKey -and $apiKey.Length -lt 20) {\n            $apiKeyIssues += "API key appears to be too short or invalid"\n        }\n    }\n\n    return @{\n        Passed = $apiKeyIssues.Count -eq 0\n        Details = if ($apiKeyIssues.Count -gt 0) { $apiKeyIssues -join "; " } else { "No API key security issues found" }\n        Recommendation = "Store API keys in environment variables, use secret management, and rotate keys regularly"\n    }\n} "Critical"\n\n# OAuth configuration validation\nTest-SecurityIssue "OAuth Configuration" "Validate OAuth settings for secure authentication" {\n    $oauthIssues = @()\n\n    $configFile = Join-Path $auditConfig.ProjectPath $auditConfig.ConfigPath\n    if (Test-Path $configFile) {\n        $config = Get-Content $configFile -Raw | ConvertFrom-Json\n\n        if ($config.OAuth) {\n            if (-not $config.OAuth.ClientId) {\n                $oauthIssues += "OAuth ClientId is not configured"\n            }\n\n            if (-not $config.OAuth.ClientSecret) {\n                $oauthIssues += "OAuth ClientSecret is not configured"\n            }\n\n            if (-not $config.OAuth.Authority) {\n                $oauthIssues += "OAuth Authority is not configured"\n            }\n\n            if ($config.OAuth.RedirectUris -and $config.OAuth.RedirectUris.Count -eq 0) {\n                $oauthIssues += "No OAuth redirect URIs configured"\n            }\n        } else {\n            $oauthIssues += "OAuth configuration section is missing"\n        }\n    }\n\n    # Check for OAuth environment variables\n    if (-not $env:OAUTH_CLIENT_ID) {\n        $oauthIssues += "OAUTH_CLIENT_ID environment variable is not set"\n    }\n\n    if (-not $env:OAUTH_CLIENT_SECRET) {\n        $oauthIssues += "OAUTH_CLIENT_SECRET environment variable is not set"\n    }\n\n    return @{\n        Passed = $oauthIssues.Count -eq 0\n        Details = if ($oauthIssues.Count -gt 0) { $oauthIssues -join "; " } else { "OAuth configuration is properly set" }\n        Recommendation = "Configure OAuth client credentials, set proper redirect URIs, and use secure OAuth flows"\n    }\n} "Warning"\n\n# Certificate validation\nTest-SecurityIssue "SSL/TLS Certificates" "Validate SSL certificates for secure connections" {\n    $certIssues = @()\n\n    try {\n        # Check for certificate files\n        $certFiles = Get-ChildItem -Path $auditConfig.ProjectPath -Include "*.pfx", "*.p12", "*.cer", "*.crt" -Recurse\n\n        if ($certFiles.Count -eq 0) {\n            $certIssues += "No SSL certificate files found in project"\n        }\n\n        # Check certificate configurations\n        $configFile = Join-Path $auditConfig.ProjectPath $auditConfig.ConfigPath\n        if (Test-Path $configFile) {\n            $config = Get-Content $configFile -Raw | ConvertFrom-Json\n\n            if (-not $config.Kestrel -or -not $config.Kestrel.Endpoints -or -not $config.Kestrel.Endpoints.Https) {\n                $certIssues += "HTTPS endpoint not configured in Kestrel"\n            }\n        }\n\n        # Check for certificate environment variables\n        if (-not $env:ASPNETCORE_Kestrel__Certificates__Default__Path) {\n            $certIssues += "Certificate path not configured via environment variables"\n        }\n\n    } catch {\n        $certIssues += "Certificate validation failed: $($_.Exception.Message)"\n    }\n\n    return @{\n        Passed = $certIssues.Count -eq 0\n        Details = if ($certIssues.Count -gt 0) { $certIssues -join "; " } else { "SSL/TLS certificates are properly configured" }\n        Recommendation = "Configure SSL certificates, enable HTTPS, and ensure certificate validity"\n    }\n} "Warning"\n\n# Environment variable security\nTest-SecurityIssue "Environment Variables" "Check for sensitive data in environment variables" {\n    $envIssues = @()\n\n    # Get all environment variables\n    $allEnvVars = Get-ChildItem Env:\n\n    # Check for sensitive patterns\n    $sensitivePatterns = @(\n        "*password*",\n        "*secret*",\n        "*key*",\n        "*token*",\n        "*credential*"\n    )\n\n    foreach ($envVar in $allEnvVars) {\n        foreach ($pattern in $sensitivePatterns) {\n            if ($envVar.Name -like $pattern) {\n                $value = $envVar.Value\n                if ($value -and $value.Length -gt 10) {\n                    # Check if value looks like actual sensitive data\n                    if ($value -notmatch "^[\w\d]{8,}$" -or $value.Length -lt 16) {\n                        $envIssues += "Potentially weak sensitive data in $($envVar.Name)"\n                    }\n                }\n            }\n        }\n    }\n\n    return @{\n        Passed = $envIssues.Count -eq 0\n        Details = if ($envIssues.Count -gt 0) { $envIssues -join "; " } else { "Environment variables are secure" }\n        Recommendation = "Use strong passwords/keys, avoid hardcoded secrets, and use secret management systems"\n    }\n} "Warning"\n\n# CORS configuration\nTest-SecurityIssue "CORS Security" "Validate CORS settings for secure cross-origin requests" {\n    $corsIssues = @()\n\n    $configFile = Join-Path $auditConfig.ProjectPath $auditConfig.ConfigPath\n    if (Test-Path $configFile) {\n        $config = Get-Content $configFile -Raw | ConvertFrom-Json\n\n        if ($config.Cors) {\n            $origins = $config.Cors.AllowedOrigins\n            if ($origins -and $origins -contains "*") {\n                $corsIssues += "CORS allows all origins (*) which is insecure"\n            }\n\n            if (-not $config.Cors.AllowedHeaders -or $config.Cors.AllowedHeaders.Count -eq 0) {\n                $corsIssues += "CORS allowed headers not properly configured"\n            }\n\n            if (-not $config.Cors.AllowedMethods -or $config.Cors.AllowedMethods.Count -eq 0) {\n                $corsIssues += "CORS allowed methods not properly configured"\n            }\n        } else {\n            $corsIssues += "CORS configuration section is missing"\n        }\n    }\n\n    return @{\n        Passed = $corsIssues.Count -eq 0\n        Details = if ($corsIssues.Count -gt 0) { $corsIssues -join "; " } else { "CORS is properly configured" }\n        Recommendation = "Configure specific allowed origins, headers, and methods for CORS"\n    }\n} "Warning"\n\n# Security headers check\nTest-SecurityIssue "Security Headers" "Check for security headers in HTTP responses" {\n    $headerIssues = @()\n\n    # This would typically check actual HTTP responses\n    # For now, we'll check configuration\n    $configFile = Join-Path $auditConfig.ProjectPath $auditConfig.ConfigPath\n    if (Test-Path $configFile) {\n        $config = Get-Content $configFile -Raw | ConvertFrom-Json\n\n        $requiredHeaders = @(\n            "X-Content-Type-Options",\n            "X-Frame-Options",\n            "X-XSS-Protection",\n            "Strict-Transport-Security"\n        )\n\n        if (-not $config.SecurityHeaders) {\n            $headerIssues += "Security headers configuration is missing"\n        } else {\n            foreach ($header in $requiredHeaders) {\n                if (-not $config.SecurityHeaders.$header) {\n                    $headerIssues += "Required security header missing: $header"\n                }\n            }\n        }\n    }\n\n    return @{\n        Passed = $headerIssues.Count -eq 0\n        Details = if ($headerIssues.Count -gt 0) { $headerIssues -join "; " } else { "Security headers are properly configured" }\n        Recommendation = "Implement security headers like CSP, HSTS, X-Frame-Options, and X-Content-Type-Options"\n    }\n} "Info"\n\n# Dependency vulnerability check\nTest-SecurityIssue "Dependency Vulnerabilities" "Check for known vulnerabilities in dependencies" {\n    $vulnIssues = @()\n\n    # Check for package files\n    $packageFiles = @(\n        (Join-Path $auditConfig.ProjectPath "packages.config"),\n        (Join-Path $auditConfig.ProjectPath "Directory.Packages.props"),\n        (Join-Path $auditConfig.ProjectPath "package.json")\n    )\n\n    $hasPackageFile = $false\n    foreach ($file in $packageFiles) {\n        if (Test-Path $file) {\n            $hasPackageFile = $true\n            break\n        }\n    }\n\n    if (-not $hasPackageFile) {\n        $vulnIssues += "No package management files found"\n    }\n\n    # This would typically run vulnerability scanners\n    # For now, we'll check for outdated packages conceptually\n    $vulnIssues += "Automated vulnerability scanning not implemented"\n\n    return @{\n        Passed = $vulnIssues.Count -eq 0\n        Details = if ($vulnIssues.Count -gt 0) { $vulnIssues -join "; " } else { "No dependency vulnerabilities found" }\n        Recommendation = "Run regular dependency vulnerability scans and keep packages updated"\n    }\n} "Info"\n\n# Generate security score\n$auditConfig.SecurityScore = [math]::Max(0, $auditConfig.SecurityScore)\n\n# Generate HTML report\nif ($GenerateHtmlReport) {\n    Write-Host ""\n    Write-Host "=== Generating Security Audit Report ===" -ForegroundColor Cyan\n\n    $htmlReport = @"\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Security Audit Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; margin-bottom: 20px; }\n        .score { font-size: 24px; font-weight: bold; text-align: center; margin: 20px 0; }\n        .score.high { color: #4CAF50; }\n        .score.medium { color: #FF9800; }\n        .score.low { color: #f44336; }\n        .issue { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }\n        .passed { border-color: #4CAF50; background-color: #f8fff8; }\n        .failed { border-color: #f44336; background-color: #fff8f8; }\n        .critical { border-left: 5px solid #f44336; }\n        .warning { border-left: 5px solid #FF9800; }\n        .info { border-left: 5px solid #2196F3; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <div class="header">\n        <h1>Security Audit Report</h1>\n        <p><strong>Generated:</strong> $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>\n        <p><strong>Project:</strong> $ProjectPath</p>\n        <p><strong>Security Threshold:</strong> $SecurityScoreThreshold%</p>\n    </div>\n\n    <div class="score $(if ($auditConfig.SecurityScore -ge 80) { 'high' } elseif ($auditConfig.SecurityScore -ge 60) { 'medium' } else { 'low' })">\n        Security Score: $($auditConfig.SecurityScore)%\n    </div>\n\n    <h2>Security Issues</h2>\n"@\n\n    foreach ($issue in $auditConfig.SecurityIssues) {\n        $cssClass = if ($issue.Passed) { "passed" } else { "failed $($issue.Severity.ToLower())" }\n        $status = if ($issue.Passed) { "✓ PASSED" } else { "✗ FAILED" }\n\n        $htmlReport += @"\n    <div class="issue $cssClass">\n        <h3>$($issue.CheckName) - $status</h3>\n        <p><strong>Description:</strong> $($issue.Description)</p>\n        <p><strong>Severity:</strong> $($issue.Severity)</p>\n        <p><strong>Details:</strong> $($issue.Details)</p>\n        <p><strong>Recommendation:</strong> $($issue.Recommendation)</p>\n    </div>\n"@\n    }\n\n    $htmlReport += @"\n    <h2>Summary</h2>\n    <table>\n        <tr><th>Metric</th><th>Value</th></tr>\n        <tr><td>Total Checks</td><td>$($auditConfig.SecurityIssues.Count)</td></tr>\n        <tr><td>Passed Checks</td><td>$($auditConfig.SecurityIssues | Where-Object { $_.Passed }).Count)</td></tr>\n        <tr><td>Failed Checks</td><td>$($auditConfig.SecurityIssues | Where-Object { -not $_.Passed }).Count)</td></tr>\n        <tr><td>Critical Issues</td><td>$($auditConfig.CriticalIssues)</td></tr>\n        <tr><td>Warning Issues</td><td>$($auditConfig.WarningIssues)</td></tr>\n        <tr><td>Info Issues</td><td>$($auditConfig.InfoIssues)</td></tr>\n        <tr><td>Security Score</td><td>$($auditConfig.SecurityScore)%</td></tr>\n    </table>\n</body>\n</html>\n"@\n\n    $htmlReportPath = Join-Path $auditConfig.OutputPath "security-audit-report.html"\n    $htmlReport | Out-File -FilePath $htmlReportPath -Encoding UTF8\n\n    Write-Host "HTML report generated: $htmlReportPath" -ForegroundColor Green\n}\n\n# Generate JSON summary\n$summaryPath = Join-Path $auditConfig.OutputPath "security-audit-summary.json"\n$summary = @{\n    AuditRun = @{\n        StartTime = $auditConfig.AuditStartTime\n        EndTime = Get-Date\n        Duration = ((Get-Date) - $auditConfig.AuditStartTime).TotalSeconds\n        Configuration = @{\n            ProjectPath = $ProjectPath\n            SecurityScoreThreshold = $SecurityScoreThreshold\n            EnableDetailedAudit = $EnableDetailedAudit\n            CheckEnvironmentVariables = $CheckEnvironmentVariables\n            ValidateCertificates = $ValidateCertificates\n            AuditApiKeys = $AuditApiKeys\n            CheckJwtTokens = $CheckJwtTokens\n            ValidateOAuth = $ValidateOAuth\n        }\n    }\n    Results = @{\n        TotalChecks = $auditConfig.SecurityIssues.Count\n        PassedChecks = ($auditConfig.SecurityIssues | Where-Object { $_.Passed }).Count\n        FailedChecks = ($auditConfig.SecurityIssues | Where-Object { -not $_.Passed }).Count\n        CriticalIssues = $auditConfig.CriticalIssues\n        WarningIssues = $auditConfig.WarningIssues\n        InfoIssues = $auditConfig.InfoIssues\n        SecurityScore = $auditConfig.SecurityScore\n        ScorePercentage = [math]::Round(($auditConfig.SecurityScore / 100) * 100, 1)\n        Passed = $auditConfig.SecurityScore -ge $SecurityScoreThreshold\n    }\n    Issues = $auditConfig.SecurityIssues\n}\n\n$summary | ConvertTo-Json -Depth 10 | Out-File -FilePath $summaryPath -Encoding UTF8\n\nWrite-Host ""\nWrite-Host "=== Security Audit Summary ===" -ForegroundColor Cyan\nWrite-Host "Total Checks: $($summary.Results.TotalChecks)" -ForegroundColor White\nWrite-Host "Passed: $($summary.Results.PassedChecks)" -ForegroundColor Green\nWrite-Host "Failed: $($summary.Results.FailedChecks)" -ForegroundColor Red\nWrite-Host "Critical Issues: $($summary.Results.CriticalIssues)" -ForegroundColor Red\nWrite-Host "Security Score: $($summary.Results.SecurityScore)%" -ForegroundColor Yellow\nWrite-Host ""\nWrite-Host "Results saved to: $summaryPath" -ForegroundColor Gray\n\n# Determine exit code\n$exitCode = 0\n\nif ($auditConfig.SecurityScore -lt $SecurityScoreThreshold) {\n    Write-Host "Security score ($($auditConfig.SecurityScore)%) is below threshold ($SecurityScoreThreshold%)." -ForegroundColor Red\n    $exitCode = 1\n}\n\nif ($FailOnCriticalIssues -and $auditConfig.CriticalIssues -gt 0) {\n    Write-Host "Critical security issues found. Failing audit." -ForegroundColor Red\n    $exitCode = 1\n}\n\n# Send notifications if enabled\nif ($SendNotifications -and $exitCode -ne 0) {\n    Write-Host "Sending security alert notifications..." -ForegroundColor Yellow\n    # Implementation for sending notifications would go here\n}\n\nWrite-Host ""\nWrite-Host "=== Security Audit Completed ===" -ForegroundColor Cyan\n\nexit $exitCode\n