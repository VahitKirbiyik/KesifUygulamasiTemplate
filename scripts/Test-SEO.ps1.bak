# Test-SEO.ps1 - CI/CD pipeline ile entegre SEO dosya doƒürulama testi
# Bu script SEO dosyalarƒ±nƒ±, meta etiketleri ve search engine optimizasyonunu doƒürular

param(
    [string]$TestEnvironment = "local",
    [string]$Configuration = "Debug",
    [string]$ProjectPath = $PSScriptRoot,
    [switch]$SkipBuild,
    [switch]$Verbose,
    [switch]$ExportJson,
    [string]$Domain = "https://kesifapp.com"
)

# Script ayarlarƒ±
$ErrorActionPreference = "Stop"
$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }

# Test sonu√ßlarƒ± i√ßin deƒüi≈ükenler
$testResults = @{
    TotalTests = 0
    PassedTests = 0
    FailedTests = 0
    TestDuration = [TimeSpan]::Zero
    Details = @()
}

# Renkli output i√ßin
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Ba≈ülƒ±k
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "      üîç SEO Dosya Doƒürulama Testi" "Cyan"
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput ""

# Environment deƒüi≈ükenlerini ayarla
$env:TEST_ENVIRONMENT = $TestEnvironment
$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }
$env:DOMAIN = $Domain

Write-ColorOutput "Test Environment: $TestEnvironment" "Yellow"
Write-ColorOutput "Domain: $Domain" "Yellow"
Write-ColorOutput "Project Path: $ProjectPath" "Yellow"
Write-ColorOutput ""

# Proje yolunu kontrol et
if (!(Test-Path $ProjectPath)) {
    Write-ColorOutput "Hata: Proje yolu bulunamadƒ±: $ProjectPath" "Red"
    exit 1
}

# SEO dosyalar listesi
$seoFiles = @(
    @{ Path = ".\seo\description.txt"; Name = "SEO Description"; Required = $true; MinLength = 120; MaxLength = 160 },
    @{ Path = ".\seo\keywords.txt"; Name = "SEO Keywords"; Required = $true; MinCount = 5; MaxCount = 15 },
    @{ Path = ".\seo\title.txt"; Name = "Page Title"; Required = $true; MinLength = 30; MaxLength = 60 },
    @{ Path = ".\seo\meta-tags.html"; Name = "Meta Tags HTML"; Required = $false },
    @{ Path = ".\seo\structured-data.json"; Name = "Structured Data JSON"; Required = $false },
    @{ Path = ".\seo\robots-meta.html"; Name = "Robots Meta"; Required = $false },
    @{ Path = ".\seo\canonical-urls.txt"; Name = "Canonical URLs"; Required = $false }
)

# HTML dosyalar listesi (meta etiket kontrol√º i√ßin)
$htmlFiles = @(
    ".\index.html",
    ".\wwwroot\index.html",
    ".\Pages\Index.cshtml",
    ".\Views\Home\Index.cshtml"
)

# Test fonksiyonlarƒ±
function Test-SEOFile {
    param(
        [string]$FilePath,
        [string]$FileName,
        [bool]$Required = $true,
        [int]$MinLength = 0,
        [int]$MaxLength = 0,
        [int]$MinCount = 0,
        [int]$MaxCount = 0
    )

    $startTime = Get-Date
    $testPassed = $false
    $errorMessage = ""
    $warnings = @()

    Write-ColorOutput "üß™ $FileName dosyasƒ± kontrol ediliyor..." "White"

    try {
        $fullPath = Join-Path $ProjectPath $FilePath

        if (Test-Path $fullPath) {
            Write-ColorOutput "  ‚úÖ Dosya bulundu: $FilePath" "Green"

            # Dosya i√ßeriƒüi kontrol√º
            $content = Get-Content $fullPath -Raw
            $fileInfo = Get-Item $fullPath
            $fileSize = $fileInfo.Length

            if ($fileSize -eq 0) {
                $errorMessage = "Dosya bo≈ü"
                Write-ColorOutput "  ‚ö†Ô∏è  Dosya bo≈ü: $fileSize bytes" "Yellow"
                $testPassed = !$Required
            } else {
                Write-ColorOutput "  üìÑ Dosya boyutu: $fileSize bytes" "Gray"

                # ƒ∞√ßerik validasyonu
                $contentValid = Test-SEOContent -Content $content -FileName $FileName -MinLength $MinLength -MaxLength $MaxLength -MinCount $MinCount -MaxCount $MaxCount -Warnings ([ref]$warnings)

                if ($contentValid) {
                    $testPassed = $true
                    Write-ColorOutput "  ‚úÖ Dosya i√ßeriƒüi ge√ßerli" "Green"
                } else {
                    $errorMessage = "Dosya i√ßeriƒüi validasyon hatasƒ±"
                    Write-ColorOutput "  ‚ùå Dosya i√ßeriƒüi ge√ßersiz" "Red"
                }

                # Uyarƒ±larƒ± g√∂ster
                foreach ($warning in $warnings) {
                    Write-ColorOutput "  ‚ö†Ô∏è  $warning" "Yellow"
                }
            }
        } else {
            $errorMessage = "Dosya bulunamadƒ±"
            if ($Required) {
                Write-ColorOutput "  ‚ùå Gerekli dosya bulunamadƒ±: $FilePath" "Red"
            } else {
                Write-ColorOutput "  ‚ö†Ô∏è  ƒ∞steƒüe baƒülƒ± dosya bulunamadƒ±: $FilePath" "Yellow"
                $testPassed = $true
            }
        }

    } catch {
        $errorMessage = $_.Exception.Message
        Write-ColorOutput "  üí• Dosya kontrol hatasƒ±: $errorMessage" "Red"
    } finally {
        $endTime = Get-Date
        $duration = $endTime - $startTime

        $testResults.TotalTests++
        if ($testPassed) {
            $testResults.PassedTests++
        } else {
            $testResults.FailedTests++
        }
        $testResults.TestDuration += $duration

        $testResults.Details += @{
            TestName = "$FileName SEO Kontrol√º"
            FilePath = $FilePath
            Passed = $testPassed
            Required = $Required
            Duration = $duration
            ErrorMessage = $errorMessage
            Warnings = $warnings
        }
    }
}

function Test-SEOContent {
    param(
        [string]$Content,
        [string]$FileName,
        [int]$MinLength,
        [int]$MaxLength,
        [int]$MinCount,
        [int]$MaxCount,
        [ref]$Warnings
    )

    $isValid = $true

    switch -Wildcard ($FileName) {
        "*Description*" {
            # Description kontrol√º
            $length = $Content.Length
            if ($MinLength -gt 0 -and $length -lt $MinLength) {
                $Warnings.Value += "Description √ßok kƒ±sa: ${length}/${MinLength} karakter"
                $isValid = $false
            }
            if ($MaxLength -gt 0 -and $length -gt $MaxLength) {
                $Warnings.Value += "Description √ßok uzun: ${length}/${MaxLength} karakter"
                $isValid = $false
            }

            # √ñzel karakter kontrol√º
            if ($Content -match '[<>]') {
                $Warnings.Value += "Description'da HTML etiketleri olmamalƒ±"
            }
        }

        "*Keywords*" {
            # Keywords kontrol√º
            $keywords = $Content -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ }
            $count = $keywords.Count

            if ($MinCount -gt 0 -and $count -lt $MinCount) {
                $Warnings.Value += "Yetersiz keyword sayƒ±sƒ±: ${count}/${MinCount}"
                $isValid = $false
            }
            if ($MaxCount -gt 0 -and $count -gt $MaxCount) {
                $Warnings.Value += "√áok fazla keyword: ${count}/${MaxCount}"
            }

            # Tekrar eden keyword kontrol√º
            $duplicates = $keywords | Group-Object | Where-Object { $_.Count -gt 1 }
            if ($duplicates) {
                $Warnings.Value += "Tekrar eden keyword'ler: $($duplicates.Name -join ', ')"
            }
        }

        "*Title*" {
            # Title kontrol√º
            $length = $Content.Length
            if ($MinLength -gt 0 -and $length -lt $MinLength) {
                $Warnings.Value += "Title √ßok kƒ±sa: ${length}/${MinLength} karakter"
                $isValid = $false
            }
            if ($MaxLength -gt 0 -and $length -gt $MaxLength) {
                $Warnings.Value += "Title √ßok uzun: ${length}/${MaxLength} karakter"
                $isValid = $false
            }
        }

        "*Meta Tags*" {
            # HTML meta tags kontrol√º
            if ($Content -notmatch '<meta') {
                $Warnings.Value += "Meta etiketleri bulunamadƒ±"
            }
            if ($Content -notmatch 'name="description"') {
                $Warnings.Value += "Description meta etiketi bulunamadƒ±"
            }
            if ($Content -notmatch 'name="keywords"') {
                $Warnings.Value += "Keywords meta etiketi bulunamadƒ±"
            }
        }

        "*Structured Data*" {
            # JSON-LD structured data kontrol√º
            try {
                $jsonData = $Content | ConvertFrom-Json
                if (-not $jsonData.'@context' -or $jsonData.'@context' -notmatch 'schema.org') {
                    $Warnings.Value += "Ge√ßersiz schema.org context"
                }
                if (-not $jsonData.'@type') {
                    $Warnings.Value += "Missing @type in structured data"
                }
            } catch {
                $Warnings.Value += "Ge√ßersiz JSON formatƒ±"
                $isValid = $false
            }
        }
    }

    return $isValid
}

function Test-HTMLMetaTags {
    param([string]$HtmlFile)

    Write-ColorOutput "üîç HTML meta etiketleri kontrol ediliyor: $HtmlFile" "White"

    try {
        if (Test-Path $HtmlFile) {
            $content = Get-Content $HtmlFile -Raw

            $checks = @(
                @{ Pattern = '<title>'; Name = "Title etiketi"; Required = $true },
                @{ Pattern = 'name="description"'; Name = "Description meta"; Required = $true },
                @{ Pattern = 'name="keywords"'; Name = "Keywords meta"; Required = $false },
                @{ Pattern = 'name="robots"'; Name = "Robots meta"; Required = $false },
                @{ Pattern = 'property="og:'; Name = "Open Graph meta"; Required = $false },
                @{ Pattern = 'name="twitter:'; Name = "Twitter Card meta"; Required = $false },
                @{ Pattern = 'rel="canonical"'; Name = "Canonical URL"; Required = $false }
            )

            $passedChecks = 0
            foreach ($check in $checks) {
                if ($content -match $check.Pattern) {
                    Write-ColorOutput "  ‚úÖ $($check.Name) bulundu" "Green"
                    $passedChecks++
                } elseif ($check.Required) {
                    Write-ColorOutput "  ‚ùå $($check.Name) bulunamadƒ± (gerekli)" "Red"
                } else {
                    Write-ColorOutput "  ‚ö†Ô∏è  $($check.Name) bulunamadƒ± (isteƒüe baƒülƒ±)" "Yellow"
                }
            }

            return $passedChecks -ge 2  # En az 2 gerekli etiket
        } else {
            Write-ColorOutput "  ‚ö†Ô∏è  HTML dosya bulunamadƒ±: $HtmlFile" "Yellow"
            return $false
        }
    } catch {
        Write-ColorOutput "  üí• HTML kontrol hatasƒ±: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Show-Badge {
    param([string]$BadgeName)

    Write-ColorOutput "üèÖ Badge kazanƒ±ldƒ±: $BadgeName" "Cyan"

    # Badge dosyasƒ±nƒ± g√ºncelle (varsa)
    $badgeFile = Join-Path $ProjectPath "badge.json"
    if (Test-Path $badgeFile) {
        try {
            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json
            if ($badgeData.PSObject.Properties.Name -contains $BadgeName) {
                $badgeData.$BadgeName = $true
                $badgeData | ConvertTo-Json | Set-Content $badgeFile
                Write-ColorOutput "  ‚úÖ Badge dosyasƒ± g√ºncellendi" "Green"
            }
        } catch {
            Write-ColorOutput "  ‚ö†Ô∏è  Badge dosyasƒ± g√ºncellenemedi" "Yellow"
        }
    }
}

# Ana test d√∂ng√ºs√º
Write-ColorOutput "üöÄ SEO dosya testleri ba≈ülatƒ±lƒ±yor..." "White"
Write-ColorOutput ""

# SEO dosyalar testi
Write-ColorOutput "üìÑ SEO Dosyalarƒ±:" "Cyan"
foreach ($file in $seoFiles) {
    Test-SEOFile -FilePath $file.Path -FileName $file.Name -Required $file.Required -MinLength $file.MinLength -MaxLength $file.MaxLength -MinCount $file.MinCount -MaxCount $file.MaxCount
}

Write-ColorOutput ""

# HTML meta etiketleri testi
Write-ColorOutput "üè∑Ô∏è  HTML Meta Etiketleri:" "Cyan"
foreach ($htmlFile in $htmlFiles) {
    $fullHtmlPath = Join-Path $ProjectPath $htmlFile
    if (Test-HTMLMetaTags -HtmlFile $fullHtmlPath) {
        Write-ColorOutput "‚úÖ $htmlFile meta etiketleri ge√ßerli" "Green"
    } else {
        Write-ColorOutput "‚ùå $htmlFile meta etiketleri eksik" "Red"
    }
}

# Test √∂zeti
Write-ColorOutput "" "White"
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "           üìä Test Sonu√ßlarƒ±" "Cyan"
Write-ColorOutput "=========================================" "Cyan"

$successRate = if ($testResults.TotalTests -gt 0) {
    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)
} else { 0 }

Write-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"
Write-ColorOutput "Ba≈üarƒ±lƒ±: $($testResults.PassedTests)" "Green"
Write-ColorOutput "Ba≈üarƒ±sƒ±z: $($testResults.FailedTests)" "Red"
Write-ColorOutput "Ba≈üarƒ± Oranƒ±: $successRate%" "Cyan"
Write-ColorOutput "Toplam S√ºre: $($testResults.TestDuration.TotalSeconds) saniye" "White"

# Detaylƒ± sonu√ßlar
if ($Verbose) {
    Write-ColorOutput "" "White"
    Write-ColorOutput "Detaylƒ± Sonu√ßlar:" "Yellow"
    foreach ($detail in $testResults.Details) {
        $status = if ($detail.Passed) { "‚úÖ" } else { "‚ùå" }
        $required = if ($detail.Required) { " (Gerekli)" } else { " (ƒ∞steƒüe baƒülƒ±)" }
        Write-ColorOutput "  $status $($detail.TestName)$required" "White"
        if (!$detail.Passed -and $detail.ErrorMessage) {
            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"
        }
        foreach ($warning in $detail.Warnings) {
            Write-ColorOutput "    Uyarƒ±: $warning" "Yellow"
        }
    }
}

# JSON export
if ($ExportJson) {
    $jsonPath = Join-Path $ProjectPath "seo-test-results.json"
    $exportData = @{
        metadata = @{
            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            script_version = "1.0.0"
            test_environment = $TestEnvironment
            domain = $Domain
            total_duration_seconds = $testResults.TestDuration.TotalSeconds
        }
        summary = @{
            total_tests = $testResults.TotalTests
            passed_tests = $testResults.PassedTests
            failed_tests = $testResults.FailedTests
            success_rate = $successRate
            test_duration = $testResults.TestDuration.ToString()
        }
        seo_files = @{
            required = $seoFiles | Where-Object { $_.Required } | ForEach-Object { $_.Name }
            optional = $seoFiles | Where-Object { !$_.Required } | ForEach-Object { $_.Name }
        }
        html_files = $htmlFiles
        details = $testResults.Details
        recommendations = @(
            "SEO description.txt dosyasƒ±nƒ± olu≈üturun (120-160 karakter)",
            "SEO keywords.txt dosyasƒ±nƒ± olu≈üturun (5-15 keyword)",
            "HTML sayfalarƒ±na meta etiketleri ekleyin",
            "Structured data JSON-LD ekleyin",
            "Canonical URL'leri tanƒ±mlayƒ±n"
        )
    }

    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath
    Write-ColorOutput "üìÑ Test sonu√ßlarƒ± JSON olarak kaydedildi: $jsonPath" "Green"
}

# Badge tetikleme
if ($testResults.PassedTests -gt 0) {
    Show-Badge "SEO-Verified"
}

# Final sonu√ß
Write-ColorOutput "" "White"
if ($testResults.FailedTests -eq 0) {
    Write-ColorOutput "üéâ T√ºm SEO testleri ba≈üarƒ±lƒ±! CI/CD pipeline devam edebilir." "Green"
    exit 0
} else {
    Write-ColorOutput "üí• Bazƒ± SEO testleri ba≈üarƒ±sƒ±z. L√ºtfen eksik dosyalarƒ± ve meta etiketleri ekleyin." "Red"
    exit 1
}
