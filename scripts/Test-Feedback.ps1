# Test-Feedback.ps1 - Çok dilli geri bildirim testi\n# Bu script geri bildirim sistemini test eder ve CI/CD pipeline ile entegre çalışır\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string[]]$TestLanguages = @("en", "tr", "de", "fr", "es", "ar", "zh", "ja"),\n    [int]$MaxFeedbacksPerDay = 100\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:AUTO_PROCESS_FEEDBACK = "true"\n$env:MAX_FEEDBACKS_PER_DAY = $MaxFeedbacksPerDay.ToString()\n$env:SUPPORTED_LANGUAGES = $TestLanguages -join ","\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      🌐 Çok Dilli Geri Bildirim Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-MultiLanguageFeedback {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Dil desteği testi\nfunction Test-LanguageSupport {\n    Write-ColorOutput "  🌍 Dil desteği test ediliyor..." "Gray"\n\n    $supportedLanguages = $env:SUPPORTED_LANGUAGES -split ","\n    Write-ColorOutput "    📝 Desteklenen diller: $($supportedLanguages -join ', ')" "Gray"\n\n    # Her dil için örnek geri bildirim\n    $sampleFeedbacks = @{\n        "en" = "Great app! Love the navigation features."\n        "tr" = "Harika uygulama! Navigasyon özellikleri çok iyi."\n        "de" = "Tolle App! Die Navigationsfunktionen sind super."\n        "fr" = "Excellente application! J'adore les fonctions de navigation."\n        "es" = "¡Excelente aplicación! Me encantan las funciones de navegación."\n        "ar" = "تطبيق رائع! أحب ميزات التنقل."\n        "zh" = "很棒的应用！我喜欢导航功能。"\n        "ja" = "素晴らしいアプリ！ナビゲーション機能が好きです。"\n    }\n\n    $feedbackCount = 0\n    foreach ($lang in $supportedLanguages) {\n        if ($sampleFeedbacks.ContainsKey($lang)) {\n            Write-ColorOutput "    ✅ $lang : $($sampleFeedbacks[$lang])" "Green"\n            $feedbackCount++\n        } else {\n            Write-ColorOutput "    ⚠️  $lang için örnek geri bildirim bulunamadı" "Yellow"\n        }\n    }\n\n    Write-ColorOutput "    📊 Test edilen dil sayısı: $feedbackCount" "Gray"\n}\n\n# Geri bildirim işleme testi\nfunction Test-FeedbackProcessing {\n    Write-ColorOutput "  🔄 Geri bildirim işleme test ediliyor..." "Gray"\n\n    # Feedback veri klasörü kontrolü\n    $feedbackDataPath = Join-Path $env:APPDATA "KesifUygulamasi\FeedbackData"\n    if (!(Test-Path $feedbackDataPath)) {\n        New-Item -ItemType Directory -Path $feedbackDataPath -Force | Out-Null\n        Write-ColorOutput "    📁 Feedback veri klasörü oluşturuldu" "Gray"\n    }\n\n    # Örnek feedback dosyası oluştur\n    $sampleFeedback = @{\n        id = [guid]::NewGuid().ToString()\n        language = "en"\n        message = "Test feedback for CI/CD pipeline"\n        category = "Testing"\n        rating = 5\n        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n        userId = "TestUser"\n        metadata = @{\n            user_agent = "Test-Agent"\n            platform = "CI/CD"\n            app_version = "1.0.0"\n        }\n        isProcessed = $false\n    }\n\n    $feedbackFile = Join-Path $feedbackDataPath "feedback_test_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"\n    $sampleFeedback | ConvertTo-Json -Depth 10 | Set-Content $feedbackFile\n\n    Write-ColorOutput "    📄 Örnek feedback dosyası oluşturuldu: $feedbackFile" "Gray"\n\n    # İşlenmiş feedback kontrolü\n    $processedFeedbacks = Get-ChildItem $feedbackDataPath -Filter "feedback_*.json" | Where-Object {\n        $content = Get-Content $_.FullName -Raw | ConvertFrom-Json\n        $content.isProcessed -eq $true\n    }\n\n    Write-ColorOutput "    ✅ İşlenmiş feedback sayısı: $($processedFeedbacks.Count)" "Green"\n}\n\n# Günlük limit testi\nfunction Test-DailyLimit {\n    Write-ColorOutput "  📊 Günlük limit testi..." "Gray"\n\n    $maxFeedbacks = [int]$env:MAX_FEEDBACKS_PER_DAY\n    Write-ColorOutput "    🎯 Maksimum günlük feedback: $maxFeedbacks" "Gray"\n\n    # Bugünkü feedback sayısı kontrolü\n    $today = Get-Date -Format "yyyy-MM-dd"\n    $feedbackDataPath = Join-Path $env:APPDATA "KesifUygulamasi\FeedbackData"\n    $todaysFeedbacks = Get-ChildItem $feedbackDataPath -Filter "feedback_*.json" | Where-Object {\n        $fileName = $_.Name\n        $fileDate = $fileName -replace "feedback_", "" -replace "_.*", ""\n        $fileDate -eq $today\n    }\n\n    Write-ColorOutput "    📅 Bugünkü feedback sayısı: $($todaysFeedbacks.Count)" "Gray"\n\n    if ($todaysFeedbacks.Count -lt $maxFeedbacks) {\n        Write-ColorOutput "    ✅ Günlük limit aşılmamış" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  Günlük limit aşılmış" "Yellow"\n    }\n}\n\n# Duygu analizi testi\nfunction Test-SentimentAnalysis {\n    Write-ColorOutput "  😊 Duygu analizi testi..." "Gray"\n\n    # Örnek mesajlar\n    $testMessages = @(\n        @{ Message = "This app is amazing!"; ExpectedSentiment = "positive" },\n        @{ Message = "Great navigation features"; ExpectedSentiment = "positive" },\n        @{ Message = "This is terrible"; ExpectedSentiment = "negative" },\n        @{ Message = "Bug in the application"; ExpectedSentiment = "negative" },\n        @{ Message = "Works as expected"; ExpectedSentiment = "neutral" }\n    )\n\n    $positiveWords = @("good", "great", "excellent", "awesome", "love", "amazing")\n    $negativeWords = @("bad", "poor", "terrible", "hate", "worst", "bug")\n\n    foreach ($test in $testMessages) {\n        $message = $test.Message.ToLower()\n        $positiveCount = ($positiveWords | Where-Object { $message.Contains($_) }).Count\n        $negativeCount = ($negativeWords | Where-Object { $message.Contains($_) }).Count\n        $sentimentScore = $positiveCount - $negativeCount\n\n        $actualSentiment = if ($sentimentScore -gt 0) { "positive" } elseif ($sentimentScore -lt 0) { "negative" } else { "neutral" }\n\n        if ($actualSentiment -eq $test.ExpectedSentiment) {\n            Write-ColorOutput "    ✅ '$($test.Message)' -> $actualSentiment" "Green"\n        } else {\n            Write-ColorOutput "    ❌ '$($test.Message)' -> $actualSentiment (beklenen: $($test.ExpectedSentiment))" "Red"\n        }\n    }\n}\n\n# Otomatik yanıt testi\nfunction Test-AutoResponse {\n    Write-ColorOutput "  🤖 Otomatik yanıt testi..." "Gray"\n\n    # Dile göre otomatik yanıtlar\n    $autoResponses = @{\n        "en" = "Thank you for your feedback! We appreciate your input."\n        "tr" = "Geri bildiriminiz için teşekkür ederiz! Görüşlerinizi değerli buluyoruz."\n        "de" = "Vielen Dank für Ihr Feedback! Wir schätzen Ihre Eingabe."\n        "fr" = "Merci pour votre retour! Nous apprécions vos commentaires."\n        "es" = "¡Gracias por sus comentarios! Apreciamos sus aportes."\n        "ar" = "شكراً لملاحظاتك! نحن نقدر آراءك."\n        "zh" = "感谢您的反馈！我们重视您的意见。"\n        "ja" = "フィードバックありがとうございます！あなたの意見を大切にしています。"\n    }\n\n    foreach ($lang in $TestLanguages) {\n        if ($autoResponses.ContainsKey($lang)) {\n            Write-ColorOutput "    ✅ $lang : $($autoResponses[$lang])" "Green"\n        } else {\n            Write-ColorOutput "    ⚠️  $lang için otomatik yanıt bulunamadı" "Yellow"\n        }\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Çok dilli geri bildirim testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-MultiLanguageFeedback -TestName "Dil Desteği" -TestScript { Test-LanguageSupport }\nTest-MultiLanguageFeedback -TestName "Geri Bildirim İşleme" -TestScript { Test-FeedbackProcessing }\nTest-MultiLanguageFeedback -TestName "Günlük Limit" -TestScript { Test-DailyLimit }\nTest-MultiLanguageFeedback -TestName "Duygu Analizi" -TestScript { Test-SentimentAnalysis }\nTest-MultiLanguageFeedback -TestName "Otomatik Yanıt" -TestScript { Test-AutoResponse }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "feedback-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            supported_languages = $TestLanguages\n            max_feedbacks_per_day = $MaxFeedbacksPerDay\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        language_support = @{\n            tested_languages = $TestLanguages\n            sample_feedbacks_created = $true\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "Desteklenen dilleri environment variable ile yapılandırın",\n            "Günlük feedback limitini production ortamına göre ayarlayın",\n            "Duygu analizi algoritmasını geliştirmek için daha fazla örnek kullanın",\n            "Otomatik yanıtları kullanıcı deneyimine göre özelleştirin"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Feedback-Globalized"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tüm çok dilli geri bildirim testleri başarılı! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı geri bildirim testleri başarısız. Lütfen dil desteği ayarlarını kontrol edin." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n