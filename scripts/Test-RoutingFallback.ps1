# Test-RoutingFallback.ps1 - CI/CD pipeline ile entegre global routing fallback testi\n# Bu script routing fallback zincirini test eder: HERE → Mapbox → Google → Offline\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "    🌍 Global Routing Fallback Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:DOTNET_ENVIRONMENT = if ($TestEnvironment -eq "ci") { "Production" } else { "Development" }\n\n# Test koordinatları\n$testCoordinates = @(\n    @{ From = @{ Lat = 41.0082; Lng = 28.9784 }; To = @{ Lat = 39.9334; Lng = 32.8597 }; Name = "İstanbul-Ankara" },\n    @{ From = @{ Lat = 40.1885; Lng = 29.0610 }; To = @{ Lat = 39.7667; Lng = 30.5250 }; Name = "Bursa-Kütahya" },\n    @{ From = @{ Lat = 38.4192; Lng = 27.1287 }; To = @{ Lat = 37.8714; Lng = 32.4844 }; Name = "İzmir-Konya" }\n)\n\nWrite-ColorOutput "Test Environment: $TestEnvironment" "Yellow"\nWrite-ColorOutput "Configuration: $Configuration" "Yellow"\nWrite-ColorOutput "Test Koordinatları: $($testCoordinates.Count) adet" "Yellow"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# .NET SDK kontrolü\nWrite-ColorOutput "🔍 .NET SDK kontrol ediliyor..." "White"\ntry {\n    $dotnetVersion = dotnet --version\n    Write-ColorOutput "✅ .NET SDK bulundu: $dotnetVersion" "Green"\n} catch {\n    Write-ColorOutput "❌ .NET SDK bulunamadı. Lütfen .NET SDK yükleyin." "Red"\n    exit 1\n}\n\n# Build işlemi\nif (!$SkipBuild) {\n    Write-ColorOutput "🔨 Proje build ediliyor..." "White"\n    try {\n        Push-Location $ProjectPath\n        dotnet build --configuration $Configuration --verbosity minimal\n        Write-ColorOutput "✅ Build başarılı" "Green"\n    } catch {\n        Write-ColorOutput "❌ Build başarısız: $($_.Exception.Message)" "Red"\n        exit 1\n    } finally {\n        Pop-Location\n    }\n} else {\n    Write-ColorOutput "⏭️  Build atlandı" "Yellow"\n}\n\n# Test fonksiyonları\nfunction Test-RoutingFallback {\n    param(\n        [hashtable]$From,\n        [hashtable]$To,\n        [string]$TestName\n    )\n\n    Write-ColorOutput "🧪 $TestName için routing fallback testi başlatılıyor..." "White"\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $fallbackUsed = $false\n    $errorMessage = ""\n\n    try {\n        # RoutingService test simülasyonu\n        Write-ColorOutput "  📍 Başlangıç: ($($From.Lat), $($From.Lng))" "Gray"\n        Write-ColorOutput "  🎯 Hedef: ($($To.Lat), $($To.Lng))" "Gray"\n\n        # Provider zinciri testi\n        $providers = @("HERE Maps", "Mapbox", "Google Maps", "Offline")\n        $successfulProvider = $null\n\n        foreach ($provider in $providers) {\n            Write-ColorOutput "  🔄 $provider deneniyor..." "Gray"\n\n            # Simüle edilmiş provider testi\n            $isSuccess = Test-Provider $provider $From $To\n\n            if ($isSuccess) {\n                $successfulProvider = $provider\n                Write-ColorOutput "  ✅ $provider başarılı!" "Green"\n                break\n            } else {\n                Write-ColorOutput "  ❌ $provider başarısız, fallback devam ediyor..." "Yellow"\n                $fallbackUsed = $true\n            }\n\n            # Kısa bekleme simülasyonu\n            Start-Sleep -Milliseconds 200\n        }\n\n        if ($successfulProvider) {\n            $testPassed = $true\n            Write-ColorOutput "  🎉 Test başarılı: $successfulProvider kullanılarak rota hesaplandı" "Green"\n\n            if ($fallbackUsed) {\n                Write-ColorOutput "  🏅 Fallback sistemi çalıştı!" "Cyan"\n            }\n        } else {\n            $errorMessage = "Tüm provider'lar başarısız oldu"\n            Write-ColorOutput "  💥 Test başarısız: $errorMessage" "Red"\n        }\n\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  💥 Test hatası: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            FallbackUsed = $fallbackUsed\n            SuccessfulProvider = $successfulProvider\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\nfunction Test-Provider {\n    param(\n        [string]$Provider,\n        [hashtable]$From,\n        [hashtable]$To\n    )\n\n    # Provider başarı simülasyonu\n    switch ($Provider) {\n        "HERE Maps" {\n            # HERE Maps API key kontrolü\n            $apiKey = $env:HERE_MAPS_API_KEY\n            if (!$apiKey -or $apiKey -eq "YOUR_HERE_API_KEY") {\n                return $false\n            }\n            # Rastgele başarı/başarısızlık (%80 başarı)\n            return (Get-Random -Maximum 100) -lt 80\n        }\n        "Mapbox" {\n            $apiKey = $env:MAPBOX_API_KEY\n            if (!$apiKey -or $apiKey -eq "YOUR_MAPBOX_API_KEY") {\n                return $false\n            }\n            return (Get-Random -Maximum 100) -lt 85\n        }\n        "Google Maps" {\n            $apiKey = $env:GOOGLE_MAPS_API_KEY\n            if (!$apiKey -or $apiKey -eq "YOUR_GOOGLE_API_KEY") {\n                return $false\n            }\n            return (Get-Random -Maximum 100) -lt 90\n        }\n        "Offline" {\n            # Offline her zaman başarılı\n            return $true\n        }\n        default {\n            return $false\n        }\n    }\n}\n\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -contains $BadgeName) {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Routing fallback testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\nforeach ($coord in $testCoordinates) {\n    Test-RoutingFallback -From $coord.From -To $coord.To -TestName $coord.Name\n    Write-ColorOutput ""\n}\n\n# Test özeti\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        $fallback = if ($detail.FallbackUsed) { " (Fallback)" } else { "" }\n        Write-ColorOutput "  $status $($detail.TestName): $($detail.Duration.TotalMilliseconds)ms$fallback" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "routing-fallback-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "HERE Maps API key'inin doğru yapılandırıldığından emin olun",\n            "Mapbox API key'inin doğru yapılandırıldığından emin olun",\n            "Google Maps API key'inin doğru yapılandırıldığından emin olun",\n            "Offline routing'in her zaman fallback olarak kullanılabilir olduğundan emin olun"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Routing-Fallback"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tüm routing fallback testleri başarılı! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı routing fallback testleri başarısız. Lütfen hataları düzeltin." "Red"\n    exit 1\n}\n