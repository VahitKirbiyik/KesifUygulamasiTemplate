# Test-Analytics.ps1 - Kullanıcı davranış analizi test scripti\n# CI/CD pipeline ile entegre edilmiş analytics ve tracking testi\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$AnalyticsPath = "analytics",\n    [int]$TestEventCount = 200,\n    [int]$TestUserCount = 10\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n    AnalyticsStats = @{\n        EventsTracked = 0\n        UsersAnalyzed = 0\n        EventTypes = @{}\n        ErrorRate = 0\n        ProcessingTime = [TimeSpan]::Zero\n    }\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:ANALYTICS_PATH = $AnalyticsPath\n$env:ENABLE_ANALYTICS = "true"\n$env:MAX_ANALYTICS_FILE_SIZE_MB = "10"\n$env:ANALYTICS_RETENTION_DAYS = "30"\n$env:ENABLE_REALTIME_ANALYTICS = "true"\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      📈 Analytics Test Sistemi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-Analytics {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Analytics klasörü oluşturma testi\nfunction Test-AnalyticsDirectorySetup {\n    Write-ColorOutput "  📁 Analytics klasörü kurulumu kontrol ediliyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n\n    if (!(Test-Path $fullAnalyticsPath)) {\n        Write-ColorOutput "    📂 Analytics klasörü oluşturuluyor: $fullAnalyticsPath" "Gray"\n        New-Item -ItemType Directory -Path $fullAnalyticsPath -Force | Out-Null\n    } else {\n        Write-ColorOutput "    ✅ Analytics klasörü mevcut: $fullAnalyticsPath" "Green"\n    }\n\n    # Test analytics dosyası oluştur\n    $testFile = Join-Path $fullAnalyticsPath "test-analytics.json"\n    $testData = @{\n        test = "Analytics test"\n        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n    }\n    $testData | ConvertTo-Json | Set-Content $testFile\n\n    if (Test-Path $testFile) {\n        Write-ColorOutput "    ✅ Test analytics dosyası oluşturuldu" "Green"\n        Remove-Item $testFile -Force\n    } else {\n        Write-ColorOutput "    ❌ Test analytics dosyası oluşturulamadı" "Red"\n        throw "Analytics directory setup failed"\n    }\n}\n\n# Olay tracking testi\nfunction Test-EventTracking {\n    Write-ColorOutput "  📊 Olay tracking testi başlatılıyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n    $testFile = Join-Path $fullAnalyticsPath "test-events.json"\n\n    # Test olayları\n    $eventTypes = @("page_view", "user_interaction", "route_usage", "error", "performance")\n    $trackedEvents = 0\n    $eventCounts = @{}\n\n    for ($i = 1; $i -le $TestEventCount; $i++) {\n        $userId = "user_$($i % $TestUserCount + 1)"\n        $eventType = $eventTypes[$i % $eventTypes.Count]\n\n        $analyticsEvent = @{\n            Id = [Guid]::NewGuid().ToString()\n            EventName = $eventType\n            UserId = $userId\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n            Properties = @{\n                test_run = $true\n                event_number = $i\n            }\n            SessionId = "$userId`_session_$(Get-Date -Format 'yyyyMMddHHmmss')"\n            Source = "KesifUygulamasiTemplate"\n        }\n\n        # JSON dosyasına ekle\n        $analyticsEvent | ConvertTo-Json -Compress | Out-File $testFile -Append -Encoding UTF8\n\n        $trackedEvents++\n        if ($eventCounts.ContainsKey($eventType)) {\n            $eventCounts[$eventType]++\n        } else {\n            $eventCounts[$eventType] = 1\n        }\n    }\n\n    Write-ColorOutput "    📝 $trackedEvents olay track edildi" "Gray"\n    Write-ColorOutput "    👥 $TestUserCount benzersiz kullanıcı" "Gray"\n\n    foreach ($eventType in $eventTypes) {\n        if ($eventCounts.ContainsKey($eventType)) {\n            Write-ColorOutput "    📊 $eventType : $($eventCounts[$eventType]) olay" "Gray"\n        }\n    }\n\n    # Test sonuçlarını güncelle\n    $testResults.AnalyticsStats.EventsTracked = $trackedEvents\n    $testResults.AnalyticsStats.UsersAnalyzed = $TestUserCount\n    $testResults.AnalyticsStats.EventTypes = $eventCounts\n\n    if ($trackedEvents -eq $TestEventCount) {\n        Write-ColorOutput "    ✅ Olay tracking başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Olay tracking sayısı uyumsuz" "Red"\n        throw "Event tracking count mismatch"\n    }\n}\n\n# Kullanıcı davranış analizi testi\nfunction Test-UserBehaviorAnalysis {\n    Write-ColorOutput "  🧠 Kullanıcı davranış analizi testi başlatılıyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n    $analysisFile = Join-Path $fullAnalyticsPath "behavior-analysis.json"\n\n    # Test için kullanıcı davranış verileri oluştur\n    $userBehaviors = @()\n    $testUsers = 1..$TestUserCount\n\n    foreach ($user in $testUsers) {\n        $userId = "user_$user"\n        $userEvents = @()\n\n        # Her kullanıcı için rastgele olaylar oluştur\n        $userEventCount = Get-Random -Minimum 5 -Maximum 20\n        for ($i = 1; $i -le $userEventCount; $i++) {\n            $eventType = @("page_view", "user_interaction", "route_usage", "error", "performance") | Get-Random\n            $userEvents += @{\n                EventName = $eventType\n                Timestamp = (Get-Date).AddMinutes(-(Get-Random -Minimum 1 -Maximum 1440)).ToString("yyyy-MM-ddTHH:mm:ssZ")\n                Properties = @{\n                    page_name = if ($eventType -eq "page_view") { @("Home", "Map", "Routes", "Settings") | Get-Random } else { "" }\n                    interaction_type = if ($eventType -eq "user_interaction") { @("click", "scroll", "zoom") | Get-Random } else { "" }\n                }\n            }\n        }\n\n        $userBehaviors += @{\n            UserId = $userId\n            TotalEvents = $userEvents.Count\n            SessionCount = [math]::Ceiling($userEvents.Count / 5) # Basit session hesabı\n            InteractionPatterns = $userEvents | Group-Object -Property EventName | ForEach-Object { @{ $_.Name = $_.Count } }\n            PageFlow = $userEvents | Where-Object { $_.EventName -eq "page_view" } | ForEach-Object { $_.Properties.page_name }\n        }\n    }\n\n    # Analiz sonuçlarını JSON'a kaydet\n    $analysisResult = @{\n        AnalysisTimestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n        TotalUsers = $testUsers.Count\n        UserBehaviors = $userBehaviors\n        Summary = @{\n            AverageEventsPerUser = ($userBehaviors | Measure-Object -Property TotalEvents -Average).Average\n            MostCommonEvent = $userBehaviors.InteractionPatterns | Group-Object -Property Keys | Sort-Object -Property Count -Descending | Select-Object -First 1\n        }\n    }\n\n    $analysisResult | ConvertTo-Json -Depth 10 | Set-Content $analysisFile\n\n    Write-ColorOutput "    👥 $($testUsers.Count) kullanıcı davranış analizi tamamlandı" "Gray"\n    Write-ColorOutput "    📊 Ortalama olay sayısı: $([math]::Round($analysisResult.Summary.AverageEventsPerUser, 1))" "Gray"\n\n    if ($userBehaviors.Count -eq $TestUserCount) {\n        Write-ColorOutput "    ✅ Kullanıcı davranış analizi başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Kullanıcı sayısı uyumsuz" "Red"\n        throw "User behavior analysis count mismatch"\n    }\n}\n\n# Performans tracking testi\nfunction Test-PerformanceTracking {\n    Write-ColorOutput "  ⚡ Performans tracking testi başlatılıyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n    $performanceFile = Join-Path $fullAnalyticsPath "performance-metrics.json"\n\n    # Test performans metrikleri\n    $performanceMetrics = @()\n    $metricTypes = @("page_load_time", "api_response_time", "route_calculation_time", "tile_load_time")\n\n    for ($i = 1; $i -le 50; $i++) {\n        $metricType = $metricTypes | Get-Random\n        $value = Get-Random -Minimum 100 -Maximum 10000 # ms cinsinden\n        $userId = "user_$($i % $TestUserCount + 1)"\n\n        $performanceMetrics += @{\n            Id = [Guid]::NewGuid().ToString()\n            EventName = "performance"\n            UserId = $userId\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n            Properties = @{\n                metric_name = $metricType\n                value = $value\n                context = "test_run"\n            }\n        }\n    }\n\n    # Performans metriklerini JSON'a kaydet\n    $performanceMetrics | ConvertTo-Json -Compress | Set-Content $performanceFile\n\n    # Performans analizi\n    $avgPageLoad = ($performanceMetrics | Where-Object { $_.Properties.metric_name -eq "page_load_time" } | Measure-Object -Property { $_.Properties.value } -Average).Average\n    $avgApiResponse = ($performanceMetrics | Where-Object { $_.Properties.metric_name -eq "api_response_time" } | Measure-Object -Property { $_.Properties.value } -Average).Average\n\n    Write-ColorOutput "    📈 Sayfa yükleme süresi ortalaması: $([math]::Round($avgPageLoad, 0)) ms" "Gray"\n    Write-ColorOutput "    📈 API yanıt süresi ortalaması: $([math]::Round($avgApiResponse, 0)) ms" "Gray"\n\n    # Performans eşikleri kontrolü\n    $slowPages = $performanceMetrics | Where-Object { $_.Properties.metric_name -eq "page_load_time" -and $_.Properties.value -gt 3000 }\n    if ($slowPages.Count -gt 0) {\n        Write-ColorOutput "    ⚠️  $($slowPages.Count) yavaş sayfa yüklemesi tespit edildi" "Yellow"\n    } else {\n        Write-ColorOutput "    ✅ Tüm sayfa yüklemeleri kabul edilebilir" "Green"\n    }\n\n    if ($performanceMetrics.Count -gt 0) {\n        Write-ColorOutput "    ✅ Performans tracking başarılı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Performans metrikleri oluşturulamadı" "Red"\n        throw "Performance tracking failed"\n    }\n}\n\n# Hata tracking testi\nfunction Test-ErrorTracking {\n    Write-ColorOutput "  🚨 Hata tracking testi başlatılıyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n    $errorFile = Join-Path $fullAnalyticsPath "error-tracking.json"\n\n    # Test hataları\n    $errorTypes = @("network_error", "api_error", "ui_error", "data_error", "auth_error")\n    $errorMessages = @(\n        "Network connection failed",\n        "API endpoint not found",\n        "UI component render error",\n        "Data parsing failed",\n        "Authentication token expired"\n    )\n\n    $trackedErrors = @()\n    $errorCount = 20\n\n    for ($i = 1; $i -le $errorCount; $i++) {\n        $errorType = $errorTypes | Get-Random\n        $errorMessage = $errorMessages | Get-Random\n        $userId = "user_$($i % $TestUserCount + 1)"\n\n        $errorEvent = @{\n            Id = [Guid]::NewGuid().ToString()\n            EventName = "error"\n            UserId = $userId\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n            Properties = @{\n                error_type = $errorType\n                error_message = $errorMessage\n                stack_trace = "at TestMethod() in TestFile.cs:line 42"\n            }\n        }\n\n        $trackedErrors += $errorEvent\n    }\n\n    # Hata olaylarını JSON'a kaydet\n    $trackedErrors | ConvertTo-Json -Compress | Set-Content $errorFile\n\n    # Hata analizi\n    $errorStats = $trackedErrors | Group-Object -Property { $_.Properties.error_type } | ForEach-Object {\n        @{ $_.Name = $_.Count }\n    }\n\n    Write-ColorOutput "    🚨 $errorCount hata olayı track edildi" "Gray"\n    Write-ColorOutput "    📊 Hata dağılımı:" "Gray"\n    foreach ($errorStat in $errorStats) {\n        foreach ($errorType in $errorStat.Keys) {\n            Write-ColorOutput "      - $errorType : $($errorStat[$errorType])" "Gray"\n        }\n    }\n\n    # Hata oranını hesapla\n    $errorRate = $errorCount / $TestEventCount\n    $testResults.AnalyticsStats.ErrorRate = $errorRate\n\n    Write-ColorOutput "    📈 Hata oranı: $([math]::Round($errorRate * 100, 2))%" "Gray"\n\n    if ($errorRate -lt 0.1) { # %10'dan az hata kabul edilebilir\n        Write-ColorOutput "    ✅ Hata oranı kabul edilebilir" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  Hata oranı yüksek" "Yellow"\n    }\n}\n\n# Analytics temizleme testi\nfunction Test-AnalyticsCleanup {\n    Write-ColorOutput "  🧹 Analytics temizleme testi başlatılıyor..." "Gray"\n\n    $fullAnalyticsPath = Join-Path $ProjectPath $AnalyticsPath\n\n    # Eski test dosyaları oluştur\n    $oldFiles = @()\n    $oldDate = (Get-Date).AddDays(-40) # 40 gün önce\n\n    for ($i = 1; $i -le 3; $i++) {\n        $oldFileName = "old-analytics-$i.json"\n        $oldFilePath = Join-Path $fullAnalyticsPath $oldFileName\n        @{ test = "old analytics data $i"; timestamp = $oldDate.ToString("yyyy-MM-ddTHH:mm:ssZ") } | ConvertTo-Json | Set-Content $oldFilePath\n        (Get-Item $oldFilePath).CreationTime = $oldDate\n        $oldFiles += $oldFilePath\n    }\n\n    # Yeni test dosyası oluştur\n    $newFileName = "new-analytics.json"\n    $newFilePath = Join-Path $fullAnalyticsPath $newFileName\n    @{ test = "new analytics data"; timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ") } | ConvertTo-Json | Set-Content $newFilePath\n\n    Write-ColorOutput "    📅 Eski dosyalar oluşturuldu: $($oldFiles.Count)" "Gray"\n    Write-ColorOutput "    📅 Yeni dosya oluşturuldu: $newFileName" "Gray"\n\n    # Eski dosyaları temizle (30 günden eski)\n    $retentionDays = 30\n    $cutoffDate = (Get-Date).AddDays(-$retentionDays)\n\n    $filesToDelete = Get-ChildItem $fullAnalyticsPath -Filter "*.json" |\n        Where-Object { $_.CreationTime -lt $cutoffDate }\n\n    $deletedCount = 0\n    foreach ($file in $filesToDelete) {\n        Remove-Item $file.FullName -Force\n        $deletedCount++\n        Write-ColorOutput "    ✅ Eski dosya silindi: $($file.Name)" "Green"\n    }\n\n    # Yeni dosyanın kaldığını kontrol et\n    if (Test-Path $newFilePath) {\n        Write-ColorOutput "    ✅ Yeni dosya korundu" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Yeni dosya yanlışlıkla silindi" "Red"\n    }\n\n    Write-ColorOutput "    📊 Temizleme İstatistikleri:" "Gray"\n    Write-ColorOutput "      - Silinen Dosya: $deletedCount" "Gray"\n    Write-ColorOutput "      - Korunan Dosya: 1" "Gray"\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Analytics testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-Analytics -TestName "Analytics Klasörü Kurulumu" -TestScript { Test-AnalyticsDirectorySetup }\nTest-Analytics -TestName "Olay Tracking" -TestScript { Test-EventTracking }\nTest-Analytics -TestName "Kullanıcı Davranış Analizi" -TestScript { Test-UserBehaviorAnalysis }\nTest-Analytics -TestName "Performans Tracking" -TestScript { Test-PerformanceTracking }\nTest-Analytics -TestName "Hata Tracking" -TestScript { Test-ErrorTracking }\nTest-Analytics -TestName "Analytics Temizleme" -TestScript { Test-AnalyticsCleanup }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Analytics istatistikleri\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "        📈 Analytics İstatistikleri" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\nWrite-ColorOutput "Track Edilen Olay: $($testResults.AnalyticsStats.EventsTracked)" "White"\nWrite-ColorOutput "Analiz Edilen Kullanıcı: $($testResults.AnalyticsStats.UsersAnalyzed)" "White"\nWrite-ColorOutput "Hata Oranı: $([math]::Round($testResults.AnalyticsStats.ErrorRate * 100, 2))%" "White"\n\nWrite-ColorOutput "Olay Türleri Dağılımı:" "Gray"\nforeach ($eventType in $testResults.AnalyticsStats.EventTypes.Keys) {\n    Write-ColorOutput "  - $eventType : $($testResults.AnalyticsStats.EventTypes[$eventType])" "Gray"\n}\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "analytics-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            analytics_path = $AnalyticsPath\n            test_event_count = $TestEventCount\n            test_user_count = $TestUserCount\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n        }\n        analytics_stats = $testResults.AnalyticsStats\n        details = $testResults.Details\n        recommendations = @(\n            "Analytics retention süresini kullanım paternlerine göre optimize edin",\n            "Real-time processing için event filtering kuralları tanımlayın",\n            "User behavior analysis için segmentation kuralları ekleyin",\n            "Performance metrics için alerting thresholds belirleyin",\n            "Error tracking için automated incident response kurun"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Behavior-Analyzed"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Analytics testleri başarılı! Kullanıcı davranış analizi sistemi hazır." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı analytics testleri başarısız oldu." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n