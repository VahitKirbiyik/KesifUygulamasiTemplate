# Test-Routing.ps1 - CI/CD pipeline ile entegre routing test scripti
# Bu script routing servislerinin test edilmesi için kullanılır

param(
    [string]$TestEnvironment = "local",
    [string]$Configuration = "Debug",
    [string]$ProjectPath = $PSScriptRoot,
    [switch]$SkipBuild,
    [switch]$Verbose
)

# Script ayarları
$ErrorActionPreference = "Stop"
$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }

# Renkli output için
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Başlık
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "    Kesif Uygulamasi - Routing Testleri" "Cyan"
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput ""

# Environment değişkenlerini ayarla
$env:TEST_ENVIRONMENT = $TestEnvironment
$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }
$env:DOTNET_ENVIRONMENT = if ($TestEnvironment -eq "ci") { "Production" } else { "Development" }

Write-ColorOutput "Test Environment: $TestEnvironment" "Yellow"
Write-ColorOutput "Configuration: $Configuration" "Yellow"
Write-ColorOutput "Project Path: $ProjectPath" "Yellow"
Write-ColorOutput ""

# Proje yolunu kontrol et
if (!(Test-Path $ProjectPath)) {
    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"
    exit 1
}

# .NET SDK kontrolü
Write-ColorOutput "🔍 .NET SDK kontrol ediliyor..." "White"
try {
    $dotnetVersion = dotnet --version
    Write-ColorOutput "✅ .NET SDK bulundu: $dotnetVersion" "Green"
} catch {
    Write-ColorOutput "❌ .NET SDK bulunamadı. Lütfen .NET SDK yükleyin." "Red"
    exit 1
}

# Build işlemi
if (!$SkipBuild) {
    Write-ColorOutput "🔨 Proje build ediliyor..." "White"
    try {
        Push-Location $ProjectPath
        dotnet build --configuration $Configuration --verbosity minimal
        Write-ColorOutput "✅ Build başarılı" "Green"
    } catch {
        Write-ColorOutput "❌ Build başarısız: $($_.Exception.Message)" "Red"
        exit 1
    } finally {
        Pop-Location
    }
} else {
    Write-ColorOutput "⏭️  Build atlandı" "Yellow"
}

# Test sonuçları için klasör oluştur
$testResultsPath = Join-Path $ProjectPath "TestResults"
if (!(Test-Path $testResultsPath)) {
    New-Item -ItemType Directory -Path $testResultsPath | Out-Null
}

# Test çalıştırma fonksiyonu
function Invoke-RoutingTests {
    param(
        [string]$TestProject,
        [string]$Filter = "",
        [string]$DisplayName = ""
    )

    Write-ColorOutput "🧪 $DisplayName testleri çalıştırılıyor..." "White"

    $testArgs = @(
        "test",
        $TestProject,
        "--configuration", $Configuration,
        "--logger", "trx;LogFileName=$testResultsPath\$DisplayName.trx",
        "--logger", "console;verbosity=detailed",
        "--results-directory", $testResultsPath
    )

    if ($Filter) {
        $testArgs += "--filter", $Filter
    }

    if ($Verbose) {
        $testArgs += "--verbosity", "normal"
    } else {
        $testArgs += "--verbosity", "minimal"
    }

    try {
        Push-Location $ProjectPath
        dotnet $testArgs
        Write-ColorOutput "✅ $DisplayName testleri başarılı" "Green"
        return $true
    } catch {
        Write-ColorOutput "❌ $DisplayName testleri başarısız: $($_.Exception.Message)" "Red"
        return $false
    } finally {
        Pop-Location
    }
}

# Routing testlerini çalıştır
$allTestsPassed = $true

# RouteService testleri
$routeServiceTest = Join-Path $ProjectPath "KesifUygulamasiTemplate.Tests\KesifUygulamasiTemplate.Tests.csproj"
if (Test-Path $routeServiceTest) {
    $result = Invoke-RoutingTests -TestProject $routeServiceTest -Filter "RouteService" -DisplayName "RouteService"
    $allTestsPassed = $allTestsPassed -and $result
} else {
    Write-ColorOutput "⚠️  RouteService test projesi bulunamadı: $routeServiceTest" "Yellow"
}

# Route optimization testleri
if (Test-Path $routeServiceTest) {
    $result = Invoke-RoutingTests -TestProject $routeServiceTest -Filter "RouteOptimization" -DisplayName "RouteOptimization"
    $allTestsPassed = $allTestsPassed -and $result
}

# Monitoring service testleri
$monitoringTest = Join-Path $ProjectPath "KesifUygulamasiTemplate.Tests\KesifUygulamasiTemplate.Tests.csproj"
if (Test-Path $monitoringTest) {
    $result = Invoke-RoutingTests -TestProject $monitoringTest -Filter "Monitoring" -DisplayName "MonitoringService"
    $allTestsPassed = $allTestsPassed -and $result
}

# Integration testleri
$integrationTest = Join-Path $ProjectPath "KesifUygulamasiTemplate.Tests\KesifUygulamasiTemplate.Tests.csproj"
if (Test-Path $integrationTest) {
    $result = Invoke-RoutingTests -TestProject $integrationTest -Filter "Integration" -DisplayName "Integration"
    $allTestsPassed = $allTestsPassed -and $result
}

# Test sonuçlarını özetle
Write-ColorOutput "" "White"
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "           Test Sonuçları" "Cyan"
Write-ColorOutput "=========================================" "Cyan"

# Test sonuç dosyalarını listele
$trxFiles = Get-ChildItem $testResultsPath -Filter "*.trx" -ErrorAction SilentlyContinue
if ($trxFiles) {
    Write-ColorOutput "Test sonuç dosyaları:" "White"
    foreach ($file in $trxFiles) {
        Write-ColorOutput "  📄 $($file.Name)" "Gray"
    }
} else {
    Write-ColorOutput "Test sonuç dosyası bulunamadı" "Yellow"
}

# Coverage raporu oluştur (varsa)
$coveragePath = Join-Path $ProjectPath "coverage"
if (Test-Path $coveragePath) {
    Write-ColorOutput "📊 Coverage raporu mevcut: $coveragePath" "Green"
} else {
    Write-ColorOutput "📊 Coverage raporu bulunamadı" "Yellow"
}

# Final sonuç
Write-ColorOutput "" "White"
if ($allTestsPassed) {
    Write-ColorOutput "🎉 Tüm testler başarılı! CI/CD pipeline devam edebilir." "Green"
    exit 0
} else {
    Write-ColorOutput "💥 Bazı testler başarısız. Lütfen hataları düzeltin." "Red"
    exit 1
}

# Test helper fonksiyonları
function Test-RouteCalculation {
    param(
        [string]$StartLocation = "İstanbul",
        [string]$EndLocation = "Ankara",
        [string]$OptimizationType = "Fastest"
    )

    Write-ColorOutput "Testing route calculation: $StartLocation -> $EndLocation ($OptimizationType)" "White"

    # Burada gerçek test kodu çalıştırılabilir
    # Şimdilik sadece mock test
    Start-Sleep -Milliseconds 100
    Write-ColorOutput "✅ Route calculation test passed" "Green"
}

function Test-ProviderSwitching {
    Write-ColorOutput "Testing provider switching..." "White"

    $providers = @("Google", "Mapbox", "HERE")
    foreach ($provider in $providers) {
        Write-ColorOutput "  Testing $provider provider..." "Gray"
        Start-Sleep -Milliseconds 50
    }

    Write-ColorOutput "✅ Provider switching test passed" "Green"
}

function Test-OfflineMode {
    Write-ColorOutput "Testing offline mode..." "White"

    # Offline mode test kodu
    Start-Sleep -Milliseconds 200
    Write-ColorOutput "✅ Offline mode test passed" "Green"
}

# Ek test fonksiyonları (CI/CD'de kullanılabilir)
if ($TestEnvironment -eq "ci") {
    Write-ColorOutput "" "White"
    Write-ColorOutput "🔧 CI/CD ek testleri çalıştırılıyor..." "White"

    Test-RouteCalculation
    Test-ProviderSwitching
    Test-OfflineMode

    Write-ColorOutput "✅ CI/CD ek testleri tamamlandı" "Green"
}

Write-ColorOutput "" "White"
Write-ColorOutput "Script tamamlandı." "Cyan"
