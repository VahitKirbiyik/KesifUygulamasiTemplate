# Test-RoutingFallback.ps1 - CI/CD pipeline ile entegre global routing fallback testi
# Bu script routing fallback zincirini test eder: HERE → Mapbox → Google → Offline

param(
    [string]$TestEnvironment = "local",
    [string]$Configuration = "Debug",
    [string]$ProjectPath = $PSScriptRoot,
    [switch]$SkipBuild,
    [switch]$Verbose,
    [switch]$ExportJson
)

# Script ayarları
$ErrorActionPreference = "Stop"
$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }

# Test sonuçları için değişkenler
$testResults = @{
    TotalTests = 0
    PassedTests = 0
    FailedTests = 0
    TestDuration = [TimeSpan]::Zero
    Details = @()
}

# Renkli output için
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Başlık
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "    🌍 Global Routing Fallback Testi" "Cyan"
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput ""

# Environment değişkenlerini ayarla
$env:TEST_ENVIRONMENT = $TestEnvironment
$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }
$env:DOTNET_ENVIRONMENT = if ($TestEnvironment -eq "ci") { "Production" } else { "Development" }

# Test koordinatları
$testCoordinates = @(
    @{ From = @{ Lat = 41.0082; Lng = 28.9784 }; To = @{ Lat = 39.9334; Lng = 32.8597 }; Name = "İstanbul-Ankara" },
    @{ From = @{ Lat = 40.1885; Lng = 29.0610 }; To = @{ Lat = 39.7667; Lng = 30.5250 }; Name = "Bursa-Kütahya" },
    @{ From = @{ Lat = 38.4192; Lng = 27.1287 }; To = @{ Lat = 37.8714; Lng = 32.4844 }; Name = "İzmir-Konya" }
)

Write-ColorOutput "Test Environment: $TestEnvironment" "Yellow"
Write-ColorOutput "Configuration: $Configuration" "Yellow"
Write-ColorOutput "Test Koordinatları: $($testCoordinates.Count) adet" "Yellow"
Write-ColorOutput ""

# Proje yolunu kontrol et
if (!(Test-Path $ProjectPath)) {
    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"
    exit 1
}

# .NET SDK kontrolü
Write-ColorOutput "🔍 .NET SDK kontrol ediliyor..." "White"
try {
    $dotnetVersion = dotnet --version
    Write-ColorOutput "✅ .NET SDK bulundu: $dotnetVersion" "Green"
} catch {
    Write-ColorOutput "❌ .NET SDK bulunamadı. Lütfen .NET SDK yükleyin." "Red"
    exit 1
}

# Build işlemi
if (!$SkipBuild) {
    Write-ColorOutput "🔨 Proje build ediliyor..." "White"
    try {
        Push-Location $ProjectPath
        dotnet build --configuration $Configuration --verbosity minimal
        Write-ColorOutput "✅ Build başarılı" "Green"
    } catch {
        Write-ColorOutput "❌ Build başarısız: $($_.Exception.Message)" "Red"
        exit 1
    } finally {
        Pop-Location
    }
} else {
    Write-ColorOutput "⏭️  Build atlandı" "Yellow"
}

# Test fonksiyonları
function Test-RoutingFallback {
    param(
        [hashtable]$From,
        [hashtable]$To,
        [string]$TestName
    )

    Write-ColorOutput "🧪 $TestName için routing fallback testi başlatılıyor..." "White"

    $startTime = Get-Date
    $testPassed = $false
    $fallbackUsed = $false
    $errorMessage = ""

    try {
        # RoutingService test simülasyonu
        Write-ColorOutput "  📍 Başlangıç: ($($From.Lat), $($From.Lng))" "Gray"
        Write-ColorOutput "  🎯 Hedef: ($($To.Lat), $($To.Lng))" "Gray"

        # Provider zinciri testi
        $providers = @("HERE Maps", "Mapbox", "Google Maps", "Offline")
        $successfulProvider = $null

        foreach ($provider in $providers) {
            Write-ColorOutput "  🔄 $provider deneniyor..." "Gray"

            # Simüle edilmiş provider testi
            $isSuccess = Test-Provider $provider $From $To

            if ($isSuccess) {
                $successfulProvider = $provider
                Write-ColorOutput "  ✅ $provider başarılı!" "Green"
                break
            } else {
                Write-ColorOutput "  ❌ $provider başarısız, fallback devam ediyor..." "Yellow"
                $fallbackUsed = $true
            }

            # Kısa bekleme simülasyonu
            Start-Sleep -Milliseconds 200
        }

        if ($successfulProvider) {
            $testPassed = $true
            Write-ColorOutput "  🎉 Test başarılı: $successfulProvider kullanılarak rota hesaplandı" "Green"

            if ($fallbackUsed) {
                Write-ColorOutput "  🏅 Fallback sistemi çalıştı!" "Cyan"
            }
        } else {
            $errorMessage = "Tüm provider'lar başarısız oldu"
            Write-ColorOutput "  💥 Test başarısız: $errorMessage" "Red"
        }

    } catch {
        $errorMessage = $_.Exception.Message
        Write-ColorOutput "  💥 Test hatası: $errorMessage" "Red"
    } finally {
        $endTime = Get-Date
        $duration = $endTime - $startTime

        $testResults.TotalTests++
        if ($testPassed) {
            $testResults.PassedTests++
        } else {
            $testResults.FailedTests++
        }
        $testResults.TestDuration += $duration

        $testResults.Details += @{
            TestName = $TestName
            Passed = $testPassed
            Duration = $duration
            FallbackUsed = $fallbackUsed
            SuccessfulProvider = $successfulProvider
            ErrorMessage = $errorMessage
        }
    }
}

function Test-Provider {
    param(
        [string]$Provider,
        [hashtable]$From,
        [hashtable]$To
    )

    # Provider başarı simülasyonu
    switch ($Provider) {
        "HERE Maps" {
            # HERE Maps API key kontrolü
            $apiKey = $env:HERE_MAPS_API_KEY
            if (!$apiKey -or $apiKey -eq "YOUR_HERE_API_KEY") {
                return $false
            }
            # Rastgele başarı/başarısızlık (%80 başarı)
            return (Get-Random -Maximum 100) -lt 80
        }
        "Mapbox" {
            $apiKey = $env:MAPBOX_API_KEY
            if (!$apiKey -or $apiKey -eq "YOUR_MAPBOX_API_KEY") {
                return $false
            }
            return (Get-Random -Maximum 100) -lt 85
        }
        "Google Maps" {
            $apiKey = $env:GOOGLE_MAPS_API_KEY
            if (!$apiKey -or $apiKey -eq "YOUR_GOOGLE_API_KEY") {
                return $false
            }
            return (Get-Random -Maximum 100) -lt 90
        }
        "Offline" {
            # Offline her zaman başarılı
            return $true
        }
        default {
            return $false
        }
    }
}

function Show-Badge {
    param([string]$BadgeName)

    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"

    # Badge dosyasını güncelle (varsa)
    $badgeFile = Join-Path $ProjectPath "badge.json"
    if (Test-Path $badgeFile) {
        try {
            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json
            if ($badgeData.PSObject.Properties.Name -contains $BadgeName) {
                $badgeData.$BadgeName = $true
                $badgeData | ConvertTo-Json | Set-Content $badgeFile
                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"
            }
        } catch {
            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"
        }
    }
}

# Ana test döngüsü
Write-ColorOutput "🚀 Routing fallback testleri başlatılıyor..." "White"
Write-ColorOutput ""

foreach ($coord in $testCoordinates) {
    Test-RoutingFallback -From $coord.From -To $coord.To -TestName $coord.Name
    Write-ColorOutput ""
}

# Test özeti
Write-ColorOutput "=========================================" "Cyan"
Write-ColorOutput "           📊 Test Sonuçları" "Cyan"
Write-ColorOutput "=========================================" "Cyan"

$successRate = if ($testResults.TotalTests -gt 0) {
    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)
} else { 0 }

Write-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"
Write-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"
Write-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"
Write-ColorOutput "Başarı Oranı: $successRate%" "Cyan"
Write-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"

# Detaylı sonuçlar
if ($Verbose) {
    Write-ColorOutput "" "White"
    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"
    foreach ($detail in $testResults.Details) {
        $status = if ($detail.Passed) { "✅" } else { "❌" }
        $fallback = if ($detail.FallbackUsed) { " (Fallback)" } else { "" }
        Write-ColorOutput "  $status $($detail.TestName): $($detail.Duration.TotalMilliseconds)ms$fallback" "White"
        if (!$detail.Passed -and $detail.ErrorMessage) {
            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"
        }
    }
}

# JSON export
if ($ExportJson) {
    $jsonPath = Join-Path $ProjectPath "routing-fallback-test-results.json"
    $exportData = @{
        metadata = @{
            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            script_version = "1.0.0"
            test_environment = $TestEnvironment
            total_duration_seconds = $testResults.TestDuration.TotalSeconds
        }
        summary = @{
            total_tests = $testResults.TotalTests
            passed_tests = $testResults.PassedTests
            failed_tests = $testResults.FailedTests
            success_rate = $successRate
            test_duration = $testResults.TestDuration.ToString()
        }
        details = $testResults.Details
        recommendations = @(
            "HERE Maps API key'inin doğru yapılandırıldığından emin olun",
            "Mapbox API key'inin doğru yapılandırıldığından emin olun",
            "Google Maps API key'inin doğru yapılandırıldığından emin olun",
            "Offline routing'in her zaman fallback olarak kullanılabilir olduğundan emin olun"
        )
    }

    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath
    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"
}

# Badge tetikleme
if ($testResults.PassedTests -gt 0) {
    Show-Badge "Routing-Fallback"
}

# Final sonuç
Write-ColorOutput "" "White"
if ($testResults.FailedTests -eq 0) {
    Write-ColorOutput "🎉 Tüm routing fallback testleri başarılı! CI/CD pipeline devam edebilir." "Green"
    exit 0
} else {
    Write-ColorOutput "💥 Bazı routing fallback testleri başarısız. Lütfen hataları düzeltin." "Red"
    exit 1
}
