# AuditLegal.ps1 - Legal auto-audit scripti\n# Bu script yasal dosyaları otomatik olarak doğrular ve CI/CD pipeline ile entegre çalışır\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$LegalPath = ".\legal",\n    [string]$PrivacyPolicyFile = "privacy-policy.md",\n    [string]$TermsOfServiceFile = "terms-of-service.md",\n    [string]$LicenseFile = "LICENSE"\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:LEGAL_PATH = $LegalPath\n$env:PRIVACY_POLICY_FILE = $PrivacyPolicyFile\n$env:TERMS_OF_SERVICE_FILE = $TermsOfServiceFile\n$env:LICENSE_FILE = $LicenseFile\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      🔐 Legal Auto-Audit Sistemi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-LegalAudit {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Yasal klasör yapısı kontrolü\nfunction Test-LegalDirectoryStructure {\n    Write-ColorOutput "  📁 Yasal klasör yapısı kontrol ediliyor..." "Gray"\n\n    $legalFullPath = Join-Path $ProjectPath $LegalPath\n\n    if (!(Test-Path $legalFullPath)) {\n        Write-ColorOutput "    📂 Yasal klasör oluşturuluyor: $legalFullPath" "Gray"\n        New-Item -ItemType Directory -Path $legalFullPath -Force | Out-Null\n    } else {\n        Write-ColorOutput "    ✅ Yasal klasör mevcut: $legalFullPath" "Green"\n    }\n\n    # Alt klasörler kontrolü\n    $subDirs = @("policies", "licenses", "compliance", "gdpr", "ccpa")\n    foreach ($subDir in $subDirs) {\n        $subDirPath = Join-Path $legalFullPath $subDir\n        if (!(Test-Path $subDirPath)) {\n            New-Item -ItemType Directory -Path $subDirPath -Force | Out-Null\n            Write-ColorOutput "    📂 Alt klasör oluşturuldu: $subDir" "Gray"\n        } else {\n            Write-ColorOutput "    ✅ Alt klasör mevcut: $subDir" "Green"\n        }\n    }\n}\n\n# Privacy Policy kontrolü\nfunction Test-PrivacyPolicy {\n    Write-ColorOutput "  📋 Privacy Policy kontrol ediliyor..." "Gray"\n\n    $privacyPolicyPath = Join-Path $ProjectPath (Join-Path $LegalPath $PrivacyPolicyFile)\n\n    if (Test-Path $privacyPolicyPath) {\n        Write-ColorOutput "    ✅ Privacy Policy dosyası bulundu: $PrivacyPolicyFile" "Green"\n\n        # Dosya içeriği kontrolü\n        $content = Get-Content $privacyPolicyPath -Raw\n\n        # Gerekli bölümler kontrolü\n        $requiredSections = @(\n            "Data Collection",\n            "Data Usage",\n            "Data Sharing",\n            "User Rights",\n            "Contact Information",\n            "Last Updated"\n        )\n\n        $foundSections = 0\n        foreach ($section in $requiredSections) {\n            if ($content -match $section) {\n                $foundSections++\n            }\n        }\n\n        Write-ColorOutput "    📊 Bulunan bölümler: $foundSections/$($requiredSections.Count)" "Gray"\n\n        if ($foundSections -ge ($requiredSections.Count * 0.8)) {\n            Write-ColorOutput "    ✅ Privacy Policy içeriği yeterli" "Green"\n        } else {\n            Write-ColorOutput "    ⚠️  Privacy Policy içeriği eksik bölümler içeriyor" "Yellow"\n        }\n\n        # Dosya boyutu kontrolü\n        $fileSize = (Get-Item $privacyPolicyPath).Length\n        Write-ColorOutput "    📄 Dosya boyutu: $([math]::Round($fileSize/1024, 1)) KB" "Gray"\n\n        if ($fileSize -lt 1024) { # 1KB'den küçükse uyarı\n            Write-ColorOutput "    ⚠️  Privacy Policy dosyası çok küçük" "Yellow"\n        }\n\n    } else {\n        Write-ColorOutput "    ❌ Privacy Policy dosyası bulunamadı: $PrivacyPolicyFile" "Red"\n        Write-ColorOutput "    📝 Örnek Privacy Policy oluşturuluyor..." "Gray"\n\n        # Örnek Privacy Policy oluştur\n        $samplePrivacyPolicy = @"\n# Privacy Policy\n\n## Last Updated: $(Get-Date -Format "yyyy-MM-dd")\n\n## Data Collection\nWe collect information you provide directly to us...\n\n## Data Usage\nWe use the information we collect to...\n\n## Data Sharing\nWe do not sell, trade, or otherwise transfer your personal information...\n\n## User Rights\nYou have the right to access, update, or delete your personal information...\n\n## Contact Information\nIf you have any questions about this Privacy Policy, please contact us at:\n- Email: privacy@example.com\n- Address: [Your Address]\n\n## Changes to This Policy\nWe may update this Privacy Policy from time to time...\n"@\n\n        $samplePrivacyPolicy | Out-File $privacyPolicyPath -Encoding UTF8\n        Write-ColorOutput "    ✅ Örnek Privacy Policy oluşturuldu" "Green"\n    }\n}\n\n# Terms of Service kontrolü\nfunction Test-TermsOfService {\n    Write-ColorOutput "  📜 Terms of Service kontrol ediliyor..." "Gray"\n\n    $termsPath = Join-Path $ProjectPath (Join-Path $LegalPath $TermsOfServiceFile)\n\n    if (Test-Path $termsPath) {\n        Write-ColorOutput "    ✅ Terms of Service dosyası bulundu: $TermsOfServiceFile" "Green"\n\n        # Dosya içeriği kontrolü\n        $content = Get-Content $termsPath -Raw\n\n        # Gerekli bölümler kontrolü\n        $requiredSections = @(\n            "Acceptance of Terms",\n            "Use License",\n            "User Obligations",\n            "Prohibited Uses",\n            "Termination",\n            "Disclaimer",\n            "Limitation of Liability",\n            "Governing Law"\n        )\n\n        $foundSections = 0\n        foreach ($section in $requiredSections) {\n            if ($content -match $section) {\n                $foundSections++\n            }\n        }\n\n        Write-ColorOutput "    📊 Bulunan bölümler: $foundSections/$($requiredSections.Count)" "Gray"\n\n        if ($foundSections -ge ($requiredSections.Count * 0.8)) {\n            Write-ColorOutput "    ✅ Terms of Service içeriği yeterli" "Green"\n        } else {\n            Write-ColorOutput "    ⚠️  Terms of Service içeriği eksik bölümler içeriyor" "Yellow"\n        }\n\n    } else {\n        Write-ColorOutput "    ❌ Terms of Service dosyası bulunamadı: $TermsOfServiceFile" "Red"\n        Write-ColorOutput "    📝 Örnek Terms of Service oluşturuluyor..." "Gray"\n\n        # Örnek Terms of Service oluştur\n        $sampleTerms = @"\n# Terms of Service\n\n## Last Updated: $(Get-Date -Format "yyyy-MM-dd")\n\n## Acceptance of Terms\nBy accessing and using this application, you accept and agree to be bound by the terms...\n\n## Use License\nSubject to these Terms, we grant you a limited, non-exclusive, non-transferable license...\n\n## User Obligations\nYou agree to use the application only for lawful purposes...\n\n## Prohibited Uses\nYou may not use the application for any illegal or unauthorized purpose...\n\n## Termination\nWe may terminate or suspend your account immediately, without prior notice...\n\n## Disclaimer\nThe application is provided on an "AS IS" and "AS AVAILABLE" basis...\n\n## Limitation of Liability\nIn no event shall we be liable for any indirect, incidental, special, consequential...\n\n## Governing Law\nThese Terms shall be interpreted and governed by the laws of [Your Jurisdiction]...\n\n## Contact Information\nIf you have any questions about these Terms, please contact us at:\n- Email: legal@example.com\n"@\n\n        $sampleTerms | Out-File $termsPath -Encoding UTF8\n        Write-ColorOutput "    ✅ Örnek Terms of Service oluşturuldu" "Green"\n    }\n}\n\n# License dosyası kontrolü\nfunction Test-LicenseFile {\n    Write-ColorOutput "  📄 License dosyası kontrol ediliyor..." "Gray"\n\n    $licensePath = Join-Path $ProjectPath $LicenseFile\n\n    if (Test-Path $licensePath) {\n        Write-ColorOutput "    ✅ License dosyası bulundu: $LicenseFile" "Green"\n\n        # Lisans türü kontrolü\n        $content = Get-Content $licensePath -Raw\n\n        $licenseTypes = @(\n            @{ Name = "MIT"; Pattern = "MIT License" },\n            @{ Name = "Apache 2.0"; Pattern = "Apache License" },\n            @{ Name = "GPL"; Pattern = "GNU General Public License" },\n            @{ Name = "BSD"; Pattern = "BSD License" }\n        )\n\n        $detectedLicense = "Unknown"\n        foreach ($license in $licenseTypes) {\n            if ($content -match $license.Pattern) {\n                $detectedLicense = $license.Name\n                break\n            }\n        }\n\n        Write-ColorOutput "    📋 Tespit edilen lisans: $detectedLicense" "Gray"\n\n        # Lisans geçerliliği kontrolü\n        if ($content -match "Copyright" -and $content -match "Permission is hereby granted") {\n            Write-ColorOutput "    ✅ Lisans geçerli görünüyor" "Green"\n        } else {\n            Write-ColorOutput "    ⚠️  Lisans içeriği standart dışı" "Yellow"\n        }\n\n    } else {\n        Write-ColorOutput "    ❌ License dosyası bulunamadı: $LicenseFile" "Red"\n        Write-ColorOutput "    📝 MIT License oluşturuluyor..." "Gray"\n\n        # Örnek MIT License oluştur\n        $sampleLicense = @"\nMIT License\n\nCopyright (c) $(Get-Date -Format "yyyy") [Your Name or Company]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"@\n\n        $sampleLicense | Out-File $licensePath -Encoding UTF8\n        Write-ColorOutput "    ✅ Örnek MIT License oluşturuldu" "Green"\n    }\n}\n\n# GDPR uyumluluk kontrolü\nfunction Test-GDPRCompliance {\n    Write-ColorOutput "  🇪🇺 GDPR uyumluluk kontrol ediliyor..." "Gray"\n\n    $gdprPath = Join-Path $ProjectPath (Join-Path $LegalPath "gdpr")\n\n    # GDPR gerekli dosyalar\n    $gdprFiles = @(\n        "data-processing-agreement.md",\n        "data-retention-policy.md",\n        "cookie-policy.md",\n        "data-subject-rights.md"\n    )\n\n    $existingFiles = 0\n    foreach ($file in $gdprFiles) {\n        $filePath = Join-Path $gdprPath $file\n        if (Test-Path $filePath) {\n            $existingFiles++\n            Write-ColorOutput "    ✅ $file mevcut" "Green"\n        } else {\n            Write-ColorOutput "    ❌ $file eksik" "Red"\n        }\n    }\n\n    Write-ColorOutput "    📊 GDPR dosyaları: $existingFiles/$($gdprFiles.Count)" "Gray"\n\n    if ($existingFiles -ge ($gdprFiles.Count * 0.5)) {\n        Write-ColorOutput "    ✅ GDPR uyumluluk yeterli" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  GDPR uyumluluk eksik" "Yellow"\n    }\n}\n\n# Yasal dosya güncellik kontrolü\nfunction Test-LegalFileFreshness {\n    Write-ColorOutput "  📅 Yasal dosya güncellik kontrol ediliyor..." "Gray"\n\n    $legalFiles = @(\n        @{ Path = Join-Path $LegalPath $PrivacyPolicyFile; Name = "Privacy Policy" },\n        @{ Path = Join-Path $LegalPath $TermsOfServiceFile; Name = "Terms of Service" },\n        @{ Path = $LicenseFile; Name = "License" }\n    )\n\n    $maxAgeDays = 365  # 1 yıl\n\n    foreach ($file in $legalFiles) {\n        $filePath = Join-Path $ProjectPath $file.Path\n\n        if (Test-Path $filePath) {\n            $fileInfo = Get-Item $filePath\n            $age = (Get-Date) - $fileInfo.LastWriteTime\n            $ageDays = $age.TotalDays\n\n            Write-ColorOutput "    📄 $($file.Name): $([math]::Round($ageDays, 0)) gün önce güncellendi" "Gray"\n\n            if ($ageDays -gt $maxAgeDays) {\n                Write-ColorOutput "    ⚠️  $($file.Name) çok eski (>$maxAgeDays gün)" "Yellow"\n            } else {\n                Write-ColorOutput "    ✅ $($file.Name) güncel" "Green"\n            }\n        }\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Legal auto-audit başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-LegalAudit -TestName "Yasal Klasör Yapısı" -TestScript { Test-LegalDirectoryStructure }\nTest-LegalAudit -TestName "Privacy Policy" -TestScript { Test-PrivacyPolicy }\nTest-LegalAudit -TestName "Terms of Service" -TestScript { Test-TermsOfService }\nTest-LegalAudit -TestName "License Dosyası" -TestScript { Test-LicenseFile }\nTest-LegalAudit -TestName "GDPR Uyumluluk" -TestScript { Test-GDPRCompliance }\nTest-LegalAudit -TestName "Dosya Güncellik" -TestScript { Test-LegalFileFreshness }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Audit Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# Yasal uyumluluk raporu\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "        📋 Yasal Uyumluluk Raporu" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$legalFiles = @(\n    Join-Path $LegalPath $PrivacyPolicyFile,\n    Join-Path $LegalPath $TermsOfServiceFile,\n    $LicenseFile\n)\n\n$complianceScore = 0\n$maxScore = $legalFiles.Count\n\nforeach ($file in $legalFiles) {\n    $filePath = Join-Path $ProjectPath $file\n    if (Test-Path $filePath) {\n        $complianceScore++\n        Write-ColorOutput "✅ $(Split-Path $file -Leaf) - Mevcut" "Green"\n    } else {\n        Write-ColorOutput "❌ $(Split-Path $file -Leaf) - Eksik" "Red"\n    }\n}\n\n$compliancePercentage = [math]::Round(($complianceScore / $maxScore) * 100, 1)\nWrite-ColorOutput "📊 Yasal Uyumluluk Skoru: $complianceScore/$maxScore ($compliancePercentage%)" "Cyan"\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "legal-audit-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            legal_path = $LegalPath\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            compliance_score = $complianceScore\n            compliance_percentage = $compliancePercentage\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        legal_files = @{\n            privacy_policy = @{\n                file = $PrivacyPolicyFile\n                exists = Test-Path (Join-Path $ProjectPath (Join-Path $LegalPath $PrivacyPolicyFile))\n            }\n            terms_of_service = @{\n                file = $TermsOfServiceFile\n                exists = Test-Path (Join-Path $ProjectPath (Join-Path $LegalPath $TermsOfServiceFile))\n            }\n            license = @{\n                file = $LicenseFile\n                exists = Test-Path (Join-Path $ProjectPath $LicenseFile)\n            }\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "Privacy Policy ve Terms of Service dosyalarını oluşturun",\n            "Lisans dosyasını proje türüne uygun olarak güncelleyin",\n            "GDPR uyumluluk dosyalarını tamamlayın",\n            "Yasal dosyaları yılda bir kez gözden geçirin",\n            "Yasal değişiklikleri takip etmek için monitoring sistemi kurun"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Audit sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Legal-Audited"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Legal auto-audit başarılı! Tüm yasal dosyalar mevcut ve güncel." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Legal audit tamamlandı ancak bazı dosyalar eksik veya güncel değil." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n