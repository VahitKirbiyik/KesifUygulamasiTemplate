# Test-LegalFiles.ps1 - CI/CD pipeline ile entegre legal dosya doğrulama testi\n# Bu script privacy policy, terms of service, robots.txt ve sitemap.xml dosyalarını doğrular\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$Domain = "https://kesifapp.com"\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "    🧾 Legal Dosya Doğrulama Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:DOMAIN = $Domain\n\nWrite-ColorOutput "Test Environment: $TestEnvironment" "Yellow"\nWrite-ColorOutput "Domain: $Domain" "Yellow"\nWrite-ColorOutput "Project Path: $ProjectPath" "Yellow"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Legal dosyalar listesi\n$legalFiles = @(\n    @{ Path = ".\legal\privacy-policy.md"; Name = "Privacy Policy"; Required = $true },\n    @{ Path = ".\legal\terms-of-service.md"; Name = "Terms of Service"; Required = $true },\n    @{ Path = ".\robots.txt"; Name = "Robots.txt"; Required = $true },\n    @{ Path = ".\sitemap.xml"; Name = "Sitemap.xml"; Required = $true },\n    @{ Path = ".\legal\cookie-policy.md"; Name = "Cookie Policy"; Required = $false },\n    @{ Path = ".\legal\data-processing-agreement.md"; Name = "Data Processing Agreement"; Required = $false },\n    @{ Path = ".\legal\gdpr-compliance.md"; Name = "GDPR Compliance"; Required = $false }\n)\n\n# SEO dosyalar listesi\n$seoFiles = @(\n    @{ Path = ".\seo\description.txt"; Name = "SEO Description"; Required = $true },\n    @{ Path = ".\seo\keywords.txt"; Name = "SEO Keywords"; Required = $true },\n    @{ Path = ".\seo\meta-tags.html"; Name = "Meta Tags"; Required = $false },\n    @{ Path = ".\seo\structured-data.json"; Name = "Structured Data"; Required = $false }\n)\n\n# Test fonksiyonları\nfunction Test-FileExists {\n    param(\n        [string]$FilePath,\n        [string]$FileName,\n        [bool]$Required = $true\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $FileName dosyası kontrol ediliyor..." "White"\n\n    try {\n        $fullPath = Join-Path $ProjectPath $FilePath\n\n        if (Test-Path $fullPath) {\n            Write-ColorOutput "  ✅ Dosya bulundu: $FilePath" "Green"\n\n            # Dosya içeriği kontrolü\n            $fileInfo = Get-Item $fullPath\n            $fileSize = $fileInfo.Length\n\n            if ($fileSize -eq 0) {\n                $errorMessage = "Dosya boş"\n                Write-ColorOutput "  ⚠️  Dosya boş: $fileSize bytes" "Yellow"\n                $testPassed = !$Required  # Required değilse boş dosya kabul edilebilir\n            } else {\n                Write-ColorOutput "  📄 Dosya boyutu: $fileSize bytes" "Gray"\n                $testPassed = $true\n\n                # İçerik temel kontrolü\n                Test-FileContent -FilePath $fullPath -FileName $FileName\n            }\n        } else {\n            $errorMessage = "Dosya bulunamadı"\n            if ($Required) {\n                Write-ColorOutput "  ❌ Gerekli dosya bulunamadı: $FilePath" "Red"\n            } else {\n                Write-ColorOutput "  ⚠️  İsteğe bağlı dosya bulunamadı: $FilePath" "Yellow"\n                $testPassed = $true  # İsteğe bağlı dosya için test başarılı\n            }\n        }\n\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  💥 Dosya kontrol hatası: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = "$FileName Dosya Kontrolü"\n            FilePath = $FilePath\n            Passed = $testPassed\n            Required = $Required\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\nfunction Test-FileContent {\n    param(\n        [string]$FilePath,\n        [string]$FileName\n    )\n\n    try {\n        $content = Get-Content $FilePath -Raw\n\n        # Temel içerik kontrolleri\n        switch -Wildcard ($FileName) {\n            "*Privacy*" {\n                # Privacy policy için gerekli kelimeler\n                $requiredTerms = @("privacy", "data", "personal information", "cookies")\n                $missingTerms = $requiredTerms | Where-Object { $content -notmatch $_ }\n                if ($missingTerms) {\n                    Write-ColorOutput "  ⚠️  Privacy policy'de eksik terimler: $($missingTerms -join ', ')" "Yellow"\n                }\n            }\n            "*Terms*" {\n                # Terms of service için gerekli kelimeler\n                $requiredTerms = @("terms", "service", "agreement", "liability")\n                $missingTerms = $requiredTerms | Where-Object { $content -notmatch $_ }\n                if ($missingTerms) {\n                    Write-ColorOutput "  ⚠️  Terms'de eksik terimler: $($missingTerms -join ', ')" "Yellow"\n                }\n            }\n            "*Robots*" {\n                # Robots.txt için temel yapı kontrolü\n                if ($content -notmatch "User-agent") {\n                    Write-ColorOutput "  ⚠️  Robots.txt'de User-agent bulunamadı" "Yellow"\n                }\n            }\n            "*Sitemap*" {\n                # Sitemap.xml için domain kontrolü\n                if ($content -notmatch $Domain) {\n                    Write-ColorOutput "  ⚠️  Sitemap.xml'de domain bulunamadı: $Domain" "Yellow"\n                }\n            }\n        }\n\n        Write-ColorOutput "  ✅ Dosya içeriği kontrol edildi" "Green"\n\n    } catch {\n        Write-ColorOutput "  ⚠️  Dosya içeriği kontrol edilemedi: $($_.Exception.Message)" "Yellow"\n    }\n}\n\nfunction Test-WebAccessibility {\n    param([string]$Url)\n\n    Write-ColorOutput "🌐 Web erişilebilirliği kontrol ediliyor: $Url" "White"\n\n    try {\n        $response = Invoke-WebRequest -Uri $Url -Method Head -TimeoutSec 10\n        if ($response.StatusCode -eq 200) {\n            Write-ColorOutput "  ✅ URL erişilebilir: $($response.StatusCode)" "Green"\n            return $true\n        } else {\n            Write-ColorOutput "  ❌ URL erişilemez: $($response.StatusCode)" "Red"\n            return $false\n        }\n    } catch {\n        Write-ColorOutput "  ⚠️  URL kontrol edilemedi: $($_.Exception.Message)" "Yellow"\n        return $false\n    }\n}\n\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -contains $BadgeName) {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Legal ve SEO dosya testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Legal dosyalar testi\nWrite-ColorOutput "📋 Legal Dosyalar:" "Cyan"\nforeach ($file in $legalFiles) {\n    Test-FileExists -FilePath $file.Path -FileName $file.Name -Required $file.Required\n}\n\nWrite-ColorOutput ""\n\n# SEO dosyalar testi\nWrite-ColorOutput "🔍 SEO Dosyalar:" "Cyan"\nforeach ($file in $seoFiles) {\n    Test-FileExists -FilePath $file.Path -FileName $file.Name -Required $file.Required\n}\n\nWrite-ColorOutput ""\n\n# Web erişilebilirlik testi (production ortamında)\nif ($TestEnvironment -ne "local") {\n    Write-ColorOutput "🌐 Web Erişilebilirlik Testleri:" "Cyan"\n\n    $webUrls = @(\n        "$Domain/legal/privacy-policy.html",\n        "$Domain/legal/terms-of-service.html",\n        "$Domain/robots.txt",\n        "$Domain/sitemap.xml"\n    )\n\n    foreach ($url in $webUrls) {\n        Test-WebAccessibility -Url $url\n    }\n}\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        $required = if ($detail.Required) { " (Gerekli)" } else { " (İsteğe bağlı)" }\n        Write-ColorOutput "  $status $($detail.TestName)$required" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "legal-seo-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            domain = $Domain\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        legal_files = @{\n            required = $legalFiles | Where-Object { $_.Required } | ForEach-Object { $_.Name }\n            optional = $legalFiles | Where-Object { !$_.Required } | ForEach-Object { $_.Name }\n        }\n        seo_files = @{\n            required = $seoFiles | Where-Object { $_.Required } | ForEach-Object { $_.Name }\n            optional = $seoFiles | Where-Object { !$_.Required } | ForEach-Object { $_.Name }\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "Eksik legal dosyaları oluşturun (privacy-policy.md, terms-of-service.md)",\n            "Robots.txt ve sitemap.xml dosyalarını ekleyin",\n            "SEO için description.txt ve keywords.txt dosyalarını oluşturun",\n            "Web sunucusunda legal sayfalarının erişilebilir olduğundan emin olun"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "LegalVerified"\n    Show-Badge "SEO-Verified"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tüm legal ve SEO testleri başarılı! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı legal ve SEO testleri başarısız. Lütfen eksik dosyaları oluşturun." "Red"\n    exit 1\n}\n