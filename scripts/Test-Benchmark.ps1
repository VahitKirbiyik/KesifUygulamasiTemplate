# Test-Benchmark.ps1 - Dinamik benchmark testi\n# Bu script benchmark sistemini test eder ve CI/CD pipeline ile entegre çalışır\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [int]$MaxBenchmarkHistory = 1000,\n    [double]$PerformanceThreshold = 0.1,\n    [string[]]$MonitoredMetrics = @("route_calculation", "map_rendering", "tile_loading", "api_response")\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:AUTO_SAVE_BENCHMARKS = "true"\n$env:MAX_BENCHMARK_HISTORY = $MaxBenchmarkHistory.ToString()\n$env:PERFORMANCE_THRESHOLD = $PerformanceThreshold.ToString()\n$env:MONITORED_METRICS = $MonitoredMetrics -join ","\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      📊 Dinamik Benchmark Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-BenchmarkSystem {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Benchmark veri yapısı testi\nfunction Test-BenchmarkDataStructure {\n    Write-ColorOutput "  📊 Benchmark veri yapısı test ediliyor..." "Gray"\n\n    # Benchmark veri klasörü kontrolü\n    $benchmarkDataPath = Join-Path $env:APPDATA "KesifUygulamasi\BenchmarkData"\n    if (!(Test-Path $benchmarkDataPath)) {\n        New-Item -ItemType Directory -Path $benchmarkDataPath -Force | Out-Null\n        Write-ColorOutput "    📁 Benchmark veri klasörü oluşturuldu" "Gray"\n    }\n\n    # Örnek benchmark dosyası oluştur\n    $sampleBenchmark = @{\n        metric = "route_calculation"\n        value = 150.5\n        unit = "ms"\n        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n        category = "Navigation"\n        metadata = @{\n            environment = "Test"\n            platform = "Windows"\n            framework = "NET8.0"\n        }\n        isBaseline = $false\n    }\n\n    $benchmarkFile = Join-Path $benchmarkDataPath "benchmark_test_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"\n    $sampleBenchmark | ConvertTo-Json -Depth 10 | Set-Content $benchmarkFile\n\n    Write-ColorOutput "    📄 Örnek benchmark dosyası oluşturuldu: $benchmarkFile" "Gray"\n\n    # JSON validasyonu\n    try {\n        $content = Get-Content $benchmarkFile -Raw | ConvertFrom-Json\n        Write-ColorOutput "    ✅ JSON formatı geçerli" "Green"\n    } catch {\n        Write-ColorOutput "    ❌ JSON format hatası" "Red"\n        throw\n    }\n}\n\n# Performans ölçümü testi\nfunction Test-PerformanceMeasurement {\n    Write-ColorOutput "  ⏱️  Performans ölçümü test ediliyor..." "Gray"\n\n    # Örnek performans metrikleri\n    $testMetrics = @(\n        @{ Name = "route_calculation"; Value = 145.2; Unit = "ms"; Category = "Navigation" },\n        @{ Name = "map_rendering"; Value = 42.8; Unit = "ms"; Category = "UI" },\n        @{ Name = "tile_loading"; Value = 118.5; Unit = "ms"; Category = "Data" },\n        @{ Name = "api_response"; Value = 195.3; Unit = "ms"; Category = "Network" },\n        @{ Name = "database_query"; Value = 23.7; Unit = "ms"; Category = "Data" }\n    )\n\n    foreach ($metric in $testMetrics) {\n        Write-ColorOutput "    📏 $($metric.Name): $($metric.Value) $($metric.Unit) ($($metric.Category))" "Gray"\n    }\n\n    Write-ColorOutput "    📊 Test edilen metrik sayısı: $($testMetrics.Count)" "Gray"\n}\n\n# Baseline karşılaştırma testi\nfunction Test-BaselineComparison {\n    Write-ColorOutput "  📈 Baseline karşılaştırma test ediliyor..." "Gray"\n\n    # Baseline dosyası oluştur\n    $benchmarkDataPath = Join-Path $env:APPDATA "KesifUygulamasi\BenchmarkData"\n    $baselineFile = Join-Path $benchmarkDataPath "baselines.json"\n\n    $baselines = @{\n        "route_calculation" = 140.0\n        "map_rendering" = 40.0\n        "tile_loading" = 110.0\n        "api_response" = 180.0\n    }\n\n    $baselines | ConvertTo-Json | Set-Content $baselineFile\n    Write-ColorOutput "    📄 Baseline dosyası oluşturuldu" "Gray"\n\n    # Karşılaştırma testi\n    $testValues = @{\n        "route_calculation" = 150.5\n        "map_rendering" = 38.2\n        "tile_loading" = 125.8\n        "api_response" = 175.3\n    }\n\n    foreach ($metric in $testValues.Keys) {\n        $baseline = $baselines[$metric]\n        $current = $testValues[$metric]\n        $deviation = (($current - $baseline) / $baseline) * 100\n\n        $status = if ([Math]::Abs($deviation) -le ($PerformanceThreshold * 100)) { "✅" } else { "⚠️" }\n        Write-ColorOutput "    $status $metric : ${current}ms (Baseline: ${baseline}ms, Deviation: ${deviation:F2}%)" "Gray"\n    }\n}\n\n# Metrik izleme testi\nfunction Test-MetricMonitoring {\n    Write-ColorOutput "  📋 Metrik izleme test ediliyor..." "Gray"\n\n    $monitoredMetrics = $env:MONITORED_METRICS -split ","\n    Write-ColorOutput "    📝 İzlenen metrikler: $($monitoredMetrics -join ', ')" "Gray"\n\n    # Her metrik için örnek değerler\n    $metricSamples = @{\n        "route_calculation" = @(145.2, 152.8, 138.5, 149.3, 141.7)\n        "map_rendering" = @(42.8, 38.2, 45.6, 41.3, 39.8)\n        "tile_loading" = @(118.5, 125.8, 112.3, 121.7, 115.4)\n        "api_response" = @(195.3, 182.7, 201.2, 188.5, 197.8)\n    }\n\n    foreach ($metric in $monitoredMetrics) {\n        if ($metricSamples.ContainsKey($metric)) {\n            $values = $metricSamples[$metric]\n            $avg = ($values | Measure-Object -Average).Average\n            $min = ($values | Measure-Object -Minimum).Minimum\n            $max = ($values | Measure-Object -Maximum).Maximum\n\n            Write-ColorOutput "    📊 $metric - Avg: ${avg:F1}ms, Min: ${min:F1}ms, Max: ${max:F1}ms" "Gray"\n        }\n    }\n}\n\n# Performans regresyon testi\nfunction Test-PerformanceRegression {\n    Write-ColorOutput "  📉 Performans regresyon testi..." "Gray"\n\n    # Simüle edilmiş geçmiş veriler\n    $historicalData = @(\n        @{ Date = "2024-01-01"; Value = 140.0 },\n        @{ Date = "2024-01-02"; Value = 142.5 },\n        @{ Date = "2024-01-03"; Value = 138.8 },\n        @{ Date = "2024-01-04"; Value = 145.2 },\n        @{ Date = "2024-01-05"; Value = 141.7 }\n    )\n\n    $currentValue = 155.3\n    $averageHistorical = ($historicalData | ForEach-Object { $_.Value } | Measure-Object -Average).Average\n    $regression = (($currentValue - $averageHistorical) / $averageHistorical) * 100\n\n    Write-ColorOutput "    📈 Geçmiş ortalama: ${averageHistorical:F1}ms" "Gray"\n    Write-ColorOutput "    📈 Güncel değer: ${currentValue:F1}ms" "Gray"\n    Write-ColorOutput "    📈 Regresyon: ${regression:F2}%" "Gray"\n\n    if ([Math]::Abs($regression) -gt ($PerformanceThreshold * 100)) {\n        Write-ColorOutput "    ⚠️  Performans regresyonu tespit edildi!" "Yellow"\n    } else {\n        Write-ColorOutput "    ✅ Performans regresyonu yok" "Green"\n    }\n}\n\n# Geçmiş veri yönetimi testi\nfunction Test-HistoricalDataManagement {\n    Write-ColorOutput "  📚 Geçmiş veri yönetimi test ediliyor..." "Gray"\n\n    $maxHistory = [int]$env:MAX_BENCHMARK_HISTORY\n    Write-ColorOutput "    📝 Maksimum geçmiş kaydı: $maxHistory" "Gray"\n\n    # Geçmiş dosya sayısı kontrolü\n    $benchmarkDataPath = Join-Path $env:APPDATA "KesifUygulamasi\BenchmarkData"\n    $benchmarkFiles = Get-ChildItem $benchmarkDataPath -Filter "benchmark_*.json"\n\n    Write-ColorOutput "    📄 Mevcut benchmark dosyası sayısı: $($benchmarkFiles.Count)" "Gray"\n\n    if ($benchmarkFiles.Count -gt $maxHistory) {\n        Write-ColorOutput "    ⚠️  Geçmiş dosya sayısı limiti aşılmış" "Yellow"\n    } else {\n        Write-ColorOutput "    ✅ Geçmiş dosya sayısı limit içinde" "Green"\n    }\n\n    # En eski dosyaları listele\n    $oldestFiles = $benchmarkFiles | Sort-Object LastWriteTime | Select-Object -First 5\n    if ($oldestFiles) {\n        Write-ColorOutput "    📅 En eski 5 dosya:" "Gray"\n        foreach ($file in $oldestFiles) {\n            Write-ColorOutput "      - $($file.Name) ($($file.LastWriteTime))" "Gray"\n        }\n    }\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Dinamik benchmark testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-BenchmarkSystem -TestName "Benchmark Veri Yapısı" -TestScript { Test-BenchmarkDataStructure }\nTest-BenchmarkSystem -TestName "Performans Ölçümü" -TestScript { Test-PerformanceMeasurement }\nTest-BenchmarkSystem -TestName "Baseline Karşılaştırma" -TestScript { Test-BaselineComparison }\nTest-BenchmarkSystem -TestName "Metrik İzleme" -TestScript { Test-MetricMonitoring }\nTest-BenchmarkSystem -TestName "Performans Regresyon" -TestScript { Test-PerformanceRegression }\nTest-BenchmarkSystem -TestName "Geçmiş Veri Yönetimi" -TestScript { Test-HistoricalDataManagement }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "benchmark-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            max_benchmark_history = $MaxBenchmarkHistory\n            performance_threshold = $PerformanceThreshold\n            monitored_metrics = $MonitoredMetrics\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        performance_metrics = @{\n            monitored_count = $MonitoredMetrics.Count\n            baseline_configured = $true\n            regression_detection = $true\n        }\n        details = $testResults.Details\n        recommendations = @(\n            "Baseline değerlerini production ortamında düzenli güncelleyin",\n            "Performans threshold'unu uygulama ihtiyaçlarına göre ayarlayın",\n            "Benchmark geçmişini periyodik olarak arşivleyin",\n            "Regresyon alertlerini monitoring sistemine entegre edin"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Benchmark-Logged"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Tüm dinamik benchmark testleri başarılı! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı benchmark testleri başarısız. Lütfen performans metriklerini kontrol edin." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n