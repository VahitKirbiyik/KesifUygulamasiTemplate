# Test-VoiceGuidance.ps1\n# Voice guidance playback and offline validation test script\n# Tests TTS integration and offline voice navigation\n\nparam(\n    [string]$ProjectPath = $PSScriptRoot,\n    [string]$TestEnvironment = "Development",\n    [switch]$EnableVoicePlayback = $true,\n    [switch]$TestOfflineMode = $true,\n    [switch]$EnableBadgeTrigger = $true,\n    [switch]$GenerateTestReport = $true,\n    [int]$VoiceInstructions = 10,\n    [string]$TtsEngine = "System.Speech",  # System.Speech or Azure Cognitive Services\n    [string]$VoiceLanguage = "tr-TR",\n    [string]$VoiceName = "Microsoft Server Speech Text to Speech Voice (tr-TR, Tolga)",\n    [int]$PlaybackDelayMs = 500,\n    [switch]$CacheVoiceFiles = $true\n)\n\n# Environment variables for voice guidance testing\n$env:VOICE_GUIDANCE_TEST_ENABLED = $EnableVoicePlayback.ToString().ToLower()\n$env:OFFLINE_VOICE_MODE = $TestOfflineMode.ToString().ToLower()\n$env:TTS_ENGINE = $TtsEngine\n$env:VOICE_LANGUAGE = $VoiceLanguage\n$env:BADGE_TRIGGER_ENABLED = $EnableBadgeTrigger.ToString().ToLower()\n\n# Test configuration\n$testConfig = @{\n    ProjectPath = $ProjectPath\n    TestEnvironment = $TestEnvironment\n    StartTime = Get-Date\n    VoiceInstructions = $VoiceInstructions\n    VoiceFilesGenerated = 0\n    VoiceFilesPlayed = 0\n    OfflineTestsPassed = 0\n    CacheHits = 0\n    TestResults = @()\n    BadgeTriggers = @()\n}\n\n# Create test output directories\n$testOutputPath = Join-Path $ProjectPath "test-results\voice-guidance"\n$voiceCachePath = Join-Path $testOutputPath "voice-cache"\nNew-Item -ItemType Directory -Force -Path $testOutputPath | Out-Null\nNew-Item -ItemType Directory -Force -Path $voiceCachePath | Out-Null\n\nWrite-Host "=== Voice Guidance Test Started ===" -ForegroundColor Cyan\nWrite-Host "Project Path: $ProjectPath" -ForegroundColor Gray\nWrite-Host "Test Environment: $TestEnvironment" -ForegroundColor Gray\nWrite-Host "Voice Instructions: $VoiceInstructions" -ForegroundColor Gray\nWrite-Host "TTS Engine: $TtsEngine" -ForegroundColor Gray\nWrite-Host ""\n\n# Test classes\nclass VoiceInstruction {\n    [string]$Id\n    [string]$Text\n    [string]$Type  # Navigation, Warning, Confirmation\n    [int]$Priority  # 1-5, higher is more important\n    [DateTime]$CreatedTime\n    [string]$Language\n    [hashtable]$Metadata\n\n    VoiceInstruction([string]$text, [string]$type, [int]$priority) {\n        $this.Id = [guid]::NewGuid().ToString()\n        $this.Text = $text\n        $this.Type = $type\n        $this.Priority = $priority\n        $this.CreatedTime = Get-Date\n        $this.Language = "tr-TR"\n        $this.Metadata = @{}\n    }\n}\n\nclass VoicePlaybackResult {\n    [string]$InstructionId\n    [string]$Text\n    [bool]$Generated\n    [bool]$Played\n    [bool]$Cached\n    [DateTime]$GenerationTime\n    [DateTime]$PlaybackTime\n    [TimeSpan]$PlaybackDuration\n    [string]$CacheFilePath\n    [string]$ErrorMessage\n    [hashtable]$Metadata\n\n    VoicePlaybackResult([VoiceInstruction]$instruction) {\n        $this.InstructionId = $instruction.Id\n        $this.Text = $instruction.Text\n        $this.Generated = $false\n        $this.Played = $false\n        $this.Cached = $false\n        $this.Metadata = @{}\n    }\n}\n\nclass MockVoiceGuide {\n    [string]$TtsEngine\n    [string]$VoiceLanguage\n    [string]$VoiceName\n    [string]$CacheDirectory\n    [System.Collections.Generic.Queue[VoiceInstruction]]$VoiceQueue\n    [System.Collections.Generic.Dictionary[string, VoicePlaybackResult]]$PlaybackHistory\n    [bool]$OfflineMode\n\n    MockVoiceGuide([string]$engine, [string]$language, [string]$voice, [string]$cacheDir) {\n        $this.TtsEngine = $engine\n        $this.VoiceLanguage = $language\n        $this.VoiceName = $voice\n        $this.CacheDirectory = $cacheDir\n        $this.VoiceQueue = New-Object System.Collections.Generic.Queue[VoiceInstruction]\n        $this.PlaybackHistory = New-Object System.Collections.Generic.Dictionary[string, VoicePlaybackResult]\n        $this.OfflineMode = $false\n    }\n\n    [void]SetOfflineMode([bool]$offline) {\n        $this.OfflineMode = $offline\n    }\n\n    [VoicePlaybackResult]SpeakText([string]$text, [string]$type = "Navigation", [int]$priority = 3) {\n        $instruction = [VoiceInstruction]::new($text, $type, $priority)\n        return $this.SpeakInstruction($instruction)\n    }\n\n    [VoicePlaybackResult]SpeakInstruction([VoiceInstruction]$instruction) {\n        $result = [VoicePlaybackResult]::new($instruction)\n        $cacheKey = $this.GetCacheKey($instruction.Text)\n        $cacheFilePath = Join-Path $this.CacheDirectory "$cacheKey.wav"\n\n        # Check cache first\n        if ($CacheVoiceFiles -and (Test-Path $cacheFilePath)) {\n            $result.Cached = $true\n            $result.CacheFilePath = $cacheFilePath\n            $testConfig.CacheHits++\n        } else {\n            # Generate voice file\n            try {\n                $result.GenerationTime = Get-Date\n                $generationSuccess = $this.GenerateVoiceFile($instruction.Text, $cacheFilePath)\n                $result.Generated = $generationSuccess\n\n                if ($generationSuccess) {\n                    $result.CacheFilePath = $cacheFilePath\n                    $testConfig.VoiceFilesGenerated++\n                } else {\n                    $result.ErrorMessage = "Voice file generation failed"\n                }\n            }\n            catch {\n                $result.Generated = $false\n                $result.ErrorMessage = "Voice generation error: $($_.Exception.Message)"\n            }\n        }\n\n        # Play voice file\n        if ($result.Generated -or $result.Cached) {\n            try {\n                $result.PlaybackTime = Get-Date\n                $playbackSuccess = $this.PlayVoiceFile($cacheFilePath)\n                $result.Played = $playbackSuccess\n\n                if ($playbackSuccess) {\n                    $result.PlaybackDuration = New-TimeSpan -Start $result.PlaybackTime -End (Get-Date)\n                    $testConfig.VoiceFilesPlayed++\n                } else {\n                    $result.ErrorMessage = "Voice playback failed"\n                }\n            }\n            catch {\n                $result.Played = $false\n                $result.ErrorMessage = "Voice playback error: $($_.Exception.Message)"\n            }\n        }\n\n        $this.PlaybackHistory[$instruction.Id] = $result\n        return $result\n    }\n\n    [bool]GenerateVoiceFile([string]$text, [string]$outputPath) {\n        try {\n            if ($this.OfflineMode) {\n                # Simulate offline voice generation\n                Start-Sleep -Milliseconds (Get-Random -Minimum 200 -Maximum 800)\n                # Create a dummy file to simulate voice file\n                "Simulated voice data for: $text" | Out-File -FilePath $outputPath -Encoding UTF8\n                return $true\n            }\n\n            # Use System.Speech for TTS\n            Add-Type -AssemblyName System.Speech\n            $speechSynthesizer = New-Object System.Speech.Synthesis.SpeechSynthesizer\n\n            if ($this.VoiceName) {\n                try {\n                    $speechSynthesizer.SelectVoice($this.VoiceName)\n                }\n                catch {\n                    # Voice not found, use default\n                    Write-Warning "Voice '$($this.VoiceName)' not found, using default voice"\n                }\n            }\n\n            $speechSynthesizer.SetOutputToWaveFile($outputPath)\n            $speechSynthesizer.Speak($text)\n            $speechSynthesizer.SetOutputToDefaultAudioDevice()\n\n            return $true\n        }\n        catch {\n            Write-Warning "Voice generation failed: $($_.Exception.Message)"\n            return $false\n        }\n    }\n\n    [bool]PlayVoiceFile([string]$filePath) {\n        try {\n            if ($this.OfflineMode) {\n                # Simulate offline playback\n                Start-Sleep -Milliseconds (Get-Random -Minimum 500 -Maximum 2000)\n                return $true\n            }\n\n            # Play the voice file\n            $soundPlayer = New-Object System.Media.SoundPlayer\n            $soundPlayer.SoundLocation = $filePath\n            $soundPlayer.PlaySync()\n\n            return $true\n        }\n        catch {\n            Write-Warning "Voice playback failed: $($_.Exception.Message)"\n            return $false\n        }\n    }\n\n    [string]GetCacheKey([string]$text) {\n        $hash = [System.Security.Cryptography.SHA256]::Create()\n        $bytes = [System.Text.Encoding]::UTF8.GetBytes($text.ToLower())\n        $hashBytes = $hash.ComputeHash($bytes)\n        return [BitConverter]::ToString($hashBytes).Replace("-", "").ToLower()\n    }\n\n    [void]QueueVoiceInstruction([VoiceInstruction]$instruction) {\n        $this.VoiceQueue.Enqueue($instruction)\n    }\n\n    [VoicePlaybackResult]ProcessNextInstruction() {\n        if ($this.VoiceQueue.Count -gt 0) {\n            $instruction = $this.VoiceQueue.Dequeue()\n            return $this.SpeakInstruction($instruction)\n        }\n        return $null\n    }\n\n    [int]GetQueueLength() {\n        return $this.VoiceQueue.Count\n    }\n}\n\n# Initialize mock voice guide\n$mockVoiceGuide = [MockVoiceGuide]::new($TtsEngine, $VoiceLanguage, $VoiceName, $voiceCachePath)\n\n# Test functions\nfunction Test-VoicePlayback {\n    Write-Host "Testing Voice Playback..." -ForegroundColor Yellow\n\n    $playbackResults = @()\n    $testInstructions = @(\n        "100 metre sonra sağa dönün",\n        "Hedefe 500 metre kaldı",\n        "Trafik yoğunluğu nedeniyle alternatif rota öneriliyor",\n        "Hız limitiniz saatte 50 kilometre",\n        "Varış noktasına ulaştınız",\n        "Yol çalışması nedeniyle yönlendirme değişti",\n        "Şeritte kalın ve hızınızı azaltın",\n        "Bir sonraki kavşakta sola dönün",\n        "Park yeri 200 metre ileride",\n        "Navigasyon sona erdi"\n    )\n\n    foreach ($instruction in $testInstructions) {\n        $result = $mockVoiceGuide.SpeakText($instruction, "Navigation", 3)\n        $playbackResults += $result\n\n        if ($result.Played) {\n            Write-Host "✓ Voice played: $($instruction)" -ForegroundColor Green\n        } else {\n            Write-Host "✗ Voice failed: $($instruction) - $($result.ErrorMessage)" -ForegroundColor Red\n        }\n\n        # Add delay between instructions\n        Start-Sleep -Milliseconds $PlaybackDelayMs\n    }\n\n    return $playbackResults\n}\n\nfunction Test-OfflineMode {\n    Write-Host "Testing Offline Voice Mode..." -ForegroundColor Yellow\n\n    $offlineResults = @()\n\n    # Enable offline mode\n    $mockVoiceGuide.SetOfflineMode($true)\n\n    $offlineInstructions = @(\n        "Offline modda navigasyon aktif",\n        "İnternet bağlantısı kesildi",\n        "Önbellekten sesli yönlendirme kullanılıyor",\n        "Lütfen dikkatli sürün"\n    )\n\n    foreach ($instruction in $offlineInstructions) {\n        $result = $mockVoiceGuide.SpeakText($instruction, "Warning", 5)\n        $offlineResults += $result\n\n        if ($result.Played) {\n            Write-Host "✓ Offline voice played: $($instruction)" -ForegroundColor Green\n            $testConfig.OfflineTestsPassed++\n        } else {\n            Write-Host "✗ Offline voice failed: $($instruction) - $($result.ErrorMessage)" -ForegroundColor Red\n        }\n\n        Start-Sleep -Milliseconds ($PlaybackDelayMs / 2)\n    }\n\n    # Disable offline mode\n    $mockVoiceGuide.SetOfflineMode($false)\n\n    return $offlineResults\n}\n\nfunction Test-VoiceQueue {\n    Write-Host "Testing Voice Queue Management..." -ForegroundColor Yellow\n\n    $queueResults = @()\n\n    # Queue multiple instructions\n    $queueInstructions = @(\n        ([VoiceInstruction]::new("İlk yönlendirme", "Navigation", 1)),\n        ([VoiceInstruction]::new("Önemli uyarı", "Warning", 5)),\n        ([VoiceInstruction]::new("Normal yönlendirme", "Navigation", 3)),\n        ([VoiceInstruction]::new("Onay mesajı", "Confirmation", 2))\n    )\n\n    foreach ($instruction in $queueInstructions) {\n        $mockVoiceGuide.QueueVoiceInstruction($instruction)\n    }\n\n    Write-Host "  Queue length: $($mockVoiceGuide.GetQueueLength())" -ForegroundColor Cyan\n\n    # Process queue\n    while ($mockVoiceGuide.GetQueueLength() -gt 0) {\n        $result = $mockVoiceGuide.ProcessNextInstruction()\n        if ($result) {\n            $queueResults += $result\n            Write-Host "  Processed: $($result.Text)" -ForegroundColor Green\n        }\n    }\n\n    return $queueResults\n}\n\nfunction Test-BadgeTriggers {\n    Write-Host "Testing Badge Triggers..." -ForegroundColor Yellow\n\n    $badgeResults = @()\n\n    # Test Voice-Enabled badge (requires 10 successful voice navigations)\n    if ($testConfig.VoiceFilesPlayed -ge 10) {\n        $badge = @{\n            BadgeName = "Voice-Enabled"\n            TriggerReason = "10 successful voice navigation instructions"\n            TriggerTime = Get-Date\n            Triggered = $true\n            Details = "Successfully played $testConfig.VoiceFilesPlayed voice instructions"\n        }\n        $badgeResults += $badge\n        Write-Host "✓ Voice-Enabled badge triggered!" -ForegroundColor Green\n    }\n\n    return $badgeResults\n}\n\nfunction Test-PerformanceMetrics {\n    Write-Host "Testing Performance Metrics..." -ForegroundColor Yellow\n\n    $metrics = @{\n        TotalInstructions = $VoiceInstructions\n        VoiceFilesGenerated = $testConfig.VoiceFilesGenerated\n        VoiceFilesPlayed = $testConfig.VoiceFilesPlayed\n        CacheHits = $testConfig.CacheHits\n        OfflineTestsPassed = $testConfig.OfflineTestsPassed\n        SuccessRate = [math]::Round(($testConfig.VoiceFilesPlayed / $VoiceInstructions) * 100, 2)\n        CacheHitRate = if (($testConfig.VoiceFilesGenerated + $testConfig.CacheHits) -gt 0) {\n            [math]::Round(($testConfig.CacheHits / ($testConfig.VoiceFilesGenerated + $testConfig.CacheHits)) * 100, 2)\n        } else { 0 }\n        AverageGenerationTime = 0\n        AveragePlaybackDuration = 0\n    }\n\n    # Calculate average times\n    $generationTimes = @()\n    $playbackDurations = @()\n\n    foreach ($result in $mockVoiceGuide.PlaybackHistory.Values) {\n        if ($result.Generated -and $result.GenerationTime) {\n            $generationTimes += (Get-Date) - $result.GenerationTime\n        }\n\n        if ($result.Played -and $result.PlaybackDuration) {\n            $playbackDurations += $result.PlaybackDuration.TotalMilliseconds\n        }\n    }\n\n    if ($generationTimes.Count -gt 0) {\n        $avgGenTime = ($generationTimes | Measure-Object -Average).Average\n        $metrics.AverageGenerationTime = [math]::Round($avgGenTime.TotalMilliseconds, 2)\n    }\n\n    if ($playbackDurations.Count -gt 0) {\n        $metrics.AveragePlaybackDuration = [math]::Round(($playbackDurations | Measure-Object -Average).Average, 2)\n    }\n\n    Write-Host "Performance Metrics:" -ForegroundColor Cyan\n    Write-Host "  Success Rate: $($metrics.SuccessRate)%" -ForegroundColor Yellow\n    Write-Host "  Cache Hit Rate: $($metrics.CacheHitRate)%" -ForegroundColor Yellow\n    Write-Host "  Avg Generation Time: $($metrics.AverageGenerationTime)ms" -ForegroundColor Yellow\n    Write-Host "  Avg Playback Duration: $($metrics.AveragePlaybackDuration)ms" -ForegroundColor Yellow\n\n    return $metrics\n}\n\n# Run tests\n$testResults = @{}\n\nif ($EnableVoicePlayback) {\n    $testResults.PlaybackResults = Test-VoicePlayback\n}\n\nif ($TestOfflineMode) {\n    $testResults.OfflineResults = Test-OfflineMode\n}\n\n$testResults.QueueResults = Test-VoiceQueue\n$testResults.PerformanceMetrics = Test-PerformanceMetrics\n\nif ($EnableBadgeTrigger) {\n    $testResults.BadgeResults = Test-BadgeTriggers\n}\n\n# Generate test report\nif ($GenerateTestReport) {\n    Write-Host ""\n    Write-Host "=== Generating Test Report ===" -ForegroundColor Cyan\n\n    $reportData = @{\n        TestRun = @{\n            StartTime = $testConfig.StartTime\n            EndTime = Get-Date\n            Duration = ((Get-Date) - $testConfig.StartTime).TotalSeconds\n            Environment = $TestEnvironment\n            Configuration = @{\n                VoiceInstructions = $VoiceInstructions\n                TtsEngine = $TtsEngine\n                VoiceLanguage = $VoiceLanguage\n                VoiceName = $VoiceName\n                PlaybackDelayMs = $PlaybackDelayMs\n                CacheVoiceFiles = $CacheVoiceFiles\n                EnableVoicePlayback = $EnableVoicePlayback\n                TestOfflineMode = $TestOfflineMode\n                EnableBadgeTrigger = $EnableBadgeTrigger\n            }\n        }\n        Results = @{\n            TotalInstructions = $VoiceInstructions\n            VoiceFilesGenerated = $testConfig.VoiceFilesGenerated\n            VoiceFilesPlayed = $testConfig.VoiceFilesPlayed\n            CacheHits = $testConfig.CacheHits\n            OfflineTestsPassed = $testConfig.OfflineTestsPassed\n            SuccessRate = [math]::Round(($testConfig.VoiceFilesPlayed / $VoiceInstructions) * 100, 2)\n            BadgeTriggers = $testResults.BadgeResults | ForEach-Object {\n                @{\n                    BadgeName = $_.BadgeName\n                    Triggered = $_.Triggered\n                    Reason = $_.TriggerReason\n                    Details = $_.Details\n                }\n            }\n        }\n        DetailedResults = @{\n            PlaybackResults = $testResults.PlaybackResults | ForEach-Object {\n                @{\n                    InstructionId = $_.InstructionId\n                    Text = $_.Text\n                    Generated = $_.Generated\n                    Played = $_.Played\n                    Cached = $_.Cached\n                    GenerationTime = $_.GenerationTime\n                    PlaybackTime = $_.PlaybackTime\n                    PlaybackDuration = $_.PlaybackDuration.ToString()\n                    CacheFilePath = $_.CacheFilePath\n                    ErrorMessage = $_.ErrorMessage\n                }\n            }\n            OfflineResults = $testResults.OfflineResults | ForEach-Object {\n                @{\n                    InstructionId = $_.InstructionId\n                    Text = $_.Text\n                    Generated = $_.Generated\n                    Played = $_.Played\n                    Cached = $_.Cached\n                    ErrorMessage = $_.ErrorMessage\n                }\n            }\n            PerformanceMetrics = $testResults.PerformanceMetrics\n        }\n    }\n\n    $reportPath = Join-Path $testOutputPath "voice-guidance-test-report.json"\n    $reportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $reportPath -Encoding UTF8\n\n    Write-Host "Test report generated: $reportPath" -ForegroundColor Green\n}\n\n# Summary\nWrite-Host ""\nWrite-Host "=== Voice Guidance Test Summary ===" -ForegroundColor Cyan\nWrite-Host "Total Instructions: $($VoiceInstructions)" -ForegroundColor White\nWrite-Host "Voice Files Generated: $($testConfig.VoiceFilesGenerated)" -ForegroundColor Cyan\nWrite-Host "Voice Files Played: $($testConfig.VoiceFilesPlayed)" -ForegroundColor Green\nWrite-Host "Cache Hits: $($testConfig.CacheHits)" -ForegroundColor Yellow\nWrite-Host "Offline Tests Passed: $($testConfig.OfflineTestsPassed)" -ForegroundColor Magenta\nWrite-Host "Success Rate: $([math]::Round(($testConfig.VoiceFilesPlayed / $VoiceInstructions) * 100, 2))%" -ForegroundColor Yellow\n\nif ($testResults.BadgeResults) {\n    Write-Host "Badge Triggers: $($testResults.BadgeResults.Count)" -ForegroundColor Magenta\n    foreach ($badge in $testResults.BadgeResults) {\n        if ($badge.Triggered) {\n            Write-Host "  ✓ $($badge.BadgeName): $($badge.Details)" -ForegroundColor Green\n        }\n    }\n}\n\nWrite-Host ""\nWrite-Host "=== Voice Guidance Test Completed ===" -ForegroundColor Cyan\n\n# Return test results for CI/CD integration\nreturn @{\n    Success = $testConfig.VoiceFilesPlayed -ge ($VoiceInstructions * 0.8)  # 80% success rate required\n    TotalInstructions = $VoiceInstructions\n    VoiceFilesGenerated = $testConfig.VoiceFilesGenerated\n    VoiceFilesPlayed = $testConfig.VoiceFilesPlayed\n    SuccessRate = [math]::Round(($testConfig.VoiceFilesPlayed / $VoiceInstructions) * 100, 2)\n    CacheHits = $testConfig.CacheHits\n    OfflineTestsPassed = $testConfig.OfflineTestsPassed\n    BadgeTriggers = $testResults.BadgeResults.Count\n    TestDuration = ((Get-Date) - $testConfig.StartTime).TotalSeconds\n}\n