# Test-IncidentLogging.ps1 - Realtime incident logging test scripti\n# CI/CD pipeline ile entegre edilmiş olay loglama test sistemi\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$LogPath = "logs\incidents",\n    [int]$TestDurationMinutes = 5,\n    [int]$IncidentCount = 50\n)\n\n# Script ayarları\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonuçları için değişkenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n    IncidentStats = @{\n        LoggedIncidents = 0\n        CriticalCount = 0\n        ErrorCount = 0\n        WarningCount = 0\n        InfoCount = 0\n    }\n}\n\n# Environment değişkenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:INCIDENT_LOG_PATH = $LogPath\n$env:ENABLE_REALTIME_LOGGING = "true"\n$env:MAX_LOG_FILE_SIZE_MB = "10"\n$env:LOG_RETENTION_DAYS = "7"\n\n# Renkli output için\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Başlık\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      🚨 Incident Logging Test Sistemi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadı: $ProjectPath" "Red"\n    exit 1\n}\n\n# Test fonksiyonları\nfunction Test-IncidentLogging {\n    param(\n        [string]$TestName,\n        [scriptblock]$TestScript\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n\n    Write-ColorOutput "🧪 $TestName testi başlatılıyor..." "White"\n\n    try {\n        & $TestScript\n        $testPassed = $true\n        Write-ColorOutput "  ✅ $TestName testi başarılı" "Green"\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  ❌ $TestName testi başarısız: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = $TestName\n            Passed = $testPassed\n            Duration = $duration\n            ErrorMessage = $errorMessage\n        }\n    }\n}\n\n# Log klasörü oluşturma testi\nfunction Test-LogDirectoryCreation {\n    Write-ColorOutput "  📁 Log klasörü oluşturma kontrol ediliyor..." "Gray"\n\n    $fullLogPath = Join-Path $ProjectPath $LogPath\n\n    if (!(Test-Path $fullLogPath)) {\n        Write-ColorOutput "    📂 Log klasörü oluşturuluyor: $fullLogPath" "Gray"\n        New-Item -ItemType Directory -Path $fullLogPath -Force | Out-Null\n    } else {\n        Write-ColorOutput "    ✅ Log klasörü mevcut: $fullLogPath" "Green"\n    }\n\n    # Test log dosyası oluştur\n    $testFile = Join-Path $fullLogPath "test-log.json"\n    $testData = @{\n        test = "Incident logging test"\n        timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n    }\n    $testData | ConvertTo-Json | Set-Content $testFile\n\n    if (Test-Path $testFile) {\n        Write-ColorOutput "    ✅ Test log dosyası oluşturuldu" "Green"\n        Remove-Item $testFile -Force\n    } else {\n        Write-ColorOutput "    ❌ Test log dosyası oluşturulamadı" "Red"\n        throw "Log directory creation failed"\n    }\n}\n\n# Farklı seviye olay loglama testi\nfunction Test-IncidentLevelLogging {\n    Write-ColorOutput "  📊 Farklı seviye olay loglama test ediliyor..." "Gray"\n\n    $fullLogPath = Join-Path $ProjectPath $LogPath\n    $testFile = Join-Path $fullLogPath "test-incidents.json"\n\n    # Test olayları\n    $testIncidents = @(\n        @{\n            Level = "Critical"\n            Message = "Critical system failure detected"\n            Category = "System"\n        },\n        @{\n            Level = "Error"\n            Message = "Database connection failed"\n            Category = "Database"\n        },\n        @{\n            Level = "Warning"\n            Message = "High memory usage detected"\n            Category = "Performance"\n        },\n        @{\n            Level = "Info"\n            Message = "User login successful"\n            Category = "Authentication"\n        }\n    )\n\n    $loggedIncidents = @()\n\n    foreach ($incident in $testIncidents) {\n        $logEntry = @{\n            Id = [Guid]::NewGuid().ToString()\n            Level = $incident.Level\n            Message = $incident.Message\n            Category = $incident.Category\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n            Metadata = @{\n                TestRun = $true\n                Source = "Test-IncidentLogging.ps1"\n            }\n            Source = "KesifUygulamasiTemplate"\n        }\n\n        $loggedIncidents += $logEntry\n\n        # İstatistikleri güncelle\n        switch ($incident.Level) {\n            "Critical" { $testResults.IncidentStats.CriticalCount++ }\n            "Error" { $testResults.IncidentStats.ErrorCount++ }\n            "Warning" { $testResults.IncidentStats.WarningCount++ }\n            "Info" { $testResults.IncidentStats.InfoCount++ }\n        }\n        $testResults.IncidentStats.LoggedIncidents++\n    }\n\n    # JSON dosyasına yaz\n    $loggedIncidents | ConvertTo-Json -Depth 10 | Set-Content $testFile\n\n    Write-ColorOutput "    📝 $($testIncidents.Count) test olayı loglandı" "Gray"\n    Write-ColorOutput "    📊 Critical: $($testResults.IncidentStats.CriticalCount), Error: $($testResults.IncidentStats.ErrorCount), Warning: $($testResults.IncidentStats.WarningCount), Info: $($testResults.IncidentStats.InfoCount)" "Gray"\n\n    if ($testResults.IncidentStats.LoggedIncidents -eq $testIncidents.Count) {\n        Write-ColorOutput "    ✅ Tüm olay seviyeleri başarıyla loglandı" "Green"\n    } else {\n        Write-ColorOutput "    ❌ Olay loglama sayısı uyumsuz" "Red"\n        throw "Incident level logging count mismatch"\n    }\n}\n\n# Log dosya rotasyonu testi\nfunction Test-LogRotation {\n    Write-ColorOutput "  🔄 Log dosya rotasyonu test ediliyor..." "Gray"\n\n    $fullLogPath = Join-Path $ProjectPath $LogPath\n\n    # Büyük log dosyası oluştur (test için)\n    $largeLogFile = Join-Path $fullLogPath "large-test-log.json"\n    $largeContent = @()\n\n    for ($i = 1; $i -le 1000; $i++) {\n        $largeContent += @{\n            Id = [Guid]::NewGuid().ToString()\n            Level = "Info"\n            Message = "Test log entry $i with some additional content to make it larger"\n            Category = "Test"\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n        }\n    }\n\n    $largeContent | ConvertTo-Json -Depth 10 | Set-Content $largeLogFile\n\n    $fileSize = (Get-Item $largeLogFile).Length\n    $fileSizeMB = [math]::Round($fileSize / 1MB, 2)\n\n    Write-ColorOutput "    📄 Büyük test dosyası oluşturuldu: $fileSizeMB MB" "Gray"\n\n    # Dosya boyutu kontrolü\n    $maxSizeMB = [int]$env:MAX_LOG_FILE_SIZE_MB\n    if ($fileSizeMB -gt $maxSizeMB) {\n        Write-ColorOutput "    ✅ Dosya boyutu rotasyon eşiğini aştı ($maxSizeMB MB)" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  Dosya boyutu rotasyon eşiğinin altında" "Yellow"\n    }\n\n    # Temizlik\n    Remove-Item $largeLogFile -Force\n}\n\n# Log temizleme testi\nfunction Test-LogCleanup {\n    Write-ColorOutput "  🧹 Log temizleme testi başlatılıyor..." "Gray"\n\n    $fullLogPath = Join-Path $ProjectPath $LogPath\n\n    # Eski test dosyaları oluştur\n    $oldDate = (Get-Date).AddDays(-($env:LOG_RETENTION_DAYS + 1))\n    $oldFileName = "incident-$($oldDate.ToString('yyyy-MM-dd'))-test.json"\n    $oldFilePath = Join-Path $fullLogPath $oldFileName\n\n    @{ test = "old file" } | ConvertTo-Json | Set-Content $oldFilePath\n    (Get-Item $oldFilePath).CreationTime = $oldDate\n\n    Write-ColorOutput "    📅 Eski test dosyası oluşturuldu: $oldFileName" "Gray"\n\n    # Yeni dosya oluştur\n    $newFileName = "incident-$((Get-Date).ToString('yyyy-MM-dd'))-test.json"\n    $newFilePath = Join-Path $fullLogPath $newFileName\n    @{ test = "new file" } | ConvertTo-Json | Set-Content $newFilePath\n\n    Write-ColorOutput "    📅 Yeni test dosyası oluşturuldu: $newFileName" "Gray"\n\n    # Eski dosyaların temizlenmesi simülasyonu\n    $retentionDays = [int]$env:LOG_RETENTION_DAYS\n    $cutoffDate = (Get-Date).AddDays(-$retentionDays)\n\n    $oldFiles = Get-ChildItem $fullLogPath -Filter "incident-*.json" |\n        Where-Object { $_.CreationTime -lt $cutoffDate }\n\n    Write-ColorOutput "    🗑️  Temizlenecek eski dosyalar: $($oldFiles.Count)" "Gray"\n\n    foreach ($file in $oldFiles) {\n        Remove-Item $file.FullName -Force\n        Write-ColorOutput "    ✅ Eski dosya silindi: $($file.Name)" "Green"\n    }\n\n    # Temizlik sonrası kontrol\n    $remainingFiles = Get-ChildItem $fullLogPath -Filter "incident-*.json"\n    Write-ColorOutput "    📊 Kalan dosya sayısı: $($remainingFiles.Count)" "Gray"\n}\n\n# Performans testi\nfunction Test-IncidentLoggingPerformance {\n    Write-ColorOutput "  ⚡ Incident logging performans testi başlatılıyor..." "Gray"\n\n    $fullLogPath = Join-Path $ProjectPath $LogPath\n    $perfTestFile = Join-Path $fullLogPath "performance-test.json"\n\n    $startTime = Get-Date\n    $testIncidents = @()\n\n    # Çok sayıda olay oluştur\n    for ($i = 1; $i -le $IncidentCount; $i++) {\n        $testIncidents += @{\n            Id = [Guid]::NewGuid().ToString()\n            Level = "Info"\n            Message = "Performance test incident $i"\n            Category = "Performance"\n            Timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            Environment = $TestEnvironment\n            Metadata = @{\n                TestNumber = $i\n                PerformanceTest = $true\n            }\n        }\n    }\n\n    $testIncidents | ConvertTo-Json -Depth 10 | Set-Content $perfTestFile\n\n    $endTime = Get-Date\n    $duration = $endTime - $startTime\n    $avgTimePerIncident = $duration.TotalMilliseconds / $IncidentCount\n\n    Write-ColorOutput "    📈 $IncidentCount olay loglandı" "Gray"\n    Write-ColorOutput "    ⏱️  Toplam süre: $([math]::Round($duration.TotalSeconds, 2)) saniye" "Gray"\n    Write-ColorOutput "    📊 Olay başına ortalama süre: $([math]::Round($avgTimePerIncident, 2)) ms" "Gray"\n\n    if ($avgTimePerIncident -lt 10) { # 10ms'den az\n        Write-ColorOutput "    ✅ Performans kabul edilebilir" "Green"\n    } else {\n        Write-ColorOutput "    ⚠️  Performans iyileştirilebilir" "Yellow"\n    }\n\n    # Temizlik\n    Remove-Item $perfTestFile -Force\n}\n\n# Ana test döngüsü\nWrite-ColorOutput "🚀 Incident logging testleri başlatılıyor..." "White"\nWrite-ColorOutput ""\n\n# Testleri çalıştır\nTest-IncidentLogging -TestName "Log Klasörü Oluşturma" -TestScript { Test-LogDirectoryCreation }\nTest-IncidentLogging -TestName "Farklı Seviye Olay Loglama" -TestScript { Test-IncidentLevelLogging }\nTest-IncidentLogging -TestName "Log Dosya Rotasyonu" -TestScript { Test-LogRotation }\nTest-IncidentLogging -TestName "Log Temizleme" -TestScript { Test-LogCleanup }\nTest-IncidentLogging -TestName "Performans Testi" -TestScript { Test-IncidentLoggingPerformance }\n\n# Test özeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           📊 Test Sonuçları" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Başarılı: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Başarısız: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Başarı Oranı: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam Süre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Incident istatistikleri\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "        🚨 Incident İstatistikleri" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\nWrite-ColorOutput "Loglanan Toplam Olay: $($testResults.IncidentStats.LoggedIncidents)" "White"\nWrite-ColorOutput "Critical: $($testResults.IncidentStats.CriticalCount)" "Red"\nWrite-ColorOutput "Error: $($testResults.IncidentStats.ErrorCount)" "Red"\nWrite-ColorOutput "Warning: $($testResults.IncidentStats.WarningCount)" "Yellow"\nWrite-ColorOutput "Info: $($testResults.IncidentStats.InfoCount)" "Green"\n\n# Detaylı sonuçlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylı Sonuçlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "✅" } else { "❌" }\n        Write-ColorOutput "  $status $($detail.TestName)" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "incident-logging-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            log_path = $LogPath\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n            incident_count = $IncidentCount\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n        }\n        incident_stats = $testResults.IncidentStats\n        details = $testResults.Details\n        recommendations = @(\n            "Log rotasyonunu etkinleştir",\n            "Eski log dosyalarını düzenli temizle",\n            "Performans monitoring'i aktif tut",\n            "Critical olaylar için alert sistemi kur",\n            "Log analizi dashboard'u oluştur"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "📄 Test sonuçları JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "Incident-Tracked"\n}\n\n# Final sonuç\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "🎉 Incident logging testleri başarılı! Sistem hazır." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "💥 Bazı incident logging testleri başarısız oldu." "Red"\n    exit 1\n}\n\n# Badge gösterme fonksiyonu\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "🏅 Badge kazanıldı: $BadgeName" "Cyan"\n\n    # Badge dosyasını güncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -notcontains $BadgeName) {\n                $badgeData | Add-Member -MemberType NoteProperty -Name $BadgeName -Value $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            } else {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ✅ Badge dosyası güncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ⚠️  Badge dosyası güncellenemedi" "Yellow"\n        }\n    } else {\n        # Yeni badge dosyası oluştur\n        $newBadgeData = @{\n            $BadgeName = $true\n        }\n        $newBadgeData | ConvertTo-Json | Set-Content $badgeFile\n        Write-ColorOutput "  ✅ Yeni badge dosyası oluşturuldu" "Green"\n    }\n}\n