# Clean .resx backup files and ensure minimal valid .resx format\n# Usage: pwsh -NoProfile -ExecutionPolicy Bypass -File .\scripts\clean-resx.ps1\nSet-PSDebug -Strict -ErrorAction Stop\n$root = Resolve-Path "$(Join-Path (Get-Location) '.')"\n$deleted = @()\n$fixed = @()\n$modifiedCsproj = @()\n\nWrite-Output "Root: $root"\n\n# 1) Delete empty .resx files (0 bytes)\n$emptyResx = Get-ChildItem -Path $root -Recurse -Filter *.resx -ErrorAction SilentlyContinue | Where-Object { $_.Length -eq 0 }\nforeach ($f in $emptyResx) {\n    Try {\n        Remove-Item -LiteralPath $f.FullName -Force -ErrorAction Stop\n        $deleted += $f.FullName\n        Write-Output "Deleted empty resx: $($f.FullName)"\n    } Catch {\n        Write-Warning "Failed to delete $($f.FullName): $_"\n    }\n}\n\n# 2) Ensure remaining AppResources.*.resx files are valid XML and contain <root>\n$resxFiles = Get-ChildItem -Path $root -Recurse -Filter "AppResources*.resx" -ErrorAction SilentlyContinue\nforeach ($resx in $resxFiles) {\n    $isValid = $true\n    Try {\n        $xml = [xml](Get-Content -LiteralPath $resx.FullName -ErrorAction Stop -Raw)\n        if (-not $xml.root) { $isValid = $false }\n    } Catch {\n        $isValid = $false\n    }\n    if (-not $isValid) {\n        # backup and write minimal template\n        $bak = $resx.FullName + ".bak"\n        Try {\n            Copy-Item -LiteralPath $resx.FullName -Destination $bak -Force -ErrorAction SilentlyContinue\n        } Catch { }\n        $template = @"\n<?xml version="1.0" encoding="utf-8"?>\n<root>\n  <resheader name="resmimetype">\n    <value>text/microsoft-resx</value>\n  </resheader>\n  <resheader name="version">\n    <value>2.0</value>\n  </resheader>\n  <resheader name="reader">\n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n  <resheader name="writer">\n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n</root>\n"@\n        Try {\n            Set-Content -LiteralPath $resx.FullName -Value $template -Encoding utf8 -Force -ErrorAction Stop\n            $fixed += $resx.FullName\n            Write-Output "Replaced invalid resx with minimal template: $($resx.FullName) (backup: $bak)"\n        } Catch {\n            Write-Warning "Failed to replace $($resx.FullName): $_"\n        }\n    }\n}\n\n# 3) Remove EmbeddedResource nodes in csproj that reference missing files\n$csprojs = Get-ChildItem -Path $root -Recurse -Filter *.csproj -ErrorAction SilentlyContinue\nforeach ($proj in $csprojs) {\n    $projChanged = $false\n    Try {\n        [xml]$xml = Get-Content -LiteralPath $proj.FullName -ErrorAction Stop\n    } Catch {\n        Write-Warning "Failed to load csproj $($proj.FullName): $_"\n        continue\n    }\n    # Find EmbeddedResource nodes\n    $namespaceManager = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)\n    $nodes = $xml.SelectNodes('//EmbeddedResource')\n    foreach ($n in $nodes) {\n        $attr = $n.GetAttribute('Include')\n        if (-not $attr) { $attr = $n.GetAttribute('Remove') }\n        if ($attr) {\n            $candidate = Resolve-Path -Path (Join-Path (Split-Path $proj.FullName) $attr) -ErrorAction SilentlyContinue\n            if (-not $candidate) {\n                # remove node\n                $parent = $n.ParentNode\n                $parent.RemoveChild($n) | Out-Null\n                $projChanged = $true\n                Write-Output "Removed EmbeddedResource reference to missing file in $($proj.FullName): $attr"\n            }\n        }\n    }\n    if ($projChanged) {\n        Try {\n            $xml.Save($proj.FullName)\n            $modifiedCsproj += $proj.FullName\n        } Catch {\n            Write-Warning "Failed to save modified csproj $($proj.FullName): $_"\n        }\n    }\n}\n\n# Summary\nWrite-Output "\nSummary:"\nWrite-Output "Deleted empty resx files: $($deleted.Count)"\n$deleted | ForEach-Object { Write-Output "  $_" }\nWrite-Output "Fixed invalid AppResources resx files: $($fixed.Count)"\n$fixed | ForEach-Object { Write-Output "  $_" }\nWrite-Output "Modified csproj files: $($modifiedCsproj.Count)"\n$modifiedCsproj | ForEach-Object { Write-Output "  $_" }\n\nif (($deleted.Count -eq 0) -and ($fixed.Count -eq 0) -and ($modifiedCsproj.Count -eq 0)) {\n    Write-Output "Nothing to do."\n} else {\n    Write-Output "Cleanup completed."\n}\n