# Test-Accessibility.ps1\n# Accessibility compliance testing script for CI/CD pipeline\n# Tests WCAG 2.1 compliance and generates reports\n\nparam(\n    [string]$ProjectPath = $PSScriptRoot,\n    [string]$OutputPath = "test-results",\n    [string]$BadgePath = "badges",\n    [switch]$EnableDetailedReporting = $true,\n    [int]$MaxIssuesPerFile = 50,\n    [double]$ComplianceThreshold = 85.0,\n    [switch]$FailOnCriticalIssues = $true,\n    [switch]$GenerateHtmlReport = $true\n)\n\n# Environment variables for CI/CD\n$env:ACCESSIBILITY_REPORTS_PATH = if ($env:ACCESSIBILITY_REPORTS_PATH) { $env:ACCESSIBILITY_REPORTS_PATH } else { "$OutputPath/accessibility" }\n$env:ENABLE_DETAILED_ACCESSIBILITY_REPORTING = $EnableDetailedReporting.ToString().ToLower()\n$env:MAX_ACCESSIBILITY_ISSUES_PER_FILE = $MaxIssuesPerFile.ToString()\n\n# Test configuration\n$testConfig = @{\n    ProjectPath = $ProjectPath\n    OutputPath = $OutputPath\n    BadgePath = $BadgePath\n    ComplianceThreshold = $ComplianceThreshold\n    FailOnCriticalIssues = $FailOnCriticalIssues\n    GenerateHtmlReport = $GenerateHtmlReport\n    TestStartTime = Get-Date\n    TestResults = @()\n    BadgeResults = @()\n}\n\n# Create output directories\nNew-Item -ItemType Directory -Force -Path $testConfig.OutputPath | Out-Null\nNew-Item -ItemType Directory -Force -Path $testConfig.BadgePath | Out-Null\nNew-Item -ItemType Directory -Force -Path $env:ACCESSIBILITY_REPORTS_PATH | Out-Null\n\nWrite-Host "=== Accessibility Compliance Test Started ===" -ForegroundColor Cyan\nWrite-Host "Project Path: $ProjectPath" -ForegroundColor Gray\nWrite-Host "Output Path: $OutputPath" -ForegroundColor Gray\nWrite-Host "Compliance Threshold: $ComplianceThreshold%" -ForegroundColor Gray\nWrite-Host "Fail on Critical Issues: $FailOnCriticalIssues" -ForegroundColor Gray\nWrite-Host ""\n\n# Test functions\nfunction Test-AccessibilityScanner {\n    param([string]$TestName, [scriptblock]$TestBlock)\n\n    Write-Host "Running test: $TestName..." -ForegroundColor Yellow\n\n    try {\n        $result = & $TestBlock\n        $testConfig.TestResults += @{\n            TestName = $TestName\n            Status = "PASSED"\n            Duration = (Get-Date) - $testConfig.TestStartTime\n            Details = $result\n        }\n        Write-Host "‚úì $TestName PASSED" -ForegroundColor Green\n        return $true\n    }\n    catch {\n        $testConfig.TestResults += @{\n            TestName = $TestName\n            Status = "FAILED"\n            Duration = (Get-Date) - $testConfig.TestStartTime\n            Error = $_.Exception.Message\n        }\n        Write-Host "‚úó $TestName FAILED: $($_.Exception.Message)" -ForegroundColor Red\n        return $false\n    }\n}\n\nfunction New-TestHtmlFile {\n    param([string]$FileName, [string]$Content)\n\n    $htmlPath = Join-Path $testConfig.OutputPath "test-html"\n    New-Item -ItemType Directory -Force -Path $htmlPath | Out-Null\n\n    $fullPath = Join-Path $htmlPath $FileName\n    $Content | Out-File -FilePath $fullPath -Encoding UTF8\n\n    return $fullPath\n}\n\nfunction New-AccessibilityBadge {\n    param([string]$BadgeName, [string]$Description, [bool]$Achieved)\n\n    $badge = @{\n        name = $BadgeName\n        description = $Description\n        achieved = $Achieved\n        timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"\n        criteria = @{\n            compliance_threshold = $ComplianceThreshold\n            critical_issues_allowed = -not $FailOnCriticalIssues\n            detailed_reporting = $EnableDetailedReporting\n        }\n    }\n\n    $badgePath = Join-Path $testConfig.BadgePath "$BadgeName.json"\n    $badge | ConvertTo-Json -Depth 10 | Out-File -FilePath $badgePath -Encoding UTF8\n\n    $testConfig.BadgeResults += $badge\n\n    if ($Achieved) {\n        Write-Host "üèÜ Badge earned: $BadgeName" -ForegroundColor Magenta\n    }\n}\n\n# Test 1: Basic HTML accessibility check\nTest-AccessibilityScanner "Basic HTML Accessibility Check" {\n    # Create test HTML files\n    $goodHtml = @"\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <title>Accessible Page</title>\n</head>\n<body>\n    <h1>Main Heading</h1>\n    <h2>Sub Heading</h2>\n    <img src="test.jpg" alt="Test image description">\n    <a href="#section1">Read more about accessibility</a>\n    <label for="name">Name:</label>\n    <input type="text" id="name" required>\n</body>\n</html>\n"@\n\n    $badHtml = @"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Bad Page</title>\n</head>\n<body>\n    <h3>Skipped heading level</h3>\n    <img src="test.jpg">\n    <a href="#section1">click here</a>\n    <input type="text" required>\n</body>\n</html>\n"@\n\n    $goodFile = New-TestHtmlFile "good-accessibility.html" $goodHtml\n    $badFile = New-TestHtmlFile "bad-accessibility.html" $badHtml\n\n    # Test files exist\n    if (!(Test-Path $goodFile) -or !(Test-Path $badFile)) {\n        throw "Test HTML files were not created successfully"\n    }\n\n    return @{\n        GoodFile = $goodFile\n        BadFile = $badFile\n        GoodHtmlSize = $goodHtml.Length\n        BadHtmlSize = $badHtml.Length\n    }\n}\n\n# Test 2: Image alt text validation\nTest-AccessibilityScanner "Image Alt Text Validation" {\n    $htmlWithImages = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Image Test</title></head>\n<body>\n    <h1>Image Accessibility Test</h1>\n    <img src="logo.png" alt="Company logo">\n    <img src="photo.jpg" alt="">\n    <img src="icon.svg">\n    <img src="banner.png" alt="Welcome banner with company information">\n</body>\n</html>\n"@\n\n    $filePath = New-TestHtmlFile "image-test.html" $htmlWithImages\n\n    # Count images and alt attributes\n    $imgCount = ($htmlWithImages | Select-String -Pattern '<img[^>]*>' -AllMatches).Matches.Count\n    $altCount = ($htmlWithImages | Select-String -Pattern 'alt\s*=\s*["''][^"'']*["'']' -AllMatches).Matches.Count\n    $emptyAltCount = ($htmlWithImages | Select-String -Pattern 'alt\s*=\s*["'']\s*["'']' -AllMatches).Matches.Count\n\n    return @{\n        FilePath = $filePath\n        TotalImages = $imgCount\n        ImagesWithAlt = $altCount\n        ImagesWithEmptyAlt = $emptyAltCount\n        ImagesWithoutAlt = $imgCount - $altCount\n    }\n}\n\n# Test 3: Form accessibility validation\nTest-AccessibilityScanner "Form Accessibility Validation" {\n    $htmlWithForms = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Form Test</title></head>\n<body>\n    <h1>Contact Form</h1>\n    <form>\n        <label for="firstname">First Name:</label>\n        <input type="text" id="firstname" required>\n\n        <label for="email">Email:</label>\n        <input type="email" id="email" required>\n\n        <input type="text" placeholder="No label">\n\n        <label>Label without for attribute</label>\n        <input type="text">\n\n        <textarea id="message"></textarea>\n\n        <select id="country">\n            <option value="">Select country</option>\n        </select>\n    </form>\n</body>\n</html>\n"@\n\n    $filePath = New-TestHtmlFile "form-test.html" $htmlWithForms\n\n    # Analyze form elements\n    $inputs = ($htmlWithForms | Select-String -Pattern '<input[^>]*>' -AllMatches).Matches.Count\n    $labels = ($htmlWithForms | Select-String -Pattern '<label[^>]*>' -AllMatches).Matches.Count\n    $textareas = ($htmlWithForms | Select-String -Pattern '<textarea[^>]*>' -AllMatches).Matches.Count\n    $selects = ($htmlWithForms | Select-String -Pattern '<select[^>]*>' -AllMatches).Matches.Count\n    $requiredFields = ($htmlWithForms | Select-String -Pattern 'required' -AllMatches).Matches.Count\n\n    return @{\n        FilePath = $filePath\n        TotalInputs = $inputs\n        TotalLabels = $labels\n        Textareas = $textareas\n        Selects = $selects\n        RequiredFields = $requiredFields\n        LabelRatio = if ($inputs -gt 0) { [math]::Round($labels / $inputs, 2) } else { 0 }\n    }\n}\n\n# Test 4: Heading hierarchy validation\nTest-AccessibilityScanner "Heading Hierarchy Validation" {\n    $htmlWithHeadings = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Heading Test</title></head>\n<body>\n    <h1>Main Title</h1>\n    <h2>Section 1</h2>\n    <h3>Subsection 1.1</h3>\n    <h3>Subsection 1.2</h3>\n    <h2>Section 2</h2>\n    <h3>Subsection 2.1</h3>\n    <h1>Another Main Title</h1>\n    <h3>Skipped level</h3>\n</body>\n</html>\n"@\n\n    $filePath = New-TestHtmlFile "heading-test.html" $htmlWithHeadings\n\n    # Analyze heading hierarchy\n    $headings = $htmlWithHeadings | Select-String -Pattern '<h([1-6])[^>]*>' -AllMatches\n    $headingLevels = $headings.Matches | ForEach-Object { [int]$_.Groups[1].Value }\n\n    $hierarchyIssues = 0\n    for ($i = 1; $i -lt $headingLevels.Count; $i++) {\n        if ($headingLevels[$i] -gt $headingLevels[$i-1] + 1) {\n            $hierarchyIssues++\n        }\n    }\n\n    return @{\n        FilePath = $filePath\n        TotalHeadings = $headingLevels.Count\n        HeadingLevels = $headingLevels\n        HierarchyIssues = $hierarchyIssues\n        HasH1 = $headingLevels.Contains(1)\n    }\n}\n\n# Test 5: Link accessibility validation\nTest-AccessibilityScanner "Link Accessibility Validation" {\n    $htmlWithLinks = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Link Test</title></head>\n<body>\n    <h1>Link Accessibility Test</h1>\n    <a href="/about">About Us</a>\n    <a href="/contact">Contact Information</a>\n    <a href="/products">View Our Products</a>\n    <a href="#main">click here</a>\n    <a href="/download">here</a>\n    <a href="/more">read more</a>\n    <a href="/link">link</a>\n    <a href="/additional">more</a>\n    <a href="/"></a>\n    <a href="/empty"></a>\n</body>\n</html>\n"@\n\n    $filePath = New-TestHtmlFile "link-test.html" $htmlWithLinks\n\n    # Analyze links\n    $allLinks = ($htmlWithLinks | Select-String -Pattern '<a[^>]*>.*?</a>' -AllMatches).Matches\n    $linksWithText = $allLinks | Where-Object { $_.Value -match '>[^<]' }\n    $genericLinks = $allLinks | Where-Object {\n        $_.Value -match '>(click here|read more|here|link|more)<' -or\n        $_.Value -match '>\s*<'\n    }\n\n    return @{\n        FilePath = $filePath\n        TotalLinks = $allLinks.Count\n        LinksWithText = $linksWithText.Count\n        GenericLinks = $genericLinks.Count\n        EmptyLinks = $allLinks.Count - $linksWithText.Count\n    }\n}\n\n# Test 6: Semantic HTML validation\nTest-AccessibilityScanner "Semantic HTML Validation" {\n    $semanticHtml = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Semantic Test</title></head>\n<body>\n    <header>\n        <h1>Website Header</h1>\n        <nav>\n            <ul>\n                <li><a href="/">Home</a></li>\n                <li><a href="/about">About</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <section>\n            <h2>Main Content</h2>\n            <article>\n                <h3>Article Title</h3>\n                <p>Article content...</p>\n            </article>\n        </section>\n\n        <aside>\n            <h3>Sidebar</h3>\n            <p>Additional information...</p>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2024 Company</p>\n    </footer>\n</body>\n</html>\n"@\n\n    $nonSemanticHtml = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Non-Semantic Test</title></head>\n<body>\n    <div class="header">\n        <h1>Website Header</h1>\n        <div class="nav">\n            <ul>\n                <li><a href="/">Home</a></li>\n                <li><a href="/about">About</a></li>\n            </ul>\n        </div>\n    </div>\n\n    <div class="main">\n        <div class="section">\n            <h2>Main Content</h2>\n            <div class="article">\n                <h3>Article Title</h3>\n                <p>Article content...</p>\n            </div>\n        </div>\n\n        <div class="sidebar">\n            <h3>Sidebar</h3>\n            <p>Additional information...</p>\n        </div>\n    </div>\n\n    <div class="footer">\n        <p>&copy; 2024 Company</p>\n    </div>\n</body>\n</html>\n"@\n\n    $semanticFile = New-TestHtmlFile "semantic-test.html" $semanticHtml\n    $nonSemanticFile = New-TestHtmlFile "non-semantic-test.html" $nonSemanticHtml\n\n    # Analyze semantic elements\n    $semanticElements = @('header', 'nav', 'main', 'section', 'article', 'aside', 'footer')\n    $semanticCount = 0\n    $nonSemanticCount = 0\n\n    foreach ($element in $semanticElements) {\n        if ($semanticHtml -match "<$element[^>]*>") { $semanticCount++ }\n        if ($nonSemanticHtml -match "<$element[^>]*>") { $nonSemanticCount++ }\n    }\n\n    return @{\n        SemanticFile = $semanticFile\n        NonSemanticFile = $nonSemanticFile\n        SemanticElementsUsed = $semanticCount\n        NonSemanticElementsUsed = $nonSemanticCount\n        SemanticAdvantage = $semanticCount - $nonSemanticCount\n    }\n}\n\n# Test 7: Media accessibility validation\nTest-AccessibilityScanner "Media Accessibility Validation" {\n    $htmlWithMedia = @"\n<!DOCTYPE html>\n<html lang="en">\n<head><title>Media Test</title></head>\n<body>\n    <h1>Media Accessibility Test</h1>\n\n    <video controls>\n        <source src="video.mp4" type="video/mp4">\n        <track kind="captions" src="captions.vtt" srclang="en" label="English">\n        Your browser does not support the video tag.\n    </video>\n\n    <video controls>\n        <source src="video2.mp4" type="video/mp4">\n        Your browser does not support the video tag.\n    </video>\n\n    <audio controls>\n        <source src="audio.mp3" type="audio/mpeg">\n        <track kind="captions" src="audio-captions.vtt" srclang="en">\n        Your browser does not support the audio tag.\n    </audio>\n\n    <audio controls>\n        <source src="audio2.mp3" type="audio/mpeg">\n        Your browser does not support the audio tag.\n    </audio>\n</body>\n</html>\n"@\n\n    $filePath = New-TestHtmlFile "media-test.html" $htmlWithMedia\n\n    # Analyze media elements\n    $videos = ($htmlWithMedia | Select-String -Pattern '<video[^>]*>' -AllMatches).Matches.Count\n    $audios = ($htmlWithMedia | Select-String -Pattern '<audio[^>]*>' -AllMatches).Matches.Count\n    $tracks = ($htmlWithMedia | Select-String -Pattern '<track[^>]*>' -AllMatches).Matches.Count\n\n    return @{\n        FilePath = $filePath\n        TotalVideos = $videos\n        TotalAudios = $audios\n        TotalTracks = $tracks\n        VideosWithCaptions = ($htmlWithMedia | Select-String -Pattern '<video[^>]*>.*?<track' -AllMatches).Matches.Count\n        AudiosWithCaptions = ($htmlWithMedia | Select-String -Pattern '<audio[^>]*>.*?<track' -AllMatches).Matches.Count\n    }\n}\n\n# Test 8: Performance and compliance metrics\nTest-AccessibilityScanner "Performance and Compliance Metrics" {\n    $testFiles = Get-ChildItem -Path (Join-Path $testConfig.OutputPath "test-html") -Filter "*.html"\n\n    $metrics = @{\n        TotalTestFiles = $testFiles.Count\n        TotalFileSize = ($testFiles | Measure-Object -Property Length -Sum).Sum\n        AverageFileSize = 0\n        ComplianceEstimates = @()\n    }\n\n    if ($testFiles.Count -gt 0) {\n        $metrics.AverageFileSize = [math]::Round($metrics.TotalFileSize / $testFiles.Count, 2)\n    }\n\n    # Estimate compliance based on test patterns\n    foreach ($file in $testFiles) {\n        $content = Get-Content $file.FullName -Raw\n\n        $complianceFactors = @{\n            HasLang = $content -match 'lang\s*=\s*["''][^"'']*["'']'\n            HasH1 = $content -match '<h1[^>]*>'\n            HasAltText = $content -match 'alt\s*=\s*["''][^"'']*["'']'\n            HasLabels = $content -match '<label[^>]*>'\n            AvoidsGenericLinks = -not ($content -match '>(click here|read more|here)<')\n        }\n\n        $complianceScore = ($complianceFactors.Values | Where-Object { $_ } | Measure-Object).Count / $complianceFactors.Count * 100\n\n        $metrics.ComplianceEstimates += @{\n            FileName = $file.Name\n            EstimatedScore = [math]::Round($complianceScore, 1)\n            Factors = $complianceFactors\n        }\n    }\n\n    return $metrics\n}\n\n# Generate badges based on test results\nWrite-Host ""\nWrite-Host "=== Generating Accessibility Badges ===" -ForegroundColor Cyan\n\n# Badge 1: Basic Accessibility\n$basicTestsPassed = ($testConfig.TestResults | Where-Object { $_.Status -eq "PASSED" }).Count\n$basicBadgeAchieved = $basicTestsPassed -ge 4\nNew-AccessibilityBadge "Accessibility-Basic" "Completed basic accessibility tests" $basicBadgeAchieved\n\n# Badge 2: Form Accessibility\n$formTest = $testConfig.TestResults | Where-Object { $_.TestName -eq "Form Accessibility Validation" }\n$formBadgeAchieved = $formTest -and $formTest.Status -eq "PASSED" -and $formTest.Details.LabelRatio -ge 0.8\nNew-AccessibilityBadge "Accessibility-Forms" "Form elements properly labeled" $formBadgeAchieved\n\n# Badge 3: Image Accessibility\n$imageTest = $testConfig.TestResults | Where-Object { $_.TestName -eq "Image Alt Text Validation" }\n$imageBadgeAchieved = $imageTest -and $imageTest.Status -eq "PASSED" -and $imageTest.Details.ImagesWithoutAlt -eq 0\nNew-AccessibilityBadge "Accessibility-Images" "All images have alt text" $imageBadgeAchieved\n\n# Badge 4: Semantic HTML\n$semanticTest = $testConfig.TestResults | Where-Object { $_.TestName -eq "Semantic HTML Validation" }\n$semanticBadgeAchieved = $semanticTest -and $semanticTest.Status -eq "PASSED" -and $semanticTest.Details.SemanticElementsUsed -ge 5\nNew-AccessibilityBadge "Accessibility-Semantic" "Uses semantic HTML elements" $semanticBadgeAchieved\n\n# Badge 5: Media Accessibility\n$mediaTest = $testConfig.TestResults | Where-Object { $_.TestName -eq "Media Accessibility Validation" }\n$mediaBadgeAchieved = $mediaTest -and $mediaTest.Status -eq "PASSED" -and $mediaTest.Details.VideosWithCaptions -ge 1\nNew-AccessibilityBadge "Accessibility-Media" "Media elements have accessibility features" $mediaBadgeAchieved\n\n# Badge 6: WCAG Compliance\n$metricsTest = $testConfig.TestResults | Where-Object { $_.TestName -eq "Performance and Compliance Metrics" }\n$wcagBadgeAchieved = $metricsTest -and $metricsTest.Status -eq "PASSED" -and\n    ($metricsTest.Details.ComplianceEstimates | Where-Object { $_.EstimatedScore -ge $ComplianceThreshold }).Count -gt 0\nNew-AccessibilityBadge "Accessibility-WCAG" "Meets WCAG 2.1 compliance standards" $wcagBadgeAchieved\n\n# Generate HTML report\nif ($GenerateHtmlReport) {\n    Write-Host ""\n    Write-Host "=== Generating HTML Report ===" -ForegroundColor Cyan\n\n    $htmlReport = @"\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Accessibility Test Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; margin-bottom: 20px; }\n        .test-result { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }\n        .passed { border-color: #4CAF50; background-color: #f8fff8; }\n        .failed { border-color: #f44336; background-color: #fff8f8; }\n        .badge { display: inline-block; padding: 5px 10px; margin: 5px; border-radius: 15px; font-size: 12px; }\n        .badge.achieved { background: #4CAF50; color: white; }\n        .badge.not-achieved { background: #9E9E9E; color: white; }\n        .metrics { background: #e8f4f8; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        table { border-collapse: collapse; width: 100%; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <div class="header">\n        <h1>Accessibility Compliance Test Report</h1>\n        <p><strong>Generated:</strong> $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>\n        <p><strong>Project:</strong> $ProjectPath</p>\n        <p><strong>Compliance Threshold:</strong> $ComplianceThreshold%</p>\n    </div>\n\n    <h2>Test Results</h2>\n"@\n\n    foreach ($test in $testConfig.TestResults) {\n        $cssClass = if ($test.Status -eq "PASSED") { "passed" } else { "failed" }\n        $htmlReport += @"\n    <div class="test-result $cssClass">\n        <h3>$($test.TestName)</h3>\n        <p><strong>Status:</strong> $($test.Status)</p>\n        <p><strong>Duration:</strong> $($test.Duration.TotalSeconds.ToString("F2")) seconds</p>\n"@\n\n        if ($test.Details) {\n            $htmlReport += "<h4>Details:</h4><pre>$($test.Details | ConvertTo-Json -Depth 3)</pre>"\n        }\n\n        if ($test.Error) {\n            $htmlReport += "<p><strong>Error:</strong> $($test.Error)</p>"\n        }\n\n        $htmlReport += "</div>"\n    }\n\n    $htmlReport += @"\n    <h2>Earned Badges</h2>\n    <div>\n"@\n\n    foreach ($badge in $testConfig.BadgeResults) {\n        $badgeClass = if ($badge.achieved) { "achieved" } else { "not-achieved" }\n        $status = if ($badge.achieved) { "‚úì" } else { "‚úó" }\n        $htmlReport += "<span class='badge $badgeClass'>$status $($badge.name)</span>"\n    }\n\n    $htmlReport += @"\n    </div>\n\n    <h2>Compliance Metrics</h2>\n    <div class="metrics">\n        <table>\n            <tr><th>Metric</th><th>Value</th></tr>\n            <tr><td>Total Tests</td><td>$($testConfig.TestResults.Count)</td></tr>\n            <tr><td>Passed Tests</td><td>$($testConfig.TestResults | Where-Object { $_.Status -eq "PASSED" }).Count)</td></tr>\n            <tr><td>Failed Tests</td><td>$($testConfig.TestResults | Where-Object { $_.Status -eq "FAILED" }).Count)</td></tr>\n            <tr><td>Badges Earned</td><td>$($testConfig.BadgeResults | Where-Object { $_.achieved }).Count)</td></tr>\n        </table>\n    </div>\n</body>\n</html>\n"@\n\n    $htmlReportPath = Join-Path $testConfig.OutputPath "accessibility-test-report.html"\n    $htmlReport | Out-File -FilePath $htmlReportPath -Encoding UTF8\n\n    Write-Host "HTML report generated: $htmlReportPath" -ForegroundColor Green\n}\n\n# Generate JSON summary\n$summaryPath = Join-Path $testConfig.OutputPath "accessibility-test-summary.json"\n$summary = @{\n    TestRun = @{\n        StartTime = $testConfig.TestStartTime\n        EndTime = Get-Date\n        Duration = ((Get-Date) - $testConfig.TestStartTime).TotalSeconds\n        Configuration = @{\n            ProjectPath = $ProjectPath\n            ComplianceThreshold = $ComplianceThreshold\n            FailOnCriticalIssues = $FailOnCriticalIssues\n            EnableDetailedReporting = $EnableDetailedReporting\n            MaxIssuesPerFile = $MaxIssuesPerFile\n        }\n    }\n    Results = @{\n        TotalTests = $testConfig.TestResults.Count\n        PassedTests = ($testConfig.TestResults | Where-Object { $_.Status -eq "PASSED" }).Count\n        FailedTests = ($testConfig.TestResults | Where-Object { $_.Status -eq "FAILED" }).Count\n        PassRate = if ($testConfig.TestResults.Count -gt 0) {\n            [math]::Round((($testConfig.TestResults | Where-Object { $_.Status -eq "PASSED" }).Count / $testConfig.TestResults.Count) * 100, 2)\n        } else { 0 }\n    }\n    Badges = $testConfig.BadgeResults\n    TestDetails = $testConfig.TestResults\n}\n\n$summary | ConvertTo-Json -Depth 10 | Out-File -FilePath $summaryPath -Encoding UTF8\n\nWrite-Host ""\nWrite-Host "=== Test Summary ===" -ForegroundColor Cyan\nWrite-Host "Total Tests: $($summary.Results.TotalTests)" -ForegroundColor White\nWrite-Host "Passed: $($summary.Results.PassedTests)" -ForegroundColor Green\nWrite-Host "Failed: $($summary.Results.FailedTests)" -ForegroundColor Red\nWrite-Host "Pass Rate: $($summary.Results.PassRate)%" -ForegroundColor Yellow\nWrite-Host "Badges Earned: $(($summary.Badges | Where-Object { $_.achieved }).Count)" -ForegroundColor Magenta\nWrite-Host ""\nWrite-Host "Results saved to: $summaryPath" -ForegroundColor Gray\n\n# Determine exit code\n$exitCode = 0\n$failedTests = $testConfig.TestResults | Where-Object { $_.Status -eq "FAILED" }\nif ($failedTests.Count -gt 0) {\n    $exitCode = 1\n    Write-Host "Some tests failed. Check the detailed results for more information." -ForegroundColor Red\n}\n\nif ($FailOnCriticalIssues) {\n    # Check for critical accessibility issues in test results\n    $criticalIssuesFound = $false\n    foreach ($test in $testConfig.TestResults) {\n        if ($test.Details -and $test.Details.PSObject.Properties.Name -contains "ImagesWithoutAlt" -and $test.Details.ImagesWithoutAlt -gt 0) {\n            $criticalIssuesFound = $true\n            break\n        }\n    }\n\n    if ($criticalIssuesFound) {\n        Write-Host "Critical accessibility issues found. Failing build." -ForegroundColor Red\n        $exitCode = 1\n    }\n}\n\nWrite-Host ""\nWrite-Host "=== Accessibility Test Completed ===" -ForegroundColor Cyan\n\nexit $exitCode\n