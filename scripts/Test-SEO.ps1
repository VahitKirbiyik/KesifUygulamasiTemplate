# Test-SEO.ps1 - CI/CD pipeline ile entegre SEO dosya doƒürulama testi\n# Bu script SEO dosyalarƒ±nƒ±, meta etiketleri ve search engine optimizasyonunu doƒürular\n\nparam(\n    [string]$TestEnvironment = "local",\n    [string]$Configuration = "Debug",\n    [string]$ProjectPath = $PSScriptRoot,\n    [switch]$SkipBuild,\n    [switch]$Verbose,\n    [switch]$ExportJson,\n    [string]$Domain = "https://kesifapp.com"\n)\n\n# Script ayarlarƒ±\n$ErrorActionPreference = "Stop"\n$VerbosePreference = if ($Verbose) { "Continue" } else { "SilentlyContinue" }\n\n# Test sonu√ßlarƒ± i√ßin deƒüi≈ükenler\n$testResults = @{\n    TotalTests = 0\n    PassedTests = 0\n    FailedTests = 0\n    TestDuration = [TimeSpan]::Zero\n    Details = @()\n}\n\n# Renkli output i√ßin\nfunction Write-ColorOutput {\n    param(\n        [string]$Message,\n        [string]$Color = "White"\n    )\n    Write-Host $Message -ForegroundColor $Color\n}\n\n# Ba≈ülƒ±k\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "      üîç SEO Dosya Doƒürulama Testi" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput ""\n\n# Environment deƒüi≈ükenlerini ayarla\n$env:TEST_ENVIRONMENT = $TestEnvironment\n$env:CI = if ($TestEnvironment -eq "ci") { "true" } else { "false" }\n$env:DOMAIN = $Domain\n\nWrite-ColorOutput "Test Environment: $TestEnvironment" "Yellow"\nWrite-ColorOutput "Domain: $Domain" "Yellow"\nWrite-ColorOutput "Project Path: $ProjectPath" "Yellow"\nWrite-ColorOutput ""\n\n# Proje yolunu kontrol et\nif (!(Test-Path $ProjectPath)) {\n    Write-ColorOutput "Hata: Proje yolu bulunamadƒ±: $ProjectPath" "Red"\n    exit 1\n}\n\n# SEO dosyalar listesi\n$seoFiles = @(\n    @{ Path = ".\seo\description.txt"; Name = "SEO Description"; Required = $true; MinLength = 120; MaxLength = 160 },\n    @{ Path = ".\seo\keywords.txt"; Name = "SEO Keywords"; Required = $true; MinCount = 5; MaxCount = 15 },\n    @{ Path = ".\seo\title.txt"; Name = "Page Title"; Required = $true; MinLength = 30; MaxLength = 60 },\n    @{ Path = ".\seo\meta-tags.html"; Name = "Meta Tags HTML"; Required = $false },\n    @{ Path = ".\seo\structured-data.json"; Name = "Structured Data JSON"; Required = $false },\n    @{ Path = ".\seo\robots-meta.html"; Name = "Robots Meta"; Required = $false },\n    @{ Path = ".\seo\canonical-urls.txt"; Name = "Canonical URLs"; Required = $false }\n)\n\n# HTML dosyalar listesi (meta etiket kontrol√º i√ßin)\n$htmlFiles = @(\n    ".\index.html",\n    ".\wwwroot\index.html",\n    ".\Pages\Index.cshtml",\n    ".\Views\Home\Index.cshtml"\n)\n\n# Test fonksiyonlarƒ±\nfunction Test-SEOFile {\n    param(\n        [string]$FilePath,\n        [string]$FileName,\n        [bool]$Required = $true,\n        [int]$MinLength = 0,\n        [int]$MaxLength = 0,\n        [int]$MinCount = 0,\n        [int]$MaxCount = 0\n    )\n\n    $startTime = Get-Date\n    $testPassed = $false\n    $errorMessage = ""\n    $warnings = @()\n\n    Write-ColorOutput "üß™ $FileName dosyasƒ± kontrol ediliyor..." "White"\n\n    try {\n        $fullPath = Join-Path $ProjectPath $FilePath\n\n        if (Test-Path $fullPath) {\n            Write-ColorOutput "  ‚úÖ Dosya bulundu: $FilePath" "Green"\n\n            # Dosya i√ßeriƒüi kontrol√º\n            $content = Get-Content $fullPath -Raw\n            $fileInfo = Get-Item $fullPath\n            $fileSize = $fileInfo.Length\n\n            if ($fileSize -eq 0) {\n                $errorMessage = "Dosya bo≈ü"\n                Write-ColorOutput "  ‚ö†Ô∏è  Dosya bo≈ü: $fileSize bytes" "Yellow"\n                $testPassed = !$Required\n            } else {\n                Write-ColorOutput "  üìÑ Dosya boyutu: $fileSize bytes" "Gray"\n\n                # ƒ∞√ßerik validasyonu\n                $contentValid = Test-SEOContent -Content $content -FileName $FileName -MinLength $MinLength -MaxLength $MaxLength -MinCount $MinCount -MaxCount $MaxCount -Warnings ([ref]$warnings)\n\n                if ($contentValid) {\n                    $testPassed = $true\n                    Write-ColorOutput "  ‚úÖ Dosya i√ßeriƒüi ge√ßerli" "Green"\n                } else {\n                    $errorMessage = "Dosya i√ßeriƒüi validasyon hatasƒ±"\n                    Write-ColorOutput "  ‚ùå Dosya i√ßeriƒüi ge√ßersiz" "Red"\n                }\n\n                # Uyarƒ±larƒ± g√∂ster\n                foreach ($warning in $warnings) {\n                    Write-ColorOutput "  ‚ö†Ô∏è  $warning" "Yellow"\n                }\n            }\n        } else {\n            $errorMessage = "Dosya bulunamadƒ±"\n            if ($Required) {\n                Write-ColorOutput "  ‚ùå Gerekli dosya bulunamadƒ±: $FilePath" "Red"\n            } else {\n                Write-ColorOutput "  ‚ö†Ô∏è  ƒ∞steƒüe baƒülƒ± dosya bulunamadƒ±: $FilePath" "Yellow"\n                $testPassed = $true\n            }\n        }\n\n    } catch {\n        $errorMessage = $_.Exception.Message\n        Write-ColorOutput "  üí• Dosya kontrol hatasƒ±: $errorMessage" "Red"\n    } finally {\n        $endTime = Get-Date\n        $duration = $endTime - $startTime\n\n        $testResults.TotalTests++\n        if ($testPassed) {\n            $testResults.PassedTests++\n        } else {\n            $testResults.FailedTests++\n        }\n        $testResults.TestDuration += $duration\n\n        $testResults.Details += @{\n            TestName = "$FileName SEO Kontrol√º"\n            FilePath = $FilePath\n            Passed = $testPassed\n            Required = $Required\n            Duration = $duration\n            ErrorMessage = $errorMessage\n            Warnings = $warnings\n        }\n    }\n}\n\nfunction Test-SEOContent {\n    param(\n        [string]$Content,\n        [string]$FileName,\n        [int]$MinLength,\n        [int]$MaxLength,\n        [int]$MinCount,\n        [int]$MaxCount,\n        [ref]$Warnings\n    )\n\n    $isValid = $true\n\n    switch -Wildcard ($FileName) {\n        "*Description*" {\n            # Description kontrol√º\n            $length = $Content.Length\n            if ($MinLength -gt 0 -and $length -lt $MinLength) {\n                $Warnings.Value += "Description √ßok kƒ±sa: ${length}/${MinLength} karakter"\n                $isValid = $false\n            }\n            if ($MaxLength -gt 0 -and $length -gt $MaxLength) {\n                $Warnings.Value += "Description √ßok uzun: ${length}/${MaxLength} karakter"\n                $isValid = $false\n            }\n\n            # √ñzel karakter kontrol√º\n            if ($Content -match '[<>]') {\n                $Warnings.Value += "Description'da HTML etiketleri olmamalƒ±"\n            }\n        }\n\n        "*Keywords*" {\n            # Keywords kontrol√º\n            $keywords = $Content -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ }\n            $count = $keywords.Count\n\n            if ($MinCount -gt 0 -and $count -lt $MinCount) {\n                $Warnings.Value += "Yetersiz keyword sayƒ±sƒ±: ${count}/${MinCount}"\n                $isValid = $false\n            }\n            if ($MaxCount -gt 0 -and $count -gt $MaxCount) {\n                $Warnings.Value += "√áok fazla keyword: ${count}/${MaxCount}"\n            }\n\n            # Tekrar eden keyword kontrol√º\n            $duplicates = $keywords | Group-Object | Where-Object { $_.Count -gt 1 }\n            if ($duplicates) {\n                $Warnings.Value += "Tekrar eden keyword'ler: $($duplicates.Name -join ', ')"\n            }\n        }\n\n        "*Title*" {\n            # Title kontrol√º\n            $length = $Content.Length\n            if ($MinLength -gt 0 -and $length -lt $MinLength) {\n                $Warnings.Value += "Title √ßok kƒ±sa: ${length}/${MinLength} karakter"\n                $isValid = $false\n            }\n            if ($MaxLength -gt 0 -and $length -gt $MaxLength) {\n                $Warnings.Value += "Title √ßok uzun: ${length}/${MaxLength} karakter"\n                $isValid = $false\n            }\n        }\n\n        "*Meta Tags*" {\n            # HTML meta tags kontrol√º\n            if ($Content -notmatch '<meta') {\n                $Warnings.Value += "Meta etiketleri bulunamadƒ±"\n            }\n            if ($Content -notmatch 'name="description"') {\n                $Warnings.Value += "Description meta etiketi bulunamadƒ±"\n            }\n            if ($Content -notmatch 'name="keywords"') {\n                $Warnings.Value += "Keywords meta etiketi bulunamadƒ±"\n            }\n        }\n\n        "*Structured Data*" {\n            # JSON-LD structured data kontrol√º\n            try {\n                $jsonData = $Content | ConvertFrom-Json\n                if (-not $jsonData.'@context' -or $jsonData.'@context' -notmatch 'schema.org') {\n                    $Warnings.Value += "Ge√ßersiz schema.org context"\n                }\n                if (-not $jsonData.'@type') {\n                    $Warnings.Value += "Missing @type in structured data"\n                }\n            } catch {\n                $Warnings.Value += "Ge√ßersiz JSON formatƒ±"\n                $isValid = $false\n            }\n        }\n    }\n\n    return $isValid\n}\n\nfunction Test-HTMLMetaTags {\n    param([string]$HtmlFile)\n\n    Write-ColorOutput "üîç HTML meta etiketleri kontrol ediliyor: $HtmlFile" "White"\n\n    try {\n        if (Test-Path $HtmlFile) {\n            $content = Get-Content $HtmlFile -Raw\n\n            $checks = @(\n                @{ Pattern = '<title>'; Name = "Title etiketi"; Required = $true },\n                @{ Pattern = 'name="description"'; Name = "Description meta"; Required = $true },\n                @{ Pattern = 'name="keywords"'; Name = "Keywords meta"; Required = $false },\n                @{ Pattern = 'name="robots"'; Name = "Robots meta"; Required = $false },\n                @{ Pattern = 'property="og:'; Name = "Open Graph meta"; Required = $false },\n                @{ Pattern = 'name="twitter:'; Name = "Twitter Card meta"; Required = $false },\n                @{ Pattern = 'rel="canonical"'; Name = "Canonical URL"; Required = $false }\n            )\n\n            $passedChecks = 0\n            foreach ($check in $checks) {\n                if ($content -match $check.Pattern) {\n                    Write-ColorOutput "  ‚úÖ $($check.Name) bulundu" "Green"\n                    $passedChecks++\n                } elseif ($check.Required) {\n                    Write-ColorOutput "  ‚ùå $($check.Name) bulunamadƒ± (gerekli)" "Red"\n                } else {\n                    Write-ColorOutput "  ‚ö†Ô∏è  $($check.Name) bulunamadƒ± (isteƒüe baƒülƒ±)" "Yellow"\n                }\n            }\n\n            return $passedChecks -ge 2  # En az 2 gerekli etiket\n        } else {\n            Write-ColorOutput "  ‚ö†Ô∏è  HTML dosya bulunamadƒ±: $HtmlFile" "Yellow"\n            return $false\n        }\n    } catch {\n        Write-ColorOutput "  üí• HTML kontrol hatasƒ±: $($_.Exception.Message)" "Red"\n        return $false\n    }\n}\n\nfunction Show-Badge {\n    param([string]$BadgeName)\n\n    Write-ColorOutput "üèÖ Badge kazanƒ±ldƒ±: $BadgeName" "Cyan"\n\n    # Badge dosyasƒ±nƒ± g√ºncelle (varsa)\n    $badgeFile = Join-Path $ProjectPath "badge.json"\n    if (Test-Path $badgeFile) {\n        try {\n            $badgeData = Get-Content $badgeFile -Raw | ConvertFrom-Json\n            if ($badgeData.PSObject.Properties.Name -contains $BadgeName) {\n                $badgeData.$BadgeName = $true\n                $badgeData | ConvertTo-Json | Set-Content $badgeFile\n                Write-ColorOutput "  ‚úÖ Badge dosyasƒ± g√ºncellendi" "Green"\n            }\n        } catch {\n            Write-ColorOutput "  ‚ö†Ô∏è  Badge dosyasƒ± g√ºncellenemedi" "Yellow"\n        }\n    }\n}\n\n# Ana test d√∂ng√ºs√º\nWrite-ColorOutput "üöÄ SEO dosya testleri ba≈ülatƒ±lƒ±yor..." "White"\nWrite-ColorOutput ""\n\n# SEO dosyalar testi\nWrite-ColorOutput "üìÑ SEO Dosyalarƒ±:" "Cyan"\nforeach ($file in $seoFiles) {\n    Test-SEOFile -FilePath $file.Path -FileName $file.Name -Required $file.Required -MinLength $file.MinLength -MaxLength $file.MaxLength -MinCount $file.MinCount -MaxCount $file.MaxCount\n}\n\nWrite-ColorOutput ""\n\n# HTML meta etiketleri testi\nWrite-ColorOutput "üè∑Ô∏è  HTML Meta Etiketleri:" "Cyan"\nforeach ($htmlFile in $htmlFiles) {\n    $fullHtmlPath = Join-Path $ProjectPath $htmlFile\n    if (Test-HTMLMetaTags -HtmlFile $fullHtmlPath) {\n        Write-ColorOutput "‚úÖ $htmlFile meta etiketleri ge√ßerli" "Green"\n    } else {\n        Write-ColorOutput "‚ùå $htmlFile meta etiketleri eksik" "Red"\n    }\n}\n\n# Test √∂zeti\nWrite-ColorOutput "" "White"\nWrite-ColorOutput "=========================================" "Cyan"\nWrite-ColorOutput "           üìä Test Sonu√ßlarƒ±" "Cyan"\nWrite-ColorOutput "=========================================" "Cyan"\n\n$successRate = if ($testResults.TotalTests -gt 0) {\n    [math]::Round(($testResults.PassedTests / $testResults.TotalTests) * 100, 1)\n} else { 0 }\n\nWrite-ColorOutput "Toplam Test: $($testResults.TotalTests)" "White"\nWrite-ColorOutput "Ba≈üarƒ±lƒ±: $($testResults.PassedTests)" "Green"\nWrite-ColorOutput "Ba≈üarƒ±sƒ±z: $($testResults.FailedTests)" "Red"\nWrite-ColorOutput "Ba≈üarƒ± Oranƒ±: $successRate%" "Cyan"\nWrite-ColorOutput "Toplam S√ºre: $($testResults.TestDuration.TotalSeconds) saniye" "White"\n\n# Detaylƒ± sonu√ßlar\nif ($Verbose) {\n    Write-ColorOutput "" "White"\n    Write-ColorOutput "Detaylƒ± Sonu√ßlar:" "Yellow"\n    foreach ($detail in $testResults.Details) {\n        $status = if ($detail.Passed) { "‚úÖ" } else { "‚ùå" }\n        $required = if ($detail.Required) { " (Gerekli)" } else { " (ƒ∞steƒüe baƒülƒ±)" }\n        Write-ColorOutput "  $status $($detail.TestName)$required" "White"\n        if (!$detail.Passed -and $detail.ErrorMessage) {\n            Write-ColorOutput "    Hata: $($detail.ErrorMessage)" "Red"\n        }\n        foreach ($warning in $detail.Warnings) {\n            Write-ColorOutput "    Uyarƒ±: $warning" "Yellow"\n        }\n    }\n}\n\n# JSON export\nif ($ExportJson) {\n    $jsonPath = Join-Path $ProjectPath "seo-test-results.json"\n    $exportData = @{\n        metadata = @{\n            timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")\n            script_version = "1.0.0"\n            test_environment = $TestEnvironment\n            domain = $Domain\n            total_duration_seconds = $testResults.TestDuration.TotalSeconds\n        }\n        summary = @{\n            total_tests = $testResults.TotalTests\n            passed_tests = $testResults.PassedTests\n            failed_tests = $testResults.FailedTests\n            success_rate = $successRate\n            test_duration = $testResults.TestDuration.ToString()\n        }\n        seo_files = @{\n            required = $seoFiles | Where-Object { $_.Required } | ForEach-Object { $_.Name }\n            optional = $seoFiles | Where-Object { !$_.Required } | ForEach-Object { $_.Name }\n        }\n        html_files = $htmlFiles\n        details = $testResults.Details\n        recommendations = @(\n            "SEO description.txt dosyasƒ±nƒ± olu≈üturun (120-160 karakter)",\n            "SEO keywords.txt dosyasƒ±nƒ± olu≈üturun (5-15 keyword)",\n            "HTML sayfalarƒ±na meta etiketleri ekleyin",\n            "Structured data JSON-LD ekleyin",\n            "Canonical URL'leri tanƒ±mlayƒ±n"\n        )\n    }\n\n    $exportData | ConvertTo-Json -Depth 10 | Set-Content $jsonPath\n    Write-ColorOutput "üìÑ Test sonu√ßlarƒ± JSON olarak kaydedildi: $jsonPath" "Green"\n}\n\n# Badge tetikleme\nif ($testResults.PassedTests -gt 0) {\n    Show-Badge "SEO-Verified"\n}\n\n# Final sonu√ß\nWrite-ColorOutput "" "White"\nif ($testResults.FailedTests -eq 0) {\n    Write-ColorOutput "üéâ T√ºm SEO testleri ba≈üarƒ±lƒ±! CI/CD pipeline devam edebilir." "Green"\n    exit 0\n} else {\n    Write-ColorOutput "üí• Bazƒ± SEO testleri ba≈üarƒ±sƒ±z. L√ºtfen eksik dosyalarƒ± ve meta etiketleri ekleyin." "Red"\n    exit 1\n}\n