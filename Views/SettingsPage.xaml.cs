using System;\nusing System.Globalization;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.ViewModels;\nusing Microsoft.Maui.Controls;\nusing System.ComponentModel;\n\nnamespace KesifUygulamasiTemplate.Views\n{\n    public partial class SettingsPage : ContentPage\n    {\n        private readonly SettingsViewModel _viewModel;\n\n        public SettingsPage(SettingsViewModel viewModel)\n        {\n            InitializeComponent();\n            _viewModel = viewModel;\n            BindingContext = _viewModel;\n            LocalizationService.Instance.PropertyChanged += LocalizationService_PropertyChanged;\n        }\n\n        private void LocalizationService_PropertyChanged(object sender, PropertyChangedEventArgs e)\n        {\n            if (e.PropertyName == nameof(LocalizationService.CurrentCulture) || string.IsNullOrEmpty(e.PropertyName))\n            {\n                _viewModel.OnPropertyChanged(nameof(_viewModel.IsTurkishSelected));\n                _viewModel.OnPropertyChanged(nameof(_viewModel.IsEnglishSelected));\n            }\n        }\n\n        protected override void OnAppearing()\n        {\n            base.OnAppearing();\n            CheckLocationPermission();\n        }\n\n        private void Turkish_CheckedChanged(object sender, CheckedChangedEventArgs e)\n        {\n            if (e.Value)\n            {\n                LocalizationService.CurrentCulture = new CultureInfo("tr");\n            }\n        }\n\n        private void English_CheckedChanged(object sender, CheckedChangedEventArgs e)\n        {\n            if (e.Value)\n            {\n                LocalizationService.CurrentCulture = new CultureInfo("en");\n            }\n        }\n\n        private void OfflineModeSwitch_Toggled(object sender, ToggledEventArgs e)\n        {\n            _viewModel.SetOfflineMode(e.Value);\n        }\n\n        private void ThemePicker_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Tema değişikliği kodu\n        }\n\n        private void MapProviderPicker_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Harita sağlayıcı değişikliği - ViewModel otomatik günceller\n        }\n\n        private void RouteOptimizationPicker_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            // Rota optimizasyonu değişikliği - ViewModel otomatik günceller\n        }\n\n        private async void RequestLocationPermission_Clicked(object sender, EventArgs e)\n        {\n            await _viewModel.RequestLocationPermissionAsync();\n            CheckLocationPermission();\n        }\n\n        private async void CheckLocationPermission()\n        {\n            var status = await _viewModel.CheckLocationPermissionAsync();\n            LocationPermissionLabel.Text = status;\n        }\n    }\n}\n