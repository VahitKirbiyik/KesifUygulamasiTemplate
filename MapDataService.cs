using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Microsoft.Maui.Networking;\nusing SQLite;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Services\n{\n    public class MapDataService : IMapDataService\n    {\n        private readonly SQLiteAsyncConnection _database;\n        private readonly IConnectivity _connectivity;\n        private readonly HttpClient _httpClient;\n        private readonly string _mapTileServerUrl;\n        private const int MAX_CACHE_SIZE_MB = 500; // 500 MB maksimum önbellek\n        private const int TILE_EXPIRY_DAYS = 30; // 30 gün tile geçerlilik süresi\n\n        public MapDataService(SQLiteAsyncConnection database, IConnectivity connectivity, HttpClient httpClient)\n        {\n            _database = database;\n            _connectivity = connectivity;\n            _httpClient = httpClient;\n            _mapTileServerUrl = "https://tile.openstreetmap.org/{z}/{x}/{y}.png";\n\n            // Veritabanı tablosunu oluştur\n            _database.CreateTableAsync<MapTile>().Wait();\n        }\n\n        public async Task<bool> SyncMapDataAsync(double latitude, double longitude, int radiusKm, int maxZoom = 15)\n        {\n            if (_connectivity.NetworkAccess != NetworkAccess.Internet)\n                return false;\n\n            try\n            {\n                // Harita merkezini ve kapsama alanını hesapla\n                var boundingBox = CalculateBoundingBox(latitude, longitude, radiusKm);\n\n                // Her bir zoom seviyesi için tile'ları hesapla ve indir\n                for (int zoom = 10; zoom <= maxZoom; zoom++)\n                {\n                    var tiles = CalculateTiles(boundingBox.North, boundingBox.South,\n                                              boundingBox.East, boundingBox.West, zoom);\n\n                    foreach (var tile in tiles)\n                    {\n                        // Tile veritabanında mevcut mu kontrol et\n                        var existingTile = await _database.Table<MapTile>()\n                            .Where(t => t.X == tile.X && t.Y == tile.Y && t.Zoom == zoom)\n                            .FirstOrDefaultAsync();\n\n                        // Eğer tile yoksa veya eskiyse, indir ve kaydet\n                        if (existingTile == null ||\n                            (DateTime.UtcNow - existingTile.LastUpdated).TotalDays > TILE_EXPIRY_DAYS)\n                        {\n                            await DownloadAndSaveTileAsync(tile.X, tile.Y, zoom,\n                                                        tile.North, tile.South, tile.East, tile.West);\n                        }\n                    }\n                }\n\n                // Önbellek boyutunu kontrol et ve gerekirse temizle\n                await CleanupCacheIfNeededAsync();\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Harita verisi senkronizasyon hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        public async Task<IEnumerable<MapTile>> GetOfflineTilesAsync(double north, double south, double east, double west, int zoomLevel)\n        {\n            try\n            {\n                return await _database.Table<MapTile>()\n                    .Where(t => t.North >= south && t.South <= north &&\n                              t.East >= west && t.West <= east &&\n                              t.ZoomLevel == zoomLevel)\n                    .ToListAsync();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Çevrimdışı harita verileri getirme hatası: {ex.Message}");\n                return Enumerable.Empty<MapTile>();\n            }\n        }\n\n        public async Task<bool> HasOfflineCoverageAsync(double latitude, double longitude, int zoomLevel)\n        {\n            try\n            {\n                var (x, y) = LatLongToTile(latitude, longitude, zoomLevel);\n\n                var tile = await _database.Table<MapTile>()\n                    .Where(t => t.X == x && t.Y == y && t.ZoomLevel == zoomLevel)\n                    .FirstOrDefaultAsync();\n\n                return tile != null;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Çevrimdışı kapsama kontrolü hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        public async Task<int> GetOfflineMapSizeMBAsync()\n        {\n            try\n            {\n                var sum = await _database.ExecuteScalarAsync<long>("SELECT SUM(length(Data)) FROM MapTile");\n                return (int)(sum / (1024 * 1024)); // Byte -> MB\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Önbellek boyutu hesaplama hatası: {ex.Message}");\n                return 0;\n            }\n        }\n\n        public async Task<bool> ClearExpiredTilesAsync()\n        {\n            try\n            {\n                var expiryDate = DateTime.UtcNow.AddDays(-TILE_EXPIRY_DAYS);\n                await _database.ExecuteAsync("DELETE FROM MapTile WHERE LastUpdated < ?", expiryDate);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Süresi dolmuş tile'ları temizleme hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        public async Task<bool> ClearAllTilesAsync()\n        {\n            try\n            {\n                await _database.DeleteAllAsync<MapTile>();\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Tüm tile'ları temizleme hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        // Yardımcı metotlar\n        private async Task<bool> DownloadAndSaveTileAsync(int x, int y, int zoom,\n                                                       double north, double south,\n                                                       double east, double west)\n        {\n            try\n            {\n                var url = _mapTileServerUrl\n                    .Replace("{z}", zoom.ToString())\n                    .Replace("{x}", x.ToString())\n                    .Replace("{y}", y.ToString());\n\n                var tileData = await _httpClient.GetByteArrayAsync(url);\n\n                var existingTile = await _database.Table<MapTile>()\n                    .Where(t => t.X == x && t.Y == y && t.ZoomLevel == zoom)\n                    .FirstOrDefaultAsync();\n\n                if (existingTile != null)\n                {\n                    existingTile.TileData = tileData;\n                    existingTile.LastUpdated = DateTime.UtcNow;\n                    await _database.UpdateAsync(existingTile);\n                }\n                else\n                {\n                    await _database.InsertAsync(new MapTile\n                    {\n                        X = x,\n                        Y = y,\n                        ZoomLevel = zoom,\n                        North = north,\n                        South = south,\n                        East = east,\n                        West = west,\n                        TileData = tileData,\n                        LastUpdated = DateTime.UtcNow\n                    });\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($"Tile indirme hatası: {ex.Message}");\n                return false;\n            }\n        }\n\n        private async Task CleanupCacheIfNeededAsync()\n        {\n            var currentSize = await GetOfflineMapSizeMBAsync();\n            if (currentSize > MAX_CACHE_SIZE_MB)\n            {\n                // Önce süresi dolmuş tile'ları temizle\n                await ClearExpiredTilesAsync();\n\n                // Boyut hala büyükse, en eski tile'ları sil\n                currentSize = await GetOfflineMapSizeMBAsync();\n                if (currentSize > MAX_CACHE_SIZE_MB)\n                {\n                    var tilesToDelete = await _database.Table<MapTile>()\n                        .OrderBy(t => t.LastUpdated)\n                        .Take((currentSize - MAX_CACHE_SIZE_MB / 2) * 10) // Yarı boyuta inmek için kabaca hesap\n                        .ToListAsync();\n\n                    foreach (var tile in tilesToDelete)\n                    {\n                        await _database.DeleteAsync(tile);\n                    }\n                }\n            }\n        }\n\n        private (double North, double South, double East, double West) CalculateBoundingBox(\n            double lat, double lng, int radiusKm)\n        {\n            // Dünya yarıçapı (km)\n            const double R = 6371.0;\n\n            // Enlem için 1 derece ~= 111 km\n            double latDelta = radiusKm / 111.0;\n\n            // Boylam için 1 derece, enleme bağlı olarak değişir\n            double lonDelta = radiusKm / (111.0 * Math.Cos(lat * Math.PI / 180.0));\n\n            return (\n                North: lat + latDelta,\n                South: lat - latDelta,\n                East: lng + lonDelta,\n                West: lng - lonDelta\n            );\n        }\n\n        private List<(int X, int Y, double North, double South, double East, double West)> CalculateTiles(\n            double north, double south, double east, double west, int zoom)\n        {\n            var result = new List<(int X, int Y, double North, double South, double East, double West)>();\n\n            var nwTile = LatLongToTile(north, west, zoom);\n            var seTile = LatLongToTile(south, east, zoom);\n\n            for (int x = nwTile.X; x <= seTile.X; x++)\n            {\n                for (int y = nwTile.Y; y <= seTile.Y; y++)\n                {\n                    var tileNorth = TileToLat(y, zoom);\n                    var tileSouth = TileToLat(y + 1, zoom);\n                    var tileWest = TileToLon(x, zoom);\n                    var tileEast = TileToLon(x + 1, zoom);\n\n                    result.Add((x, y, tileNorth, tileSouth, tileEast, tileWest));\n                }\n            }\n\n            return result;\n        }\n\n        private (int X, int Y) LatLongToTile(double lat, double lon, int zoom)\n        {\n            int x = (int)Math.Floor((lon + 180.0) / 360.0 * (1 << zoom));\n            int y = (int)Math.Floor((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +\n                    1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom));\n            return (x, y);\n        }\n\n        private double TileToLat(int y, int zoom)\n        {\n            double n = Math.PI - (2.0 * Math.PI * y) / Math.Pow(2.0, zoom);\n            return 180.0 / Math.PI * Math.Atan(Math.Sinh(n));\n        }\n\n        private double TileToLon(int x, int zoom)\n        {\n            return x / Math.Pow(2.0, zoom) * 360.0 - 180.0;\n        }\n    }\n}\n