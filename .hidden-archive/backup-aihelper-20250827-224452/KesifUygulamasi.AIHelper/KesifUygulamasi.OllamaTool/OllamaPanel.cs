// File: OllamaPanelToolWindow.cs\nusing System;\nusing System.Runtime.Serialization;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.VisualStudio.Extensibility;\nusing Microsoft.VisualStudio.Extensibility.ToolWindows;\nusing Microsoft.VisualStudio.Extensibility.UI;\n\nnamespace KesifUygulamasiTemplate.KesifUygulamasi.OllamaTool\n{\n    [VisualStudioContribution]\n    public class OllamaPanel : ToolWindow\n    {\n        private OllamaPanelContent _content;\n\n        public OllamaPanel()\n        {\n            Title = "Ollama Chat";\n        }\n\n        public override ToolWindowConfiguration ToolWindowConfiguration => new ToolWindowConfiguration\n        {\n            // Sağ tarafa dock’lanmış bir araç penceresi\n            Placement = ToolWindowPlacement.DocumentWell,\n            DockDirection = Dock.Right,\n            InitialWidth = 400,\n            InitialHeight = 600\n        };\n\n        public override Task InitializeAsync(CancellationToken cancellationToken)\n            => Task.CompletedTask;\n\n        public override Task<IRemoteUserControl> GetContentAsync(CancellationToken cancellationToken)\n        {\n            _content ??= new OllamaPanelContent();\n            return Task.FromResult<IRemoteUserControl>(_content);\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                _content?.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n    }\n\n    /// <summary>\n    /// Remote UI içeriği: XAML’i programatik olarak sağlar ve bir ViewModel’e bağlanır.\n    /// </summary>\n    internal sealed class OllamaPanelContent : RemoteUserControl\n    {\n        public OllamaPanelContent() : base(new OllamaPanelViewModel())\n        {\n        }\n\n        public override Task<string> GetXamlAsync(CancellationToken cancellationToken)\n        {\n            const string xaml = @"\n<DataTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'\n              xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'>\n    <Grid Margin='8'>\n        <Grid.RowDefinitions>\n            <RowDefinition Height='*' />\n            <RowDefinition Height='Auto' />\n            <RowDefinition Height='Auto' />\n        </Grid.RowDefinitions>\n\n        <!-- Sohbet geçmişi -->\n        <TextBox Grid.Row='0'\n                 Text='{Binding ChatHistory}'\n                 IsReadOnly='True'\n                 AcceptsReturn='True'\n                 VerticalScrollBarVisibility='Auto'\n                 TextWrapping='Wrap'/>\n\n        <!-- Prompt girişi -->\n        <TextBox Grid.Row='1'\n                 Margin='0,8,0,8'\n                 Text='{Binding Prompt, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}'\n                 AcceptsReturn='False'/>\n\n        <!-- Gönder -->\n        <Button Grid.Row='2'\n                Content='Gönder'\n                Width='100'\n                HorizontalAlignment='Right'\n                Command='{Binding SendCommand}'/>\n    </Grid>\n</DataTemplate>";\n            return Task.FromResult(xaml);\n        }\n    }\n\n    /// <summary>\n    /// Remote UI DataContext (ViewModel). DataContract/DataMember zorunludur.\n    /// </summary>\n    [DataContract]\n    internal sealed class OllamaPanelViewModel : NotifyPropertyChangedObject\n    {\n        private string _chatHistory = string.Empty;\n        private string _prompt = string.Empty;\n\n        public OllamaPanelViewModel()\n        {\n            // UI tarafından tetiklenen komut\n            SendCommand = new AsyncCommand(async (parameter, cancellationToken) =>\n            {\n                var input = Prompt?.Trim();\n                if (!string.IsNullOrEmpty(input))\n                {\n                    ChatHistory += "Sen: " + input + Environment.NewLine;\n                    Prompt = string.Empty;\n\n                    // TODO: Buraya Ollama CLI/API entegrasyonunu ekleyebilirsin.\n                    string cevap = ">>> Bot cevabı buraya gelecek...";\n                    ChatHistory += "Bot: " + cevap + Environment.NewLine;\n                }\n\n                await Task.CompletedTask;\n            });\n        }\n\n        [DataMember]\n        public string ChatHistory\n        {\n            get => _chatHistory;\n            set => SetProperty(ref _chatHistory, value);\n        }\n\n        [DataMember]\n        public string Prompt\n        {\n            get => _prompt;\n            set => SetProperty(ref _prompt, value);\n        }\n\n        // Remote UI, IAsyncCommand’i proxy’leyerek XAML’de ICommand olarak bağlar.\n        [DataMember]\n        public AsyncCommand SendCommand { get; }\n    }\n}\n