using Microsoft.VisualStudio.Shell;\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing Task = System.Threading.Tasks.Task;\n\nnamespace KesifUygulamasi.AIHelper\n{\n    /// <summary>\n    /// This is the class that implements the package exposed by this assembly.\n    /// </summary>\n    /// <remarks>\n    /// <para>\n    /// The minimum requirement for a class to be considered a valid package for Visual Studio\n    /// is to implement the IVsPackage interface and register itself with the shell.\n    /// This package uses the helper classes defined inside the Managed Package Framework (MPF)\n    /// to do it: it derives from the Package class that provides the implementation of the\n    /// IVsPackage interface and uses the registration attributes defined in the framework to\n    /// register itself and its components with the shell. These attributes tell the pkgdef creation\n    /// utility what data to put into .pkgdef file.\n    /// </para>\n    /// <para>\n    /// To get loaded into VS, the package must be referred by &lt;Asset Type="Microsoft.VisualStudio.VsPackage" ...&gt; in .vsixmanifest file.\n    /// </para>\n    /// </remarks>\n    [PackageRegistration(UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]\n    [Guid(PackageGuidString)]\n    public sealed class AIHelperPackage : AsyncPackage\n    {\n        /// <summary>\n        /// KesifUygulamasi.AIHelperPackage GUID string.\n        /// </summary>\n        public const string PackageGuidString = "5f0a1fa9-7685-4174-b861-c1f838342f00";\n\n        #region Package Members\n\n        /// <summary>\n        /// Initialization of the package; this method is called right after the package is sited, so this is the place\n        /// where you can put all the initialization code that rely on services provided by VisualStudio.\n        /// </summary>\n        /// <param name="cancellationToken">A cancellation token to monitor for initialization cancellation, which can occur when VS is shutting down.</param>\n        /// <param name="progress">A provider for progress updates.</param>\n        /// <returns>A task representing the async work of package initialization, or an already completed task if there is none. Do not return null from this method.</returns>\n        protected override async Task InitializeAsync(CancellationToken cancellationToken, IProgress<ServiceProgressData> progress)\n        {\n            // When initialized asynchronously, the current thread may be a background thread at this point.\n            // Do any initialization that requires the UI thread after switching to the UI thread.\n            await this.JoinableTaskFactory.SwitchToMainThreadAsync(cancellationToken);\n        }\n\n        #endregion\n    }\n}\n