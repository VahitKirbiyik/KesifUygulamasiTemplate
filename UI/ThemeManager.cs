using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing Microsoft.Maui.Controls;\nusing Microsoft.Maui.Graphics;\nusing Microsoft.Maui.Storage;\nusing KesifUygulamasiTemplate.Models;\n\n// Alias for Models.AppTheme to avoid conflicts\nusing AppThemeModel = KesifUygulamasiTemplate.Models.AppTheme;\n\nnamespace KesifUygulamasiTemplate.UI\n{\n    /// <summary>\n    /// Uygulama genelinde tema yönetimini sağlayan sınıf\n    /// </summary>\n    public class ThemeManager : INotifyPropertyChanged\n    {\n        private static ThemeManager? _instance;\n        private AppThemeModel _currentTheme;\n        private ResourceDictionary _currentThemeResources;\n\n        // Tema anahtarları\n        private const string ThemePreferenceKey = "AppTheme";\n        private const string PrimaryColorKey = "PrimaryColor";\n        private const string SecondaryColorKey = "SecondaryColor";\n        private const string BackgroundColorKey = "BackgroundColor";\n        private const string TextColorKey = "TextColor";\n        private const string SurfaceColorKey = "SurfaceColor";\n        private const string AccentColorKey = "AccentColor";\n\n        public event PropertyChangedEventHandler? PropertyChanged;\n        public event EventHandler<ThemeChangedEventArgs>? ThemeChanged;\n\n        /// <summary>\n        /// Singleton instance\n        /// </summary>\n        public static ThemeManager Instance => _instance ??= new ThemeManager();\n\n        /// <summary>\n        /// Mevcut tema\n        /// </summary>\n        public AppThemeModel CurrentTheme\n        {\n            get => _currentTheme;\n            private set\n            {\n                if (_currentTheme != value)\n                {\n                    var oldTheme = _currentTheme;\n                    _currentTheme = value;\n                    OnPropertyChanged();\n                    ThemeChanged?.Invoke(this, new ThemeChangedEventArgs(oldTheme, value));\n                }\n            }\n        }\n\n        /// <summary>\n        /// Tema koyu mod mu?\n        /// </summary>\n        public bool IsDarkMode => CurrentTheme == AppThemeModel.Dark;\n\n        /// <summary>\n        /// Tema açık mod mu?\n        /// </summary>\n        public bool IsLightMode => CurrentTheme == AppThemeModel.Light;\n\n        /// <summary>\n        /// Özel tema mı?\n        /// </summary>\n        public bool IsCustomTheme => CurrentTheme == AppThemeModel.Custom;\n\n        private ThemeManager()\n        {\n            // Initialize theme resources\n            _currentThemeResources = new ResourceDictionary();\n            LoadThemeFromPreferences();\n            ApplyThemeResources();\n        }\n\n        /// <summary>\n        /// Temayı değiştirir\n        /// </summary>\n        public void SetTheme(AppThemeModel theme)\n        {\n            if (CurrentTheme == theme)\n                return;\n\n            CurrentTheme = theme;\n            SaveThemeToPreferences();\n            ApplyThemeResources();\n            ApplySystemTheme();\n        }\n\n        /// <summary>\n        /// Açık temaya geçiş\n        /// </summary>\n        public void SetLightTheme()\n        {\n            SetTheme(AppThemeModel.Light);\n        }\n\n        /// <summary>\n        /// Koyu temaya geçiş\n        /// </summary>\n        public void SetDarkTheme()\n        {\n            SetTheme(AppThemeModel.Dark);\n        }\n\n        /// <summary>\n        /// Özel temaya geçiş\n        /// </summary>\n        public void SetCustomTheme()\n        {\n            SetTheme(AppThemeModel.Custom);\n        }\n\n        /// <summary>\n        /// Sistem temasını takip et\n        /// </summary>\n        public void FollowSystemTheme()\n        {\n            var systemTheme = Application.Current?.RequestedTheme ?? Microsoft.Maui.ApplicationModel.AppTheme.Light;\n            var appTheme = systemTheme == Microsoft.Maui.ApplicationModel.AppTheme.Dark\n                ? AppThemeModel.Dark\n                : AppThemeModel.Light;\n            SetTheme(appTheme);\n        }\n\n        /// <summary>\n        /// Tema kaynaklarını uygular\n        /// </summary>\n        private void ApplyThemeResources()\n        {\n            var app = Application.Current;\n            if (app == null)\n                return;\n\n            // Mevcut tema kaynaklarını temizle\n            _currentThemeResources.Clear();\n\n            // Yeni tema kaynaklarını ekle\n            switch (CurrentTheme)\n            {\n                case AppThemeModel.Light:\n                    ApplyLightThemeResources();\n                    break;\n                case AppThemeModel.Dark:\n                    ApplyDarkThemeResources();\n                    break;\n                case AppThemeModel.Custom:\n                    ApplyCustomThemeResources();\n                    break;\n            }\n\n            // Uygulama kaynaklarını güncelle\n            if (app.Resources is ResourceDictionary appResources)\n            {\n                // Tema kaynaklarını birleştir\n                foreach (var resource in _currentThemeResources)\n                {\n                    if (appResources.ContainsKey(resource.Key))\n                    {\n                        appResources[resource.Key] = resource.Value;\n                    }\n                    else\n                    {\n                        appResources.Add(resource.Key, resource.Value);\n                    }\n                }\n            }\n        }\n\n        /// <summary>\n        /// Açık tema kaynaklarını uygular\n        /// </summary>\n        private void ApplyLightThemeResources()\n        {\n            _currentThemeResources.Add(PrimaryColorKey, Color.FromArgb("#2196F3"));\n            _currentThemeResources.Add(SecondaryColorKey, Color.FromArgb("#00BCD4"));\n            _currentThemeResources.Add(AccentColorKey, Color.FromArgb("#FFC107"));\n            _currentThemeResources.Add(BackgroundColorKey, Color.FromArgb("#F5F5F5"));\n            _currentThemeResources.Add(SurfaceColorKey, Color.FromArgb("#FFFFFF"));\n            _currentThemeResources.Add(TextColorKey, Color.FromArgb("#212121"));\n\n            // Button stilleri\n            var buttonStyle = new Style(typeof(Button));\n            buttonStyle.Setters.Add(new Setter { Property = Button.BackgroundColorProperty, Value = Color.FromArgb("#2196F3") });\n            buttonStyle.Setters.Add(new Setter { Property = Button.TextColorProperty, Value = Colors.White });\n            buttonStyle.Setters.Add(new Setter { Property = Button.FontAttributesProperty, Value = FontAttributes.Bold });\n            buttonStyle.Setters.Add(new Setter { Property = Button.CornerRadiusProperty, Value = 10 });\n            buttonStyle.Setters.Add(new Setter { Property = Button.PaddingProperty, Value = new Thickness(20, 10) });\n\n            _currentThemeResources.Add("ButtonStyle", buttonStyle);\n\n            // Label stilleri\n            var labelStyle = new Style(typeof(Label));\n            labelStyle.Setters.Add(new Setter { Property = Label.TextColorProperty, Value = Color.FromArgb("#212121") });\n\n            _currentThemeResources.Add("LabelStyle", labelStyle);\n        }\n\n        /// <summary>\n        /// Koyu tema kaynaklarını uygular\n        /// </summary>\n        private void ApplyDarkThemeResources()\n        {\n            _currentThemeResources.Add(PrimaryColorKey, Color.FromArgb("#BB86FC"));\n            _currentThemeResources.Add(SecondaryColorKey, Color.FromArgb("#03DAC6"));\n            _currentThemeResources.Add(AccentColorKey, Color.FromArgb("#CF6679"));\n            _currentThemeResources.Add(BackgroundColorKey, Color.FromArgb("#121212"));\n            _currentThemeResources.Add(SurfaceColorKey, Color.FromArgb("#1E1E1E"));\n            _currentThemeResources.Add(TextColorKey, Color.FromArgb("#FFFFFF"));\n\n            // Button stilleri\n            var buttonStyle = new Style(typeof(Button));\n            buttonStyle.Setters.Add(new Setter { Property = Button.BackgroundColorProperty, Value = Color.FromArgb("#BB86FC") });\n            buttonStyle.Setters.Add(new Setter { Property = Button.TextColorProperty, Value = Color.FromArgb("#121212") });\n            buttonStyle.Setters.Add(new Setter { Property = Button.FontAttributesProperty, Value = FontAttributes.Bold });\n            buttonStyle.Setters.Add(new Setter { Property = Button.CornerRadiusProperty, Value = 10 });\n            buttonStyle.Setters.Add(new Setter { Property = Button.PaddingProperty, Value = new Thickness(20, 10) });\n\n            _currentThemeResources.Add("ButtonStyle", buttonStyle);\n\n            // Label stilleri\n            var labelStyle = new Style(typeof(Label));\n            labelStyle.Setters.Add(new Setter { Property = Label.TextColorProperty, Value = Color.FromArgb("#FFFFFF") });\n\n            _currentThemeResources.Add("LabelStyle", labelStyle);\n        }\n\n        /// <summary>\n        /// Özel tema kaynaklarını uygular\n        /// </summary>\n        private void ApplyCustomThemeResources()\n        {\n            // Özel tema için varsayılan koyu tema kullan\n            // İleride kullanıcı tarafından özelleştirilebilir\n            ApplyDarkThemeResources();\n        }\n\n        /// <summary>\n        /// Sistem temasını uygular\n        /// </summary>\n        private void ApplySystemTheme()\n        {\n            var app = Application.Current;\n            if (app == null)\n                return;\n\n            Microsoft.Maui.ApplicationModel.AppTheme systemTheme;\n            switch (CurrentTheme)\n            {\n                case AppThemeModel.Light:\n                    systemTheme = Microsoft.Maui.ApplicationModel.AppTheme.Light;\n                    break;\n                case AppThemeModel.Dark:\n                    systemTheme = Microsoft.Maui.ApplicationModel.AppTheme.Dark;\n                    break;\n                case AppThemeModel.Custom:\n                    systemTheme = Microsoft.Maui.ApplicationModel.AppTheme.Dark; // Custom için koyu baz al\n                    break;\n                default:\n                    systemTheme = Microsoft.Maui.ApplicationModel.AppTheme.Light;\n                    break;\n            }\n\n            app.UserAppTheme = systemTheme;\n        }\n\n        /// <summary>\n        /// Temayı tercihlerden yükler\n        /// </summary>\n        private void LoadThemeFromPreferences()\n        {\n            try\n            {\n                var themeString = Preferences.Get(ThemePreferenceKey, AppThemeModel.Light.ToString());\n                if (Enum.TryParse<AppThemeModel>(themeString, out var theme))\n                {\n                    _currentTheme = theme;\n                }\n                else\n                {\n                    _currentTheme = AppThemeModel.Light;\n                }\n            }\n            catch\n            {\n                _currentTheme = AppThemeModel.Light;\n            }\n        }\n\n        /// <summary>\n        /// Temayı tercihlerden kaydeder\n        /// </summary>\n        private void SaveThemeToPreferences()\n        {\n            try\n            {\n                Preferences.Set(ThemePreferenceKey, CurrentTheme.ToString());\n            }\n            catch (Exception ex)\n            {\n                // Log error but don't crash\n                System.Diagnostics.Debug.WriteLine($"Failed to save theme preference: {ex.Message}");\n            }\n        }\n\n        /// <summary>\n        /// Tema rengini alır\n        /// </summary>\n        public Color GetThemeColor(string key)\n        {\n            if (_currentThemeResources.TryGetValue(key, out var value) && value is Color color)\n            {\n                return color;\n            }\n\n            // Fallback renkler\n            return key switch\n            {\n                PrimaryColorKey => Color.FromArgb("#2196F3"),\n                SecondaryColorKey => Color.FromArgb("#00BCD4"),\n                AccentColorKey => Color.FromArgb("#FFC107"),\n                BackgroundColorKey => IsDarkMode ? Color.FromArgb("#121212") : Color.FromArgb("#F5F5F5"),\n                SurfaceColorKey => IsDarkMode ? Color.FromArgb("#1E1E1E") : Color.FromArgb("#FFFFFF"),\n                TextColorKey => IsDarkMode ? Color.FromArgb("#FFFFFF") : Color.FromArgb("#212121"),\n                _ => Colors.Black\n            };\n        }\n\n        /// <summary>\n        /// Tema stilini alır\n        /// </summary>\n        public Style GetThemeStyle(string key)\n        {\n            if (_currentThemeResources.TryGetValue(key, out var value) && value is Style style)\n            {\n                return style;\n            }\n\n            return new Style(typeof(object));\n        }\n\n        /// <summary>\n        /// Property değişikliği bildirimi\n        /// </summary>\n        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n\n    /// <summary>\n    /// Tema değişikliği olay argümanları\n    /// </summary>\n    public class ThemeChangedEventArgs : EventArgs\n    {\n        public AppThemeModel OldTheme { get; }\n        public AppThemeModel NewTheme { get; }\n\n        public ThemeChangedEventArgs(AppThemeModel oldTheme, AppThemeModel newTheme)\n        {\n            OldTheme = oldTheme;\n            NewTheme = newTheme;\n        }\n    }\n}\n