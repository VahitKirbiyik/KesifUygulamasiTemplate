using Micro    public partial class App : App        /// <summary>
                                                     /// Sets up global exception handling for unhandled exceptions
                                                     /// </summary>
        private void SetupGlobalExceptionHandling()
{
    // Handle unhandled exceptions on main thread
    Microsoft.Maui.Controls.Application.Current.Dispatcher.Dispatch(() =>
    {
        AppDomain.CurrentDomain.UnhandledException += (sender, args) =>
        {
            var exception = args.ExceptionObject as Exception;
            if (exception != null)
            {
                _exceptionHandler.HandleException(exception);
            }
        };

        TaskScheduler.UnobservedTaskException += (sender, args) =>
        {
            _exceptionHandler.HandleException(args.Exception);
            args.SetObserved(); // Prevent app crash
        };
    });
}

/// <summary>
/// SecureStorage'da API Key yoksa ekler
/// </summary>ation
{
        private readonly IGlobalExceptionHandler _exceptionHandler;

public App(IGlobalExceptionHandler exceptionHandler)
{
    _exceptionHandler = exceptionHandler ?? throw new ArgumentNullException(nameof(exceptionHandler));

    InitializeComponent();

    // Setup global exception handling
    SetupGlobalExceptionHandling();

    // 1Ô∏è‚É£ API Key'i SecureStorage'a ekle (ilk √ßalƒ±≈ütƒ±rmada)
    _ = EnsureApiKeyAsync(); i.Controls;
    using KesifUygulamasiTemplate.Views;
    using KesifUygulamasiTemplate.ViewModels;
    using KesifUygulamasiTemplate.Helpers;
    using Microsoft.Maui.Storage;
    using Microsoft.Maui.ApplicationModel;
    using System;
    using System.Threading.Tasks;

namespace KesifUygulamasiTemplate
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            // 1Ô∏è‚É£ API Key‚Äôi SecureStorage‚Äôa ekle (ilk √ßalƒ±≈ütƒ±rmada)
            _ = EnsureApiKeyAsync();

            // 2Ô∏è‚É£ Ana sayfa olu≈ütur ve NavigationPage ile ata
            var mainPage = new StreetViewPage();
            MainPage = new NavigationPage(mainPage);

            // 3Ô∏è‚É£ ViewModel kontrol√º ve panorama y√ºkleme
            if (mainPage?.BindingContext is StreetViewViewModel viewModel)
            {
                _ = LoadUserPanoramaAsync(viewModel);
            }
        }

        /// <summary>
        /// SecureStorage‚Äôda API Key yoksa ekler
        /// </summary>
        private async Task EnsureApiKeyAsync()
        {
            try
            {
                var existingKey = await SecureStorageHelper.GetApiKeyAsync();
                if (string.IsNullOrWhiteSpace(existingKey))
                {
                    // üîê Ger√ßek projede bu key‚Äôi Google Cloud Console‚Äôdan alƒ±n
                    var apiKey = Environment.GetEnvironmentVariable("GOOGLE_MAPS_API_KEY") ?? "AIzaSyD3x-TESTKEY-EXAMPLE123456789";
                    await SecureStorageHelper.SetApiKeyAsync(apiKey);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"API Key kontrol√º ba≈üarƒ±sƒ±z: {ex.Message}");
            }
        }

        /// <summary>
        /// Kullanƒ±cƒ±nƒ±n konumuna g√∂re StreetView panorama y√ºkler
        /// </summary>
        private async Task LoadUserPanoramaAsync(StreetViewViewModel viewModel)
        {
            try
            {
                var status = await Permissions.CheckStatusAsync<Permissions.LocationWhenInUse>();
                if (status != PermissionStatus.Granted)
                {
                    status = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
                    if (status != PermissionStatus.Granted)
                    {
                        await MainPage.DisplayAlert("ƒ∞zin Gerekli", "Konum izni verilmediƒüi i√ßin panorama y√ºklenemiyor.", "Tamam");
                        return;
                    }
                }

                await viewModel.LoadPanoramaByUserLocationAsync();
            }
            catch (Exception ex)
            {
                await MainPage.DisplayAlert("Hata", $"Konum y√ºklenemedi: {ex.Message}", "Tamam");
            }
        }
    }
}
