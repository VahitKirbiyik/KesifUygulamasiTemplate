using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Xunit;\n\nnamespace KesifUygulamasiTemplate.Tests.Services\n{\n    public class RouteServiceTests\n    {\n        private readonly Mock<HttpClient> _mockHttpClient;\n        private readonly Mock<ConnectivityService> _mockConnectivityService;\n        private readonly Mock<ILogger<RouteService>> _mockLogger;\n        private readonly LocalizationService _localizationService;\n        private readonly MonitoringService _monitoringService;\n        private readonly RouteService _routeService;\n\n        public RouteServiceTests()\n        {\n            _mockHttpClient = new Mock<HttpClient>();\n            _mockConnectivityService = new Mock<ConnectivityService>();\n            _mockLogger = new Mock<ILogger<RouteService>>();\n            _localizationService = LocalizationService.Instance;\n            var mockMonitoringLogger = new Mock<ILogger<MonitoringService>>();\n            _monitoringService = new MonitoringService(mockMonitoringLogger.Object);\n            _routeService = new RouteService(_mockHttpClient.Object, _mockConnectivityService.Object, _mockLogger.Object, _localizationService, _monitoringService);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WithValidLocations_ReturnsRoute()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 }; // Ä°stanbul\n            var end = new LocationModel { Latitude = 39.9334, Longitude = 32.8597 }; // Ankara\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(start, end);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 2);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WhenOffline_ReturnsOfflineRoute()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 };\n            var end = new LocationModel { Latitude = 39.9334, Longitude = 32.8597 };\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(false);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(start, end);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 2);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_WithSameStartEnd_ReturnsDirectRoute()\n        {\n            // Arrange\n            var location = new LocationModel { Latitude = 41.0082, Longitude = 28.9784 };\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            var result = await _routeService.GetRouteAsync(location, location);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count >= 1);\n        }\n\n        [Fact]\n        public void OfflineRouteSimulator_EstimateDuration_WithValidInputs_ReturnsCorrectTimeSpan()\n        {\n            // Arrange\n            double distanceKm = 120;\n            double averageSpeedKmh = 60;\n\n            // Act\n            var result = KesifUygulamasiTemplate.Services.OfflineRouteSimulator.EstimateDuration(distanceKm, averageSpeedKmh);\n\n            // Assert\n            Assert.Equal(120, result.TotalMinutes); // 120km / 60kmh = 2 hours = 120 minutes\n        }\n\n        [Fact]\n        public void OfflineRouteSimulator_EstimateDuration_WithZeroSpeed_ReturnsZero()\n        {\n            // Arrange\n            double distanceKm = 100;\n            double averageSpeedKmh = 0;\n\n            // Act\n            var result = KesifUygulamasiTemplate.Services.OfflineRouteSimulator.EstimateDuration(distanceKm, averageSpeedKmh);\n\n            // Assert\n            Assert.Equal(TimeSpan.Zero, result);\n        }\n\n        [Fact]\n        public void OfflineRouteSimulator_EstimateDuration_WithZeroDistance_ReturnsZero()\n        {\n            // Arrange\n            double distanceKm = 0;\n            double averageSpeedKmh = 50;\n\n            // Act\n            var result = KesifUygulamasiTemplate.Services.OfflineRouteSimulator.EstimateDuration(distanceKm, averageSpeedKmh);\n\n            // Assert\n            Assert.Equal(TimeSpan.Zero, result);\n        }\n    }\n}\n