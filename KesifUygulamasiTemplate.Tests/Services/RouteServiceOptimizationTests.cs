using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Xunit;\nusing KesifUygulamasiTemplate.Models;\nusing KesifUygulamasiTemplate.Services;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Tests.Services\n{\n    public class RouteServiceOptimizationTests\n    {\n        private readonly Mock<HttpClient> _mockHttpClient;\n        private readonly Mock<ConnectivityService> _mockConnectivityService;\n        private readonly Mock<ILogger<RouteService>> _mockLogger;\n        private readonly Mock<LocalizationService> _mockLocalizationService;\n        private readonly Mock<MonitoringService> _mockMonitoringService;\n        private readonly RouteService _routeService;\n\n        public RouteServiceOptimizationTests()\n        {\n            _mockHttpClient = new Mock<HttpClient>();\n            _mockConnectivityService = new Mock<ConnectivityService>();\n            _mockLogger = new Mock<ILogger<RouteService>>();\n            _mockLocalizationService = new Mock<LocalizationService>();\n            _mockMonitoringService = new Mock<MonitoringService>();\n\n            _routeService = new RouteService(\n                _mockHttpClient.Object,\n                _mockConnectivityService.Object,\n                _mockLogger.Object,\n                _mockLocalizationService.Object,\n                _mockMonitoringService.Object);\n        }\n\n        [Theory]\n        [InlineData(RouteOptimizationType.Fastest)]\n        [InlineData(RouteOptimizationType.Shortest)]\n        [InlineData(RouteOptimizationType.Eco)]\n        [InlineData(RouteOptimizationType.Safe)]\n        public async Task GetRouteAsync_WithDifferentOptimizationTypes_LogsCorrectly(RouteOptimizationType optimizationType)\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 39.9, Longitude = 32.8 };\n            var end = new LocationModel { Latitude = 41.0, Longitude = 29.0 };\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            await _routeService.GetRouteAsync(start, end, optimizationType);\n\n            // Assert\n            _mockMonitoringService.Verify(m => m.LogRouteTypeUsage(optimizationType.ToString()), Times.Once);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_OfflineMode_ReturnsOfflineRoute()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 39.9, Longitude = 32.8 };\n            var end = new LocationModel { Latitude = 41.0, Longitude = 29.0 };\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(false);\n            _mockLocalizationService.Setup(l => l.GetString(It.IsAny<string>(), It.IsAny<object>()))\n                .Returns("Offline ETA: 30 minutes");\n\n            // Act\n            var result = await _routeService.GetRouteAsync(start, end, RouteOptimizationType.Fastest);\n\n            // Assert\n            Assert.NotNull(result);\n            Assert.True(result.Count > 0);\n            _mockMonitoringService.Verify(m => m.LogRouteTypeUsage("Fastest"), Times.Once);\n        }\n\n        [Fact]\n        public async Task GetRouteAsync_OnlineMode_LogsProviderUsage()\n        {\n            // Arrange\n            var start = new LocationModel { Latitude = 39.9, Longitude = 32.8 };\n            var end = new LocationModel { Latitude = 41.0, Longitude = 29.0 };\n\n            _mockConnectivityService.Setup(c => c.IsConnected).Returns(true);\n\n            // Act\n            await _routeService.GetRouteAsync(start, end, RouteOptimizationType.Fastest);\n\n            // Assert\n            _mockMonitoringService.Verify(m => m.LogProviderUsage(It.IsAny<string>()), Times.Once);\n        }\n    }\n}\n