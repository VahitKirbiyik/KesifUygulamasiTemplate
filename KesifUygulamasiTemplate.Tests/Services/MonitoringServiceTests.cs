using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Xunit;\nusing KesifUygulamasiTemplate.Services;\n\nnamespace KesifUygulamasiTemplate.Tests.Services\n{\n    public class MonitoringServiceTests\n    {\n        private readonly Mock<ILogger<MonitoringService>> _mockLogger;\n        private readonly MonitoringService _monitoringService;\n\n        public MonitoringServiceTests()\n        {\n            _mockLogger = new Mock<ILogger<MonitoringService>>();\n            _monitoringService = new MonitoringService(_mockLogger.Object);\n        }\n\n        [Fact]\n        public void LogProviderUsage_IncrementsProviderCount()\n        {\n            // Arrange\n            var provider = "Google";\n\n            // Act\n            _monitoringService.LogProviderUsage(provider);\n            _monitoringService.LogProviderUsage(provider);\n\n            // Assert\n            var stats = _monitoringService.GetCurrentStats();\n            Assert.Equal(2, stats.ProviderStats[provider]);\n        }\n\n        [Fact]\n        public void LogRouteTypeUsage_IncrementsRouteTypeCount()\n        {\n            // Arrange\n            var routeType = "Fastest";\n\n            // Act\n            _monitoringService.LogRouteTypeUsage(routeType);\n            _monitoringService.LogRouteTypeUsage(routeType);\n\n            // Assert\n            var stats = _monitoringService.GetCurrentStats();\n            Assert.Equal(2, stats.RouteStats[routeType]);\n        }\n\n        [Fact]\n        public async Task GenerateDailyReport_CreatesJsonFile()\n        {\n            // Arrange\n            _monitoringService.LogProviderUsage("Google");\n            _monitoringService.LogRouteTypeUsage("Fastest");\n\n            // Act\n            await _monitoringService.GenerateDailyReportAsync();\n\n            // Assert\n            var logFilePath = Path.Combine(FileSystem.AppDataDirectory, "monitoring_logs.json");\n            Assert.True(File.Exists(logFilePath));\n\n            var content = await File.ReadAllTextAsync(logFilePath);\n            Assert.Contains("Google", content);\n            Assert.Contains("Fastest", content);\n        }\n\n        [Fact]\n        public void ResetStats_ClearsAllStatistics()\n        {\n            // Arrange\n            _monitoringService.LogProviderUsage("Google");\n            _monitoringService.LogRouteTypeUsage("Fastest");\n\n            // Act\n            _monitoringService.ResetStats();\n\n            // Assert\n            var stats = _monitoringService.GetCurrentStats();\n            Assert.Empty(stats.ProviderStats);\n            Assert.Empty(stats.RouteStats);\n        }\n\n        [Fact]\n        public void GetCurrentStats_ReturnsCorrectStatistics()\n        {\n            // Arrange\n            _monitoringService.LogProviderUsage("Google");\n            _monitoringService.LogProviderUsage("Mapbox");\n            _monitoringService.LogRouteTypeUsage("Fastest");\n            _monitoringService.LogRouteTypeUsage("Eco");\n\n            // Act\n            var stats = _monitoringService.GetCurrentStats();\n\n            // Assert\n            Assert.Equal(2, stats.ProviderStats.Count);\n            Assert.Equal(2, stats.RouteStats.Count);\n            Assert.Equal(1, stats.ProviderStats["Google"]);\n            Assert.Equal(1, stats.ProviderStats["Mapbox"]);\n            Assert.Equal(1, stats.RouteStats["Fastest"]);\n            Assert.Equal(1, stats.RouteStats["Eco"]);\n        }\n    }\n}\n