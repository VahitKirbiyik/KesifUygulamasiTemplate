using Xunit;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace KesifUygulamasiTemplate.Tests\n{\n    /// <summary>\n    /// AyPusulasiPage için birim testleri\n    /// Bu test sınıfı ay pusulası sayfasının temel işlevlerini test eder\n    /// MAUI bağımlılıkları olmadan core business logic'i test eder\n    /// </summary>\n    public class AyPusulasiPageTests\n    {\n        #region Test Data Classes\n\n        /// <summary>\n        /// AyPusulasiPage'de kullanılan ay verisi için test sınıfı\n        /// Gerçek MoonData sınıfını simüle eder\n        /// </summary>\n        public class TestAyPusulasiData\n        {\n            public double Phase { get; set; }\n            public DateTime RiseTime { get; set; }\n            public DateTime SetTime { get; set; }\n            public double Illumination { get; set; }\n            public string PhaseName { get; set; } = string.Empty;\n            public string PhaseEmoji { get; set; } = string.Empty;\n            public double Azimuth { get; set; }\n            public double Altitude { get; set; }\n            public double Distance { get; set; }\n\n            /// <summary>\n            /// Label formatları için property'ler (UI'daki label'lara karşılık gelir)\n            /// </summary>\n            public string AyFazLabel => $"{Phase * 100:F1}%";           // ayFazLabel\n            public string AyDogusLabel => RiseTime.ToString("HH:mm");    // ayDogusLabel  \n            public string AyBatisLabel => SetTime.ToString("HH:mm");     // ayBatisLabel\n            public string AydinlanmaLabel => $"{Illumination * 100:F1}%"; // aydinlanmaLabel\n        }\n\n        /// <summary>\n        /// AyPusulasiPage'in core işlevlerini simüle eden test sınıfı\n        /// Gerçek MoonCompassPage ve ViewModel'in temel mantığını test eder\n        /// </summary>\n        public class TestAyPusulasiPage\n        {\n            private TestAyPusulasiData? _moonData;\n            private bool _isInitialized;\n\n            /// <summary>\n            /// Sayfa verilerinin yüklenip yüklenmediğini kontrol eder\n            /// </summary>\n            public bool IsDataLoaded => _moonData != null;\n\n            /// <summary>\n            /// Mevcut ay verisi\n            /// </summary>\n            public TestAyPusulasiData? MoonData => _moonData;\n\n            /// <summary>\n            /// Sayfa başlatıldı mı?\n            /// </summary>\n            public bool IsInitialized => _isInitialized;\n\n            /// <summary>\n            /// AyPusulasiPage instance'ını oluşturur\n            /// Gerçek MoonCompassPage constructor'ını simüle eder\n            /// </summary>\n            public TestAyPusulasiPage()\n            {\n                _isInitialized = true;\n            }\n\n            /// <summary>\n            /// HesaplaVeGuncelle metodunu simüle eder\n            /// Gerçek LoadMoonDataAsync metodunun eşdeğeri\n            /// ayFazLabel, ayDogusLabel, ayBatisLabel, aydinlanmaLabel değerlerini günceller\n            /// </summary>\n            public async Task HesaplaVeGuncelle(double latitude, double longitude)\n            {\n                // Async işlem simülasyonu\n                await Task.Delay(50);\n\n                // İstanbul koordinatları için özel test verisi\n                if (Math.Abs(latitude - 41.0082) < 0.01 && Math.Abs(longitude - 28.9784) < 0.01)\n                {\n                    _moonData = new TestAyPusulasiData\n                    {\n                        Phase = 0.75,  // %75 Şişkin Ay\n                        RiseTime = DateTime.Today.AddHours(19).AddMinutes(30), // 19:30\n                        SetTime = DateTime.Today.AddHours(7).AddMinutes(15),   // 07:15\n                        Illumination = 0.75, // %75 aydınlanma\n                        PhaseName = "Şişkin Ay",\n                        PhaseEmoji = "??",\n                        Azimuth = 120.5,\n                        Altitude = 45.2,\n                        Distance = 384400\n                    };\n                }\n                else\n                {\n                    // Diğer koordinatlar için genel test verisi\n                    _moonData = new TestAyPusulasiData\n                    {\n                        Phase = 0.5,   // %50 Yarım Ay\n                        RiseTime = DateTime.Today.AddHours(20),  // 20:00\n                        SetTime = DateTime.Today.AddHours(8),    // 08:00\n                        Illumination = 0.5, // %50 aydınlanma\n                        PhaseName = "Yarım Ay",\n                        PhaseEmoji = "??",\n                        Azimuth = 90,\n                        Altitude = 30,\n                        Distance = 380000\n                    };\n                }\n            }\n\n            /// <summary>\n            /// Tüm label'ların değerlerini döndürür\n            /// </summary>\n            public (string ayFaz, string ayDogus, string ayBatis, string aydinlanma) GetAllLabels()\n            {\n                if (_moonData == null)\n                    return (string.Empty, string.Empty, string.Empty, string.Empty);\n\n                return (\n                    _moonData.AyFazLabel,\n                    _moonData.AyDogusLabel,\n                    _moonData.AyBatisLabel,\n                    _moonData.AydinlanmaLabel\n                );\n            }\n        }\n\n        #endregion\n\n        #region Test Fields\n        private readonly TestAyPusulasiPage _ayPusulasiPage;\n        #endregion\n\n        #region Constructor\n        /// <summary>\n        /// Test sınıfı constructor'ı - her test çalışmadan önce çağrılır\n        /// </summary>\n        public AyPusulasiPageTests()\n        {\n            _ayPusulasiPage = new TestAyPusulasiPage();\n        }\n        #endregion\n\n        #region Basic Instance Tests\n\n        /// <summary>\n        /// Test: AyPusulasiPage instance'ının başarıyla oluşturulması\n        /// Bu test, sayfanın düzgün şekilde initialize edildiğini doğrular\n        /// </summary>\n        [Fact]\n        public void AyPusulasiPage_ShouldBeCreatedSuccessfully()\n        {\n            // Arrange & Act\n            var page = new TestAyPusulasiPage();\n\n            // Assert\n            Assert.NotNull(page);\n            Assert.True(page.IsInitialized);\n            Assert.False(page.IsDataLoaded); // Başlangıçta veri yüklü olmamalı\n        }\n\n        #endregion\n\n        #region HesaplaVeGuncelle Tests\n\n        /// <summary>\n        /// Test: HesaplaVeGuncelle metodunun çağrılması ve \n        /// ayFazLabel, ayDogusLabel, ayBatisLabel, aydinlanmaLabel değerlerinin güncellenmesi\n        /// Bu ana test metodu, istenen tüm label'ların doğru şekilde güncellenmesini test eder\n        /// </summary>\n        [Fact]\n        public async Task HesaplaVeGuncelle_ShouldUpdateAllLabelsAndNotBeEmpty()\n        {\n            // Arrange\n            double istanbulLat = 41.0082;  // İstanbul enlem\n            double istanbulLon = 28.9784;  // İstanbul boylam\n\n            // Act - HesaplaVeGuncelle metodunu çağır\n            await _ayPusulasiPage.HesaplaVeGuncelle(istanbulLat, istanbulLon);\n\n            // Assert - Veri yüklendiğini doğrula\n            Assert.True(_ayPusulasiPage.IsDataLoaded);\n            Assert.NotNull(_ayPusulasiPage.MoonData);\n\n            // Tüm label değerlerini al\n            var (ayFazLabel, ayDogusLabel, ayBatisLabel, aydinlanmaLabel) = _ayPusulasiPage.GetAllLabels();\n\n            // 1. ayFazLabel kontrolü (Ay Fazı)\n            Assert.NotNull(ayFazLabel);\n            Assert.NotEmpty(ayFazLabel);\n            Assert.Contains("%", ayFazLabel);\n            Assert.Contains("75", ayFazLabel); // %75 bekleniyor\n\n            // 2. ayDogusLabel kontrolü (Ay Doğuşu)  \n            Assert.NotNull(ayDogusLabel);\n            Assert.NotEmpty(ayDogusLabel);\n            Assert.Contains("19", ayDogusLabel); // 19:30 bekleniyor\n            Assert.Contains("30", ayDogusLabel);\n\n            // 3. ayBatisLabel kontrolü (Ay Batışı)\n            Assert.NotNull(ayBatisLabel);\n            Assert.NotEmpty(ayBatisLabel);\n            Assert.Contains("07", ayBatisLabel); // 07:15 bekleniyor\n            Assert.Contains("15", ayBatisLabel);\n\n            // 4. aydinlanmaLabel kontrolü (Aydınlanma)\n            Assert.NotNull(aydinlanmaLabel);\n            Assert.NotEmpty(aydinlanmaLabel);\n            Assert.Contains("%", aydinlanmaLabel);\n            Assert.Contains("75", aydinlanmaLabel); // %75 bekleniyor\n\n            // 5. Ek detaylı kontroller\n            Assert.Equal("75,0%", ayFazLabel);\n            Assert.Equal("19:30", ayDogusLabel);\n            Assert.Equal("07:15", ayBatisLabel);\n            Assert.Equal("75,0%", aydinlanmaLabel);\n        }\n\n        /// <summary>\n        /// Test: HesaplaVeGuncelle metodunun farklı koordinatlar ile çalışması\n        /// </summary>\n        [Fact]\n        public async Task HesaplaVeGuncelle_WithDifferentCoordinates_ShouldUpdateLabels()\n        {\n            // Arrange\n            double newYorkLat = 40.7128;\n            double newYorkLon = -74.0060;\n\n            // Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(newYorkLat, newYorkLon);\n\n            // Assert\n            Assert.True(_ayPusulasiPage.IsDataLoaded);\n\n            var (ayFazLabel, ayDogusLabel, ayBatisLabel, aydinlanmaLabel) = _ayPusulasiPage.GetAllLabels();\n\n            // Tüm label'lar boş olmamalı\n            Assert.NotEmpty(ayFazLabel);\n            Assert.NotEmpty(ayDogusLabel);\n            Assert.NotEmpty(ayBatisLabel);\n            Assert.NotEmpty(aydinlanmaLabel);\n\n            // New York için farklı değerler bekleniyor\n            Assert.Contains("50", ayFazLabel);  // %50\n            Assert.Contains("20", ayDogusLabel); // 20:00\n            Assert.Contains("08", ayBatisLabel); // 08:00\n            Assert.Contains("50", aydinlanmaLabel); // %50\n        }\n\n        #endregion\n\n        #region Label Format Tests\n\n        /// <summary>\n        /// Test: ayFazLabel formatının doğru olması\n        /// Ay fazı yüzde formatında olmalı\n        /// </summary>\n        [Fact]\n        public async Task AyFazLabel_ShouldHaveCorrectPercentageFormat()\n        {\n            // Arrange & Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n\n            // Assert\n            var (ayFazLabel, _, _, _) = _ayPusulasiPage.GetAllLabels();\n\n            Assert.NotEmpty(ayFazLabel);\n            Assert.Contains("%", ayFazLabel);\n            Assert.Matches(@"\d+(\,\d+)?%", ayFazLabel); // Sayı + % formatı\n        }\n\n        /// <summary>\n        /// Test: ayDogusLabel ve ayBatisLabel saat formatının doğru olması\n        /// Saat formatı HH:mm olmalı\n        /// </summary>\n        [Fact]\n        public async Task AyDogusAndBatisLabels_ShouldHaveCorrectTimeFormat()\n        {\n            // Arrange & Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n\n            // Assert\n            var (_, ayDogusLabel, ayBatisLabel, _) = _ayPusulasiPage.GetAllLabels();\n\n            // Doğuş saati formatı kontrolü\n            Assert.NotEmpty(ayDogusLabel);\n            Assert.Matches(@"\d{2}:\d{2}", ayDogusLabel); // HH:mm formatı\n\n            // Batış saati formatı kontrolü  \n            Assert.NotEmpty(ayBatisLabel);\n            Assert.Matches(@"\d{2}:\d{2}", ayBatisLabel); // HH:mm formatı\n        }\n\n        /// <summary>\n        /// Test: aydinlanmaLabel formatının doğru olması\n        /// Aydınlanma yüzde formatında olmalı\n        /// </summary>\n        [Fact]\n        public async Task AydinlanmaLabel_ShouldHaveCorrectPercentageFormat()\n        {\n            // Arrange & Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n\n            // Assert\n            var (_, _, _, aydinlanmaLabel) = _ayPusulasiPage.GetAllLabels();\n\n            Assert.NotEmpty(aydinlanmaLabel);\n            Assert.Contains("%", aydinlanmaLabel);\n            Assert.Matches(@"\d+(\,\d+)?%", aydinlanmaLabel); // Sayı + % formatı\n        }\n\n        #endregion\n\n        #region Integration Tests\n\n        /// <summary>\n        /// Test: Sayfa başlatıldığında instance'ın doğru durumda olması\n        /// </summary>\n        [Fact]\n        public void AyPusulasiPage_OnInstantiation_ShouldHaveCorrectInitialState()\n        {\n            // Arrange & Act\n            var page = new TestAyPusulasiPage();\n\n            // Assert\n            Assert.True(page.IsInitialized);\n            Assert.False(page.IsDataLoaded);\n            Assert.Null(page.MoonData);\n\n            // Label'lar başlangıçta boş olmalı\n            var (ayFazLabel, ayDogusLabel, ayBatisLabel, aydinlanmaLabel) = page.GetAllLabels();\n            Assert.Empty(ayFazLabel);\n            Assert.Empty(ayDogusLabel);\n            Assert.Empty(ayBatisLabel);\n            Assert.Empty(aydinlanmaLabel);\n        }\n\n        #endregion\n\n        #region Performance Tests\n\n        /// <summary>\n        /// Test: HesaplaVeGuncelle metodunun performans testi\n        /// Metodun makul sürede tamamlanması\n        /// </summary>\n        [Fact]\n        public async Task HesaplaVeGuncelle_ShouldCompleteInReasonableTime()\n        {\n            // Arrange\n            var startTime = DateTime.Now;\n\n            // Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n\n            // Assert\n            var endTime = DateTime.Now;\n            var duration = endTime - startTime;\n\n            // 1 saniyeden az sürmeli\n            Assert.True(duration.TotalSeconds < 1,\n                $"HesaplaVeGuncelle çok yavaş çalışıyor: {duration.TotalSeconds} saniye");\n        }\n\n        #endregion\n\n        #region Data Validation Tests\n\n        /// <summary>\n        /// Test: Ay verilerinin geçerli aralıklarda olması\n        /// </summary>\n        [Fact]\n        public async Task MoonData_ShouldHaveValidRanges()\n        {\n            // Act\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n\n            // Assert\n            var moonData = _ayPusulasiPage.MoonData;\n            Assert.NotNull(moonData);\n\n            // Ay fazı 0-1 arasında olmalı\n            Assert.True(moonData.Phase >= 0 && moonData.Phase <= 1);\n\n            // Aydınlanma 0-1 arasında olmalı\n            Assert.True(moonData.Illumination >= 0 && moonData.Illumination <= 1);\n\n            // Azimuth 0-360 arasında olmalı\n            Assert.True(moonData.Azimuth >= 0 && moonData.Azimuth <= 360);\n\n            // Altitude -90 ile +90 arasında olmalı\n            Assert.True(moonData.Altitude >= -90 && moonData.Altitude <= 90);\n\n            // Ay mesafesi makul aralıkta olmalı (350,000 - 410,000 km)\n            Assert.True(moonData.Distance >= 350000 && moonData.Distance <= 410000);\n\n            // Saat değerleri geçerli olmalı\n            Assert.True(moonData.RiseTime.Hour >= 0 && moonData.RiseTime.Hour <= 23);\n            Assert.True(moonData.SetTime.Hour >= 0 && moonData.SetTime.Hour <= 23);\n        }\n\n        #endregion\n\n        #region Multiple Coordinates Tests\n\n        /// <summary>\n        /// Test: Birden fazla koordinat ile art arda HesaplaVeGuncelle çağrılması\n        /// </summary>\n        [Fact]\n        public async Task HesaplaVeGuncelle_MultipleCoordinates_ShouldUpdateCorrectly()\n        {\n            // Test 1: İstanbul\n            await _ayPusulasiPage.HesaplaVeGuncelle(41.0082, 28.9784);\n            var (faz1, dogus1, batis1, aydinlanma1) = _ayPusulasiPage.GetAllLabels();\n\n            Assert.Contains("75", faz1);\n            Assert.Contains("19", dogus1);\n\n            // Test 2: New York\n            await _ayPusulasiPage.HesaplaVeGuncelle(40.7128, -74.0060);\n            var (faz2, dogus2, batis2, aydinlanma2) = _ayPusulasiPage.GetAllLabels();\n\n            Assert.Contains("50", faz2);\n            Assert.Contains("20", dogus2);\n\n            // Veriler güncellenmiş olmalı (İstanbul verisi New York ile değişmiş olmalı)\n            Assert.NotEqual(faz1, faz2);\n            Assert.NotEqual(dogus1, dogus2);\n        }\n\n        #endregion\n    }\n}\n