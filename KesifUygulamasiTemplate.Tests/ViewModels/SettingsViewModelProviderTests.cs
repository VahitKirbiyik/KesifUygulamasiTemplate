using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Xunit;\nusing KesifUygulamasiTemplate.ViewModels;\nusing KesifUygulamasiTemplate.Services.Interfaces;\n\nnamespace KesifUygulamasiTemplate.Tests.ViewModels\n{\n    public class SettingsViewModelProviderTests\n    {\n        private readonly Mock<IPreferencesService> _mockPreferencesService;\n        private readonly Mock<ILocationPrivacyService> _mockLocationPrivacyService;\n        private readonly SettingsViewModel _viewModel;\n\n        public SettingsViewModelProviderTests()\n        {\n            _mockPreferencesService = new Mock<IPreferencesService>();\n            _mockLocationPrivacyService = new Mock<ILocationPrivacyService>();\n            _viewModel = new SettingsViewModel(_mockPreferencesService.Object, _mockLocationPrivacyService.Object);\n        }\n\n        [Fact]\n        public void MapProviders_ContainsAllExpectedProviders()\n        {\n            // Arrange & Act\n            var providers = _viewModel.MapProviders;\n\n            // Assert\n            Assert.Contains("Google", providers);\n            Assert.Contains("Mapbox", providers);\n            Assert.Contains("HERE", providers);\n            Assert.Contains("Offline", providers);\n            Assert.Equal(4, providers.Length);\n        }\n\n        [Fact]\n        public void RouteOptimizationTypes_ContainsAllExpectedTypes()\n        {\n            // Arrange & Act\n            var types = _viewModel.RouteOptimizationTypes;\n\n            // Assert\n            Assert.Contains("Fastest", types);\n            Assert.Contains("Shortest", types);\n            Assert.Contains("Eco", types);\n            Assert.Contains("Safe", types);\n            Assert.Equal(4, types.Length);\n        }\n\n        [Fact]\n        public void SelectedMapProvider_PropertyChanged_NotifiesCorrectly()\n        {\n            // Arrange\n            var propertyChangedCalled = false;\n            _viewModel.PropertyChanged += (sender, e) =>\n            {\n                if (e.PropertyName == nameof(_viewModel.SelectedMapProvider))\n                    propertyChangedCalled = true;\n            };\n\n            // Act\n            _viewModel.SelectedMapProvider = "Mapbox";\n\n            // Assert\n            Assert.True(propertyChangedCalled);\n            Assert.Equal("Mapbox", _viewModel.SelectedMapProvider);\n        }\n\n        [Fact]\n        public void SelectedRouteOptimization_PropertyChanged_NotifiesCorrectly()\n        {\n            // Arrange\n            var propertyChangedCalled = false;\n            _viewModel.PropertyChanged += (sender, e) =>\n            {\n                if (e.PropertyName == nameof(_viewModel.SelectedRouteOptimization))\n                    propertyChangedCalled = true;\n            };\n\n            // Act\n            _viewModel.SelectedRouteOptimization = "Eco";\n\n            // Assert\n            Assert.True(propertyChangedCalled);\n            Assert.Equal("Eco", _viewModel.SelectedRouteOptimization);\n        }\n\n        [Fact]\n        public void SelectedMapProvider_DefaultValue_IsGoogle()\n        {\n            // Arrange & Act\n            var defaultProvider = _viewModel.SelectedMapProvider;\n\n            // Assert\n            Assert.Equal("Google", defaultProvider);\n        }\n\n        [Fact]\n        public void SelectedRouteOptimization_DefaultValue_IsFastest()\n        {\n            // Arrange & Act\n            var defaultType = _viewModel.SelectedRouteOptimization;\n\n            // Assert\n            Assert.Equal("Fastest", defaultType);\n        }\n    }\n}\n