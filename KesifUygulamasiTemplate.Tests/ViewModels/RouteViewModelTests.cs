using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Moq;\nusing KesifUygulamasiTemplate.ViewModels;\nusing KesifUygulamasiTemplate.Services.Interfaces;\nusing KesifUygulamasiTemplate.Models;\n\nnamespace KesifUygulamasiTemplate.Tests.ViewModels\n{\n    [TestClass]\n    public class RouteViewModelTests\n    {\n        private Mock<IRouteService> _mockRouteService;\n        private Mock<ITrafficService> _mockTrafficService;\n        private RouteViewModel _viewModel;\n\n        [TestInitialize]\n        public void Setup()\n        {\n            _mockRouteService = new Mock<IRouteService>();\n            _mockTrafficService = new Mock<ITrafficService>();\n            _viewModel = new RouteViewModel(_mockRouteService.Object, _mockTrafficService.Object);\n        }\n\n        [TestMethod]\n        public void Constructor_WithValidParameters_ShouldInitializeProperties()\n        {\n            // Arrange & Act\n            var viewModel = new RouteViewModel(_mockRouteService.Object, _mockTrafficService.Object);\n\n            // Assert\n            Assert.IsNotNull(viewModel);\n            Assert.IsNotNull(viewModel.RoutePoints);\n            Assert.IsNotNull(viewModel.TrafficData);\n            Assert.IsNotNull(viewModel.TrafficIncidents);\n            Assert.AreEqual(string.Empty, viewModel.ErrorMessage);\n            Assert.AreEqual(string.Empty, viewModel.TrafficWarningMessage);\n            Assert.IsFalse(viewModel.HasTrafficWarnings);\n            Assert.AreEqual(TimeSpan.Zero, viewModel.EstimatedDelay);\n            Assert.AreEqual(TrafficSeverity.Low, viewModel.CurrentCongestionLevel);\n        }\n\n        [TestMethod]\n        public void Constructor_WithNullRouteService_ShouldThrowArgumentNullException()\n        {\n            // Act & Assert\n            Assert.ThrowsException<ArgumentNullException>(() =>\n                new RouteViewModel(null, _mockTrafficService.Object));\n        }\n\n        [TestMethod]\n        public void Constructor_WithNullTrafficService_ShouldThrowArgumentNullException()\n        {\n            // Act & Assert\n            Assert.ThrowsException<ArgumentNullException>(() =>\n                new RouteViewModel(_mockRouteService.Object, null));\n        }\n\n        [TestMethod]\n        public async Task GenerateRouteAsync_WithValidLocations_ShouldUpdateRoutePoints()\n        {\n            // Arrange\n            var startLocation = new LocationModel { Latitude = 39.9, Longitude = 32.8 };\n            var endLocation = new LocationModel { Latitude = 41.0, Longitude = 29.0 };\n            var routePoints = new List<LocationModel>\n            {\n                startLocation,\n                new LocationModel { Latitude = 40.0, Longitude = 31.0 },\n                endLocation\n            };\n\n            _mockRouteService.Setup(x => x.GenerateRouteAsync(startLocation, endLocation))\n                .ReturnsAsync(routePoints);\n\n            _viewModel.StartLocation = startLocation;\n            _viewModel.EndLocation = endLocation;\n\n            // Act\n            await _viewModel.GenerateRouteAsync();\n\n            // Assert\n            Assert.AreEqual(routePoints.Count, _viewModel.RoutePoints.Count);\n            Assert.AreEqual(startLocation.Latitude, _viewModel.RoutePoints.First().Latitude);\n            Assert.AreEqual(endLocation.Latitude, _viewModel.RoutePoints.Last().Latitude);\n        }\n\n        [TestMethod]\n        public async Task LoadTrafficDataAsync_ShouldUpdateTrafficProperties()\n        {\n            // Arrange\n            var trafficInfo = new List<TrafficInfo>\n            {\n                new TrafficInfo { Severity = TrafficSeverity.Medium, Description = "Traffic congestion" }\n            };\n\n            _mockTrafficService.Setup(x => x.GetTrafficInfoAsync(It.IsAny<LocationModel>(), It.IsAny<LocationModel>()))\n                .ReturnsAsync(trafficInfo);\n\n            _viewModel.StartLocation = new LocationModel { Latitude = 39.9, Longitude = 32.8 };\n            _viewModel.EndLocation = new LocationModel { Latitude = 41.0, Longitude = 29.0 };\n\n            // Act\n            await _viewModel.LoadTrafficDataAsync();\n\n            // Assert\n            Assert.AreEqual(trafficInfo.Count, _viewModel.TrafficData.Count);\n            Assert.AreEqual(trafficInfo.First().Severity, _viewModel.TrafficData.First().Severity);\n        }\n\n        [TestMethod]\n        public void PropertyChanged_ShouldBeRaised_WhenTrafficWarningMessageChanges()\n        {\n            // Arrange\n            bool propertyChangedRaised = false;\n            _viewModel.PropertyChanged += (sender, e) =>\n            {\n                if (e.PropertyName == nameof(_viewModel.TrafficWarningMessage))\n                    propertyChangedRaised = true;\n            };\n\n            // Act\n            _viewModel.TrafficWarningMessage = "Heavy traffic ahead";\n\n            // Assert\n            Assert.IsTrue(propertyChangedRaised);\n            Assert.AreEqual("Heavy traffic ahead", _viewModel.TrafficWarningMessage);\n        }\n\n        [TestMethod]\n        public void PropertyChanged_ShouldBeRaised_WhenHasTrafficWarningsChanges()\n        {\n            // Arrange\n            bool propertyChangedRaised = false;\n            _viewModel.PropertyChanged += (sender, e) =>\n            {\n                if (e.PropertyName == nameof(_viewModel.HasTrafficWarnings))\n                    propertyChangedRaised = true;\n            };\n\n            // Act\n            _viewModel.HasTrafficWarnings = true;\n\n            // Assert\n            Assert.IsTrue(propertyChangedRaised);\n            Assert.IsTrue(_viewModel.HasTrafficWarnings);\n        }\n    }\n}\n