// Test file for StreetView models
using System;
using KesifUygulamasiTemplate.Models;

namespace KesifUygulamasiTemplate.Tests.Models
{
    public class StreetViewModelsTest
    {
        public static void TestStreetViewPanorama()
        {
            // Test StreetViewPanorama creation
            var panorama = new StreetViewPanorama(
                id: "test_pano_001",
                latitude: 40.7128,
                longitude: -74.0060,
                imageUrl: "https://example.com/streetview.jpg",
                description: "Times Square, New York"
            );

            Console.WriteLine($"Panorama ID: {panorama.Id}");
            Console.WriteLine($"Location: {panorama.Latitude}, {panorama.Longitude}");
            Console.WriteLine($"Image URL: {panorama.ImageUrl}");
            Console.WriteLine($"Description: {panorama.Description}");

            // Test distance calculation
            var otherPanorama = new StreetViewPanorama(
                id: "test_pano_002",
                latitude: 40.7589,
                longitude: -73.9851,
                imageUrl: "https://example.com/centralpark.jpg",
                description: "Central Park, New York"
            );

            var distance = panorama.GetDistanceTo(otherPanorama);
            var bearing = panorama.GetBearingTo(otherPanorama);

            Console.WriteLine($"Distance to Central Park: {distance:F2} meters");
            Console.WriteLine($"Bearing to Central Park: {bearing:F1} degrees");
        }

        public static void TestStreetViewLink()
        {
            // Test StreetViewLink creation
            var link = new StreetViewLink(
                fromId: "pano_001",
                toId: "pano_002",
                bearing: 45.0,
                description: "Northeast direction",
                distance: 150.0
            );

            Console.WriteLine($"Link: {link.FromId} -> {link.ToId}");
            Console.WriteLine($"Bearing: {link.Bearing}° ({link.GetCardinalDirection()})");
            Console.WriteLine($"Description: {link.GetDirectionDescription()}");
            Console.WriteLine($"Distance: {link.Distance} meters");

            // Test direction matching
            var isNorthEast = link.IsInDirection(45.0);
            var isNorth = link.IsInDirection(0.0);

            Console.WriteLine($"Is Northeast: {isNorthEast}");
            Console.WriteLine($"Is North: {isNorth}");
        }

        public static void TestPanoramaWithLinks()
        {
            // Create a panorama with navigation links
            var panorama = new StreetViewPanorama(
                id: "main_street",
                latitude: 40.7128,
                longitude: -74.0060,
                imageUrl: "https://example.com/mainstreet.jpg",
                description: "Main Street View"
            );

            // Add navigation links
            var northLink = new StreetViewLink("main_street", "north_street", 0.0, "North", 100.0);
            var eastLink = new StreetViewLink("main_street", "east_street", 90.0, "East", 80.0);
            var southLink = new StreetViewLink("main_street", "south_street", 180.0, "South", 120.0);
            var westLink = new StreetViewLink("main_street", "west_street", 270.0, "West", 90.0);

            panorama.Links.AddRange(new[] { northLink, eastLink, southLink, westLink });

            Console.WriteLine($"Panorama: {panorama.Id}");
            Console.WriteLine($"Navigation links: {panorama.Links.Count}");

            foreach (var link in panorama.Links)
            {
                Console.WriteLine($"  - {link.GetDirectionDescription()}: {link.Distance}m ({link.Bearing}°)");
            }
        }
    }
}
